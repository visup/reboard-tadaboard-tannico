(function () {
  "use strict";
  angular.module("tadapp", ["ngSanitize", "ui.router"]).run([
    "$window",
    "$templateCache",
    function (t, e) {
      var n, i, a, o;
      for (i in ((a = []), (o = t.JST))) (n = o[i]), a.push(e.put(i, n));
      return a;
    },
  ]);
}.call(this),
  function () {
    angular.module("tadapp").provider("DataGeneratorProxy", [
      "ICE_CREAM_NAMES",
      "KPI_NAMES",
      "SPICES",
      function (t, e, n) {
        var i;
        (i = {}),
          (this.catget = function (t) {
            var e;
            return (e = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890")[t % e.length];
          }),
          (this.timeize = function (t, e, n) {
            return n.offset(e, t).getTime();
          }),
          (this.randomInterval = function () {
            return _.sample([d3.time.day, d3.time.week, d3.time.month]);
          }),
          (this.customInterval = function (t) {
            switch (t) {
              case "minute":
                return d3.time.minute;
              case "hour":
                return d3.time.hour;
              case "day":
                return d3.time.day;
              case "week":
                return d3.time.week;
              case "year":
                return d3.time.year;
              default:
                return d3.time.month;
            }
          }),
          (this.randomLabel = function () {
            return _.sample(t);
          }),
          (this.randomTitle = function () {
            return _.sample(e);
          }),
          (this.randomCat = function () {
            return _.sample(n);
          }),
          (this.set = function (t, e) {
            return (i[t] = e);
          }),
          (this.get = function (t) {
            return i[t];
          }),
          (this.$get = function () {
            return { set: this.set, get: this.get };
          });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").provider("schema", function () {
      var t, e;
      (t = {}),
        (e = function (t) {
          return {}.toString
            .call(t)
            .match(/\s([a-zA-Z]+)/)[1]
            .toLowerCase();
        }),
        (this.set = function (e) {
          return (t[e.type] = e);
        }),
        (this.get = function (e) {
          return t[e];
        }),
        (this.toKeys = function (t) {
          return _.zipObject(_.pluck(t, "path"), _.pluck(t, "default"));
        }),
        (this.toSchema = function (t) {
          return _.map(t, function (t, n) {
            return {
              type: e(t),
              id: n.replace(/\./g, "-"),
              default: t,
              required: !0,
              path: n,
            };
          });
        }),
        (this.$get = function () {
          return {
            set: this.set,
            get: this.get,
            toKeys: this.toKeys,
            toSchema: this.toSchema,
          };
        });
    });
  }.call(this),
  function () {
    angular
      .module("tadapp")
      .constant("THEMES_CONST", function () {
        return [
          {
            id: "two-light",
            primary: "#3d3d3d",
            range: ["#e74c3c", "#e67e22", "#f3cf3f", "#f5ee90"],
            keyColor: "#fe4365",
            background: "#f2f2f2",
            class: "theme-twoScale theme-light",
          },
          {
            id: "five-light",
            primary: "#3d3d3d",
            range: ["#542437", "#c02942", "#d95b43", "#ecd078"],
            keyColor: "#16a085",
            background: "#f2f2f2",
            class: "theme-fiveScale theme-light",
          },
          {
            id: "five-dark",
            primary: "#f2f2f2",
            range: ["#542437", "#c02942", "#d95b43", "#ecd078"],
            keyColor: "#16a085",
            background: "#222222",
            class: "theme-fiveScale theme-dark",
          },
        ];
      })
      .provider("theme", [
        "THEMES_CONST",
        function (t) {
          var e;
          (e = window.Themify.templates),
            (this.get = function (t) {
              var n;
              return null !=
                (n = _.find(e, function (e) {
                  return e.name === t;
                }))
                ? n.colors
                : null;
            }),
            (this.$get = function () {
              return { get: this.get };
            });
        },
      ]);
  }.call(this),
  function () {
    angular
      .module("tadapp")
      .provider("DataBuilder", [
        "ICE_CREAM_NAMES",
        "PERSON_NAMES",
        "KPI_NAMES",
        "SPICES",
        function (t, e, n, i) {
          (this.iceCream = function (e) {
            return t[e % t.length];
          }),
            (this.kpi = function (t) {
              return n[t % n.length];
            }),
            (this.person = function (t) {
              return e[t % e.length];
            }),
            (this.$get = function () {
              return { iceCream: this.iceCream };
            });
        },
      ])
      .constant("KPI_NAMES", [
        "Net Profit",
        "Net Profit Margin",
        "Gross Profit Margin",
        "Operating Profit Margin",
        "EBITDA",
        "Revenue Growth Rate",
        "Total Shareholder Return",
        "Economic Value Added",
        "Return on Investment",
        "Return on Capital Employed",
        "Return on Assets",
        "Return on Equity",
        "Debt-to-Equity Ratio",
        "Cash Conversion Cycle",
        "Working Capital Ratio",
        "Operating Expense Ratio",
        "CAPEX to Sales Ratio",
        "Price Earnings Ratio",
        "Net Promoter Score",
        "Customer Retention Rate",
        "Customer Satisfaction Index",
        "Customer Profitability Score",
        "Customer Lifetime Value",
        "Customer Turnover Rate",
        "Customer Engagement",
        "Customer Complaints",
        "Market Growth Rate",
        "Market Share",
        "Brand Equity",
        "Cost per Lead",
        "Conversion Rate",
        "Search Engine Rankings",
        "Page Views and Bounce Rate",
        "Customer Online Engagement Level",
        "Online Share of Voice",
        "Social Networking Footprint",
        "Klout Score",
        "Six Sigma Level",
        "Capacity Utilisation Rate",
        "Process Waste Level",
        "Order Fulfilment Cycle Time",
        "Delivery In Full, On Time Rate",
        "Inventory Shrinkage Rate",
        "Project Schedule Variance",
        "Project Cost Variance",
        "Earned Value Metric",
        "Innovation Pipeline Strength",
        "Return on Innovation Investment",
        "First Pass Yield",
        "Rework Level",
        "Quality Index",
        "Overall Equipment Effectiveness",
        "Process or Machine Downtime Level",
        "First Contact Resolution",
        "Human Capital Value Added",
        "Revenue Per Employee",
        "Employee Satisfaction Index",
        "Employee Engagement Level",
        "Staff Advocacy Score",
        "Employee Churn Rate",
        "Average Employee Tenure",
        "Absenteeism Bradford Factor",
        "360-Degree Feedback Score",
        "Salary Competitiveness Ratio",
        "Time to Hire",
        "Training Return on Investment",
        "Carbon Footprint",
        "Water Footprint",
        "Energy Consumption",
        "Saving Levels",
        "Supply Chain Miles",
        "Waste Reduction Rate",
        "Waste Recycling Rate",
        "Product Recycling Rate",
      ])
      .constant("ICE_CREAM_NAMES", [
        "60 Grit",
        "69 Scoops",
        "A Midsummer’s Ice Cream",
        "Abandon Mint",
        "Acid Crystal Chunk",
        "Adagio for Stringbeans",
        "Algae Rhythm",
        "Almond Terrace",
        "Antifreeze",
        "Anti-Gravity Chocolate",
        "Ass Candy",
        "Attila the Honey Bee",
        "Baba Rum",
        "Banana Cabana",
        "Beluga Gum",
        "Big Juicy",
        "Bitter Sweet Caramel Kvetch",
        "Bleach Melba",
        "Bleached Peach",
        "Bliss",
        "Bloated Belly",
        "Bloodpudding",
        "Blue Sushi",
        "Bon Bons Jovi",
        "Booster Cake",
        "Boots and Laces",
        "Bourbon Bliss",
        "Brain Butter",
        "Brother’s Milk",
        "Buffalo Butter",
        "Burnt Umber",
        "Buttertop",
        "Cabbage ‘N Cream",
        "Caramel Knowledge",
        "Carmel Knowledge",
        "Carnival Coffee",
        "Cascade Mint",
        "Cashew Butter Cucumber Crunch",
        "Cashew Planet",
        "Cashioca",
        "Caviar Jack",
        "Celestial Pudding",
        "Ceviche Caramel Chunk",
        "Chamois",
        "Cheerful of Chocolate",
        "Chernobyl Chunk",
        "Cherry Potter",
        "Chillium",
        "Chips and Guac",
        "Choco Lulu",
        "Chocolate Bondage",
        "Chocolate Budoir",
        "Chocolate Death March",
        "Chocolate Guillotine",
        "Chocolate Mocha Masquerade",
        "Chocolate Mussolini",
        "Chocolate Revisionist",
        "Chorizo Chunko",
        "Chow Biscuit",
        "Christmas Turkey",
        "Chutney",
        "Chutney Chunk",
        "Ciao",
        "Ciàobama",
        "Clambake",
        "Cloisonné Sorbet",
        "Codfish Shake",
        "Coffee Cobbler",
        "Coffee Crash",
        "Coffee Kraze",
        "Coffee Menagerie",
        "Coffee School",
        "Cola Cones",
        "Cold Cuts Crunch",
        "Compost",
        "Compucocktail",
        "Confection Detection",
        "Confiture Demure",
        "Cookie Butter",
        "Cookie Pagent",
        "Corn Beef and Cabbage",
        "Corndog and Kibble",
        "Coronal Mass Ejections",
        "Cosmic Crunch",
        "Crab Cookies",
        "Crawdaddy Gumbo",
        "Cream of Caulk",
        "Creamed Capers",
        "Creamed Corn ‘N Oats",
        "Cream-Puff Chunk",
        "Creamy Puff Chuck",
        "Crumble Cheese",
        "Crutzle",
        "Cryo-Gin Fizz",
        "Cupcake",
        "Curry Slurry",
        "Diabeeto",
        "Dijon Bomb",
        "Dipstick",
        "Dirty Laundry",
        "Dot Com Crunch",
        "Double Chocolate Chum",
        "Double Dada",
        "Double Taurus",
        "Drastic Plastic",
        "Dripping Salad",
        "Dung Beetle",
        "Earthy",
        "Eggs Benadryl",
        "Elder Carrot",
        "Electric Waffle",
        "Escargot",
        "Ex-Boyfriends",
        "FeedBag",
        "Fern Salad",
        "Fickle Fat",
        "Final Consumption",
        "Fish ‘N Chips",
        "Fishstomp",
        "Flagrant Fish",
        "Flip Out",
        "Flow Tart",
        "Fluoride ‘N Honey",
        "FlyButter",
        "Flying Potato",
        "Fondue Freeze",
        "FreezeBurn",
        "Freezer Burn",
        "Freezia",
        "French Poodle",
        "Fried Earwig",
        "Frog Jerkey",
        "Frosted Ptarmigan",
        "Frothy Logic",
        "FroZEN",
        "Fruit Chowder",
        "Fudge Soy Bean",
        "Fudge Vengeance",
        "Funky Butter",
        "Future Freeze",
        "Gates Guzzler",
        "Gazpacho Gelato",
        "GD Peanut Brittle",
        "Gelatinous Plastic",
        "Gelatosphere",
        "Gem Cream",
        "Giotto Gelato",
        "Glue Belly",
        "Godzilla Pudding Chunks",
        "Gorge Us",
        "Granola Fantasy Canteen",
        "Green Gravity",
        "Green Salad Surprise",
        "Gristle",
        "Gristle Bits",
        "Gristle Epistle",
        "Guano Ameretto",
        "Guilty Swirl",
        "Guru Chew",
        "Half Full",
        "Ham Crunchers",
        "Ham Horns",
        "Ham Licker",
        "Has Bean",
        "Havasu Cherry",
        "Healthy Nut",
        "Heel Pudding",
        "Hemp Hangover",
        "Hester Praline Pecan",
        "High on Ham",
        "Hillbilly Riviera",
        "Honey",
        "Hooda-Gooda",
        "Horizon Glue",
        "Hot Bowl of Ice",
        "Hot Dog Sorbet",
        "HotBelly",
        "Ice Burger",
        "Ice Can",
        "Ice Cream Socialism",
        "Ice Crush",
        "Ice Lava",
        "Iced Patty Melt",
        "Italian Ice Ice Baby!",
        "Jalapeño Fireball",
        "Jamocha Jerky",
        "Jellyfish Java",
        "Jubulent Mess",
        "Juice Monster",
        "Juicy Freeze",
        "JuJu",
        "Jurassic Pork",
        "Kale ‘N Gravy",
        "Kelp Curry",
        "Kiwi Sea",
        "Kohlrabi Krunch",
        "Krillcream",
        "La Niña Colada",
        "Lardvark",
        "Leaf Beef",
        "Leftover Pesto",
        "Lemming Meringue Pie",
        "Lewd Licorice",
        "Lichen Sorbet",
        "Licorice Lique",
        "LiquiPrawn",
        "Lolipop Flower",
        "Lovely Lovely Two",
        "Ludicrous Licorice",
        "Macho Miso",
        "Mad Beef",
        "Mad Grahams",
        "Malic Acid",
        "Mañana Mango",
        "Mango Mango",
        "Manic Planet",
        "Mantis Milk",
        "Maple Thor",
        "Marmalade Parade",
        "Marshmallow Mastic",
        "Marvelous Mutton",
        "Marzipan Magic",
        "Marzipan Station",
        "Maximum Coconut",
        "Meat Locker",
        "Mediterranean Subterfuge",
        "Melville Mint",
        "Meow",
        "mGravy",
        "Milky Feeling",
        "Millennarita",
        "Mini Bar",
        "Mint Dynasty",
        "Mint Maestro",
        "Mobile Mousse",
        "Mod Cow",
        "Modicrumb Cake",
        "Mongoquant",
        "Monkey Double",
        "Monster Cream",
        "Moose Toe",
        "Mountain Mud",
        "Multiple Cake",
        "Mum",
        "My Bad",
        "Mystery Chunkz",
        "Mystic Poppy Mint",
        "Mystical Union",
        "Nacreous Asperagus",
        "Nanna Banana",
        "NASDAQ Daiquiri",
        "Nasty Freeze",
        "Nasty Good",
        "Nastylicious",
        "Nectarine Cream Dream",
        "Neoprom",
        "New Whirled Order",
        "No Tomorrow",
        "Noodle Doodle",
        "Nose Nuggets",
        "Nougat and Lard",
        "Nuclear Winter Squash",
        "Oleander Ketchup",
        "Operation Double Dip",
        "Orange Bounce",
        "Pang Meringue",
        "Panic Button",
        "Parrot Cake",
        "Patty Meltdown",
        "Peanut Buddha",
        "Peanuts Envoy",
        "Peek-A-Boo Pork",
        "Pepp",
        "Peppermint Nudge",
        "Pesto Praline",
        "Peyote",
        "Phenolic Phudge",
        "Pigeon Pecan",
        "Pineapple Day",
        "Ping Pang Pecan",
        "Pink Freud",
        "Pizza ‘N Beer",
        "Pludge",
        "Poached Eggs ‘N Sherry",
        "Podunk Punch",
        "Poi Party",
        "Pomme Juan",
        "Popcorn Reprieve",
        "Pork Slurry",
        "Potash & Gizzard",
        "PowerPrawn",
        "Practical Pork",
        "Praline Shock",
        "Prawn Alfredo",
        "Prawn and Pretzel",
        "Prawn Bons",
        "Prawn Danish",
        "Prawn Flakes",
        "Prawn Gravy",
        "Prawn Pudding",
        "Prawn Toffee",
        "Prawnchilada",
        "Prawnderful",
        "Preakness",
        "Precious Potato",
        "Pudge",
        "Pulmonary Cheesecake",
        "Pumice Crunch",
        "Purple Squirtle",
        "Rainbow Ed",
        "Rasta Pops",
        "Razzle Dazzle",
        "Red Hot Chilli Butter",
        "Retro Cocoa",
        "Rhesus Buttercup",
        "Rickety Splat",
        "Ripple Effect",
        "Road Rash Hash",
        "Roadkill Penguin",
        "Roasted Rooster",
        "Rocky Raccoon Road",
        "Rocky Road Revisionist",
        "Rootbear Flotsam",
        "Royal Tease",
        "Rust Bubbles",
        "Sacrificial Ham",
        "Saguarro Foam",
        "San Francisco Mint",
        "Sausage Machine",
        "Scat Leather",
        "Scooper Duper",
        "Sea Slug and Rabbit",
        "Seven Scentric",
        "Sex Potato",
        "Sexy Sadie Crunch",
        "Shangrilatte",
        "Silly Von Willy",
        "Slope",
        "Slow & Pulpy",
        "Sludge Farm",
        "Smelling Salts",
        "Smoochy Goochy Bar",
        "Snow Flake",
        "Snuggy Lumps",
        "Sock Drawer Slush",
        "Sour Crocodile",
        "Spam Sushi",
        "Spice Cadet",
        "Spooncake",
        "Squid",
        "Squid Plasma",
        "Squid Pops",
        "Stinko Balboa",
        "Stucco",
        "Sugar Caulk",
        "Sugar Doggy",
        "Sunday Night Syndrome",
        "Superstring Cheese",
        "Sushi Swirl",
        "Sweet Rainbow",
        "Swirling Guilt",
        "Sympathy Slosh",
        "Taco Hash",
        "Tali-Bon Bons",
        "Teen Cream",
        "Teletubby Hubby",
        "Temporal Freeze",
        "Temporary Vegetable",
        "Terra Cotta Jones",
        "Tickle",
        "Tidal Yule",
        "Toejam Swirl",
        "Tomato Truffle",
        "Tomatofish",
        "Tropicandy",
        "Tuna Juice",
        "Tuna Truffle",
        "Turf Damage",
        "Tutti Frutti Butti",
        "Ultra Beef",
        "Vague Tuna",
        "Van Mango",
        "Vanilla Spice Pureé",
        "VegiGate",
        "Velveeta ‘N Grits",
        "Velvet Stucco",
        "Venison Chilli Chunk",
        "Venom Flamingo",
        "Vicuña Venison Chew",
        "Voodles",
        "Wanton Won Ton",
        "Wasabi Chunk",
        "Water Lily Scum Snaps",
        "Whale Jelly",
        "Whiskey and Bits",
        "Yeasty Pete",
        "Yogurt Hygene",
        "Yucatango",
        "Zanilla",
        "Zillaberry",
        "Zoo Butter",
      ])
      .constant("PERSON_NAMES", [
        "Britt Shankle",
        "Treva Moise",
        "Madie Jolley",
        "Nolan Streight",
        "Flavia Petitt",
        "Ebony Rick",
        "Roselyn Lazzaro",
        "Ruthann Pierro",
        "Shellie Kintz",
        "Christena Monreal",
        "Olene Dutton",
        "Celestine Hagwood",
        "Shad Rabideau",
        "Meghann Fout",
        "Foster Mcgillivray",
        "Lorena Derringer",
        "Hugo Bloomfield",
        "Luvenia Corlew",
        "Karlene Andreasen",
        "Margit Breaux",
        "Xiomara Tipps",
        "Rey Pappan",
        "Norah Casavant",
        "Russell Dimarco",
        "Gaynelle Gilmartin",
        "Nola Lukowski",
        "Tana Lynn",
        "Sylvie Knauf",
        "Gladis Crader",
        "Jerrell Petsche",
        "Cira Mecham",
        "Charlott Gable",
        "Shanti Burrage",
        "Timothy Degroat",
        "Douglas Shih",
        "Gabriel Calcagno",
        "Ardella Keffer",
        "Rosena Jolin",
        "Jacklyn Delosantos",
        "Daria Tovar",
        "Mike Pernice",
        "Caprice Grosvenor",
        "Amiee Nickell",
        "Loni Saldana",
        "Manie Cosme",
        "Esmeralda Nicolson",
        "Shawnda Stacey",
        "Tambra Varnadoe",
        "Liberty Weimer",
        "Marti Elton",
        "Isaias Fishman",
        "Trinidad Coppola",
        "Nichelle Schacherer",
        "Leatrice Mcferron",
        "Ruben Dupras",
        "Vicky Fiorenza",
        "Quiana Wolfenbarger",
        "Lavon Forbush",
        "Gearldine Dakin",
        "Tameka Rascoe",
        "Sherlene Westhoff",
        "Jolynn Niemann",
        "Helene Kimura",
        "Katy Scheiber",
        "Octavio Strange",
        "Natosha Neumeister",
        "Mason Falco",
        "Geralyn Platz",
        "Lorilee Burress",
        "Akilah Nowell",
        "Boyce Kurz",
        "Edda Oliveira",
        "Amada Preusser",
        "Brittani Behne",
        "Nannie Blay",
        "Kourtney Rothwell",
        "Jackie Pastorius",
        "Lesley Leitner",
        "Eddie Saleh",
        "Edelmira Rodenberg",
        "Lani Schram",
        "Nicolle Borja",
        "Rosia Kowal",
        "Kiana Sharples",
        "Houston Gant",
        "Gilda Braswell",
        "Deloris Mcnatt",
        "Rosaura William",
        "Verna Strout",
        "Stephani Hanscom",
        "Larissa Espana",
        "Sharee Worsley",
        "Beth Heron",
        "Bess Holtsclaw",
        "Stephen Mash",
        "Morris Kropp",
        "Antone Lopez",
        "Kattie Hudon",
        "Viola Heidel",
        "Javier Schrantz",
        "Tobi Lemos",
        "Lessie Blackburn",
        "Tereasa Delosreyes",
        "Cecily Giuffre",
        "Blythe Riojas",
        "Reva Fredette",
        "Merlyn Agosto",
        "Marica Rey",
        "Cleotilde Kestler",
        "Grover Maggard",
        "Rob Roberti",
        "Dannie Suarez",
        "Lauri Twiss",
        "Garfield Hensen",
        "Joette Niccum",
        "Tracy Moscato",
        "Herlinda Gess",
        "Hiroko Vess",
        "Ruthe Vickery",
        "Lou Northway",
        "Alejandra Bermejo",
        "Joline Gump",
        "Mechelle Lanni",
        "Yoshie Gallman",
        "Hosea Cincotta",
        "Queenie Breland",
        "Sheldon Byrge",
        "Kayleen Mcgovern",
        "Lori Bergfeld",
        "Davina Gerardi",
        "Trent Mizell",
        "Winford Hott",
        "Margareta Wyckoff",
        "Shanice Waltman",
        "Florence Hickle",
        "Kati Fairbairn",
        "Cherrie Pass",
        "Harley Fiscus",
        "Sophia Gessner",
        "Inge Fuentez",
        "Errol Bertrand",
        "Rebecca Petrosino",
        "Clifton Mcmillon",
        "Marquetta Root",
        "Glory Grieco",
        "Colin Gidney",
        "Zachariah Crump",
        "Sonya Beller",
        "Benedict Eckles",
        "Yulanda Happel",
        "Annette Toohey",
        "Stephane Burd",
        "Latashia Bryd",
        "Tennie Pricer",
        "Lynette Nicol",
        "Tijuana Pressley",
        "Brenton Petway",
        "Stormy Enders",
        "Gaynell Timberlake",
        "Enedina Kieffer",
        "Madison Schrader",
        "Enola Preciado",
        "Ona Curry",
        "Bulah Wilkes",
        "Saturnina Carver",
        "Reda Chicoine",
        "Cristie Crooms",
        "Wonda Batie",
        "Ressie Canon",
        "Dann Saidi",
        "Lacresha Helmuth",
        "Joshua Peranio",
        "Tyson Dyar",
        "Clarice Guebert",
        "Wanita Kupiec",
        "Shara Milliner",
        "Christina Pehrson",
        "Janel Crandall",
        "Lorriane Miga",
        "Giuseppe Staples",
        "Orval Hollander",
        "Tonita Keyser",
        "Vernell Harren",
        "Zita Raybon",
        "Taylor Deshong",
        "Dina Burciaga",
        "Palmira Mcfaddin",
        "Shaina Theodore",
        "Serina Lightbody",
        "Ella Petrovich",
        "Miesha Farless",
        "Elouise Choe",
        "Florene Barrington",
        "Marnie Weigand",
        "Emilia Turnquist",
        "Dexter Isler",
        "Ed Marvel",
        "Marion Legrand",
        "Mammie East",
        "Rachell Brazil",
        "Samuel Schmelzer",
        "Buffy Willard",
        "Angle Loera",
        "Neely Furness",
        "Cortney Bessler",
        "Burton Symes",
        "Bea Heim",
        "Jonnie Firkins",
        "Tyisha Brakebill",
        "Donette Morant",
        "Stefany Dulmage",
        "Nellie Prim",
        "Francisco Cantrelle",
        "Dudley Kellam",
        "Lyn Shoop",
        "Kandice Malek",
        "Lynwood Villalpando",
        "Candace Lehner",
        "Brady Vandermeulen",
        "Rolanda Kinoshita",
        "Ali Mcglasson",
        "Omega Payan",
        "Emory Seidman",
        "Verline Hulme",
        "Karly Cheever",
        "Dale Breeze",
        "Cristen Carino",
        "Williams Rhoades",
        "Cody Decuir",
        "Paulita Cheyne",
        "Alesia Misiewicz",
        "Rina Drayer",
        "Virgie Segalla",
        "Gabriela Deaver",
        "Peter Battle",
        "Alana Hansen",
        "Bud Peltz",
        "Saran Pickles",
        "Domenica Paulino",
        "Carter Kealoha",
        "Rochelle Seibel",
        "Sherice Tomasini",
        "Stephenie Kent",
        "Aleida Podesta",
        "Manda Denver",
        "Tomeka Mcveigh",
        "Berneice Valazquez",
        "Vern Mchale",
        "Jefferey Quiroga",
        "Francis Cummins",
        "Vannesa Hedman",
        "Charla Zingaro",
        "Stanley Bermea",
        "Jadwiga Fyffe",
        "Kenyatta Fredericks",
        "Emil Marriner",
        "Vincent Weinstock",
        "Elenor Debruyn",
        "Devorah Cybart",
        "Shayne Luellen",
        "Mireille Renard",
        "Marcene Bowden",
        "Karma Ho",
        "Dusty Mendes",
        "Junita Michell",
        "Lenora Deininger",
        "Onita Sobota",
        "Jake Frank",
        "Anne Eleby",
        "Josphine Spade",
        "Evelina Hakes",
        "Charisse Ketterman",
        "Myles Presley",
        "Ping Koffler",
        "Lorenza Otero",
        "Kendal Dennis",
        "Sharon Mcbride",
        "Kristal Bonilla",
        "Toya Lipton",
        "Anjelica Piraino",
        "Pansy Irby",
        "Corrie Haas",
        "Misti Lacayo",
        "Jona Paton",
        "Giovanna Lewison",
        "Tynisha Leitzel",
        "Milissa Yamanaka",
        "Darby Graves",
        "Ivelisse Harter",
        "Katelynn Pagel",
        "Roxie Satterlee",
        "Jan Kearney",
        "Shirlee Lynch",
        "Samantha Taitt",
        "Phillip Galli",
        "Alejandro Ellingwood",
        "Dell Baize",
        "Enda Kerber",
        "Miriam Duran",
        "Kanisha Mckain",
        "Delena Ardis",
        "Willow Schaefer",
        "Derick Narvaez",
        "Josefine Crittenden",
        "Gene Arsenault",
        "Lory Mejorado",
        "Chantal Matthias",
        "Jenee Hee",
        "Lourdes Tyer",
        "Fausto Hurrell",
        "Eveline Zelman",
        "Janey Lauber",
        "Neomi Ramsay",
        "Yuk Huitt",
        "Cherish Jarosz",
        "Luther Hornung",
        "Myrl Finkbeiner",
        "Drew Rosier",
        "Jon Dahm",
        "Earl Goldstein",
        "Tiffany Chauncey",
        "Jillian Ikard",
        "Joy Sugar",
        "Daysi Sandor",
        "Sydney Copes",
        "Aldo Girard",
        "Rodger Lettinga",
        "Mari Hirt",
        "Huey Row",
        "Wei Delisle",
        "Venessa Weedman",
        "Rowena Bones",
        "Serita Clemmer",
        "Leoma Maule",
        "Leigh Novak",
        "Felice Sitler",
        "Fritz Masters",
        "Remona Champ",
        "Hyacinth Vasser",
        "Glayds Strate",
        "Marquerite Levario",
        "Jordan Soliman",
        "Leontine Fink",
        "Love Tanner",
        "Brigid Ibrahim",
        "Leroy Renfrew",
        "Heidi Casale",
        "Romaine Kadel",
        "Michele Vinson",
        "Adelaida Givan",
        "Karol Jefferys",
        "Kellie Britton",
        "Angele Gillie",
        "Theron Romanik",
        "Sebrina Havard",
        "Babara Jelley",
        "Carleen Dawson",
        "Ruby Mastrangelo",
        "Sarah Byford",
        "Goldie Puga",
        "Twana Mcnab",
        "Adelia Leggett",
        "Mittie Spillman",
        "Lynetta Brantner",
        "Merry Corkill",
        "Charlyn Holdeman",
        "Dan Kleiner",
        "Trenton Tatham",
        "Inga Gadsden",
        "Maricela Amis",
        "Li Rao",
        "Andra Morabito",
        "Harris Bunting",
        "Garth Reider",
        "Kayce Burchell",
        "Nena Guel",
        "Magdalene Bribiesca",
        "Evie Wentz",
        "Dionne Jamison",
        "Rutha Kensinger",
        "Holli Roesler",
        "Courtney Cabell",
        "Winifred Keener",
        "Grazyna Sanks",
        "Anisa Casares",
        "Nathalie Bouton",
        "Shakita Palmeri",
        "Kelli Armagost",
        "Marlene Pinto",
        "Leisha Torre",
        "Cecille Rosenbalm",
        "Darell Eggert",
        "Fe Dudash",
        "Malka Comerford",
        "Emelda Chichester",
        "Rochel Livers",
        "Tawna Cuadrado",
        "Hoa Nadler",
        "Francisca Mccool",
        "Melba Derrico",
      ])
      .constant("SPICES", [
        "Ajwain",
        "Akudjura",
        "Alexanders",
        "Alkanet",
        "Allspice",
        "Angelica",
        "Anise",
        "Annatto",
        "Apple mint",
        "Artemisia",
        "Asafoetida",
        "Asarabacca",
        "Avens",
        "Avocado leaf",
        "Barberry",
        "Basil",
        "Bay leaf",
        "Bee balm",
        "Boldo",
        "Borage",
        "Caper",
        "Caraway",
        "Cardamom",
        "Catnip",
        "Cassia",
        "Cayenne",
        "Celery",
        "Chervil",
        "Chicory",
        "Chili",
        "Chives",
        "Cicely",
        "Cilantro",
        "Cinnamon",
        "Clary",
        "Clove",
        "Coriander",
        "Costmary",
        "Cudweed",
        "Culantro",
        "Cumin",
        "Curry",
        "Dill",
        "Elderflower",
        "Epazote",
        "Fennel",
        "Fenugreek",
        "Filé powder",
        "Fingerroot",
        "Galangal",
        "Galingale",
        "Garlic chives",
        "Ginger",
        "Golpar",
        "Horseradish",
        "Houttuynia",
        "Huacatay",
        "Hyssop",
        "Jasmine",
        "Jimbu",
        "Juniper",
        "Kala zeera",
        "Kawakawa",
        "Kencur",
        "Keluak",
        "Kinh gioi",
        "Kokam seed",
        "Korarima",
        "Koseret",
        "Lavender",
        "Lemon",
        "Lemongrass",
        "Leptotes",
        "Licorice",
        "Lime flower",
        "Lovage",
        "Mace",
        "Mahlab",
        "Marjoram",
        "Mastic",
        "Mint",
        "Musk mallow",
        "Mustard",
        "Nigella",
        "Njangsa",
        "Nutmeg",
        "Olida",
        "Oregano",
        "Orris root",
        "Pandan",
        "Paprika",
        "Paracress",
        "Parsley",
        "Pepper",
        "Peppermint",
        "Perilla",
        "Quassia",
        "Rosemary",
        "Rue",
        "Safflower",
        "Saffron",
        "Sage",
        "Salad burnet",
        "Salep",
        "Sassafras",
        "Savory",
        "Savory",
        "Silphium",
        "Shiso",
        "Sorrel",
        "Sorrel",
        "Spearmint",
        "Spikenard",
        "Star anise",
        "Sumac",
        "Tarragon",
        "Thyme",
        "Turmeric",
        "Vanilla",
        "Voatsiperifery",
        "Wasabi",
        "Water-pepper",
        "Watercress",
        "Wattleseed",
        "Willow herb",
        "Wintergreen",
        "Wood avens",
        "Woodruff",
        "Wormwood",
        "Yerba buena",
        "Za'atar",
        "Zedoary",
      ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-areas", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p;
          return (
            null != e.gen &&
              ((a = (u = e.gen).groups),
              (i = u.cols),
              (d = u.min),
              (s = u.max),
              (r = u.interval),
              (c = u.start),
              (n = u.cats)),
            (l = "stacked" === e.subtype),
            a || (a = l ? 3 : 1),
            i || (i = _.random(3, 2 * e.layout.width)),
            d || (d = 0),
            s || (s = _.random(100, 1e3)),
            (o = r ? t.customInterval(r) : t.randomInterval()),
            (p = c
              ? new Date(c)
              : new Date(_.random(2010, 2014), _.random(11), 1)),
            _.flatten(
              _.range(a).map(function (e) {
                var a;
                return (
                  (a = window.noise()),
                  _.range(i).map(function (i) {
                    return {
                      x: t.timeize(i, p, o),
                      y: d + Math.floor(a.getVal(i / 4) * (s - d)),
                      category: n ? n[e] : "group " + t.catget(e),
                    };
                  })
                );
              })
            )
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-bars-column", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p;
          return (
            null != e.gen &&
              ((d = e.gen),
              (a = d.groups),
              (i = d.cols),
              (s = d.min),
              (l = d.max),
              (n = d.cats),
              (p = d.xs)),
            (r =
              "grouped" === (u = e.subtype) ||
              "stacked" === u ||
              "normalized" === u),
            a ||
              (a = r
                ? "stacked" === (c = e.subtype) || "normalized" === c
                  ? 3
                  : 2
                : 1),
            i ||
              (i = _.random(
                Math.ceil(e.layout.width / 4),
                Math.ceil(e.layout.width / 2)
              )),
            s || (s = 0),
            l || (l = _.random(100, 1e4)),
            (o = 0),
            _.flatten(
              _.range(i).map(function (e) {
                var i;
                return (
                  (i = p ? p[e] : t.randomCat()),
                  _.range(a).map(function (e) {
                    return {
                      x: i,
                      y: _.random(s, l),
                      category: n ? n[e] : "group " + t.catget(e),
                      id: o++,
                    };
                  })
                );
              })
            )
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-bars", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p, m, g, f, h, b, y, v, w;
          return (
            null != e.gen &&
              ((g = e.gen),
              (a = g.groups),
              (i = g.cols),
              (p = g.min),
              (u = g.max),
              (n = g.cats),
              (w = g.xs),
              (l = g.interval),
              (y = g.start),
              (m = g.omit),
              (c = g.merge)),
            (s =
              "grouped" === (f = e.subtype) ||
              "stacked" === f ||
              "normalized" === f ||
              "stacked-time" === f ||
              "grouped-time" === f ||
              "normalized-time" === f),
            (d =
              "basic-time" === (h = e.subtype) ||
              "stacked-time" === h ||
              "grouped-time" === h ||
              "normalized-time" === h),
            a ||
              (a = s
                ? "stacked" === (b = e.subtype) || "normalized" === b
                  ? 3
                  : 2
                : 1),
            i ||
              (i = _.random(
                Math.ceil(e.layout.width / 4),
                Math.ceil(e.layout.width / 2)
              )),
            p || (p = 0),
            u || (u = _.random(100, 1e4)),
            (r = l ? t.customInterval(l) : t.randomInterval()),
            (v = y
              ? new Date(y)
              : new Date(_.random(2010, 2014), _.random(11), 1)),
            (o = 0),
            _.flatten(
              _.range(i).map(function (e) {
                var i;
                return (
                  (i = w ? w[e] : d ? t.timeize(e, v, r) : t.randomCat()),
                  _.range(a).map(function (a) {
                    var r;
                    return (
                      (r = {
                        x: i,
                        y: _.random(p, u),
                        category: n ? n[a] : "group " + t.catget(a),
                        id: o++,
                      }),
                      null != m && (r = _.omit(r, m)),
                      null != c && (r = _.merge({}, r, c[e][a])),
                      r
                    );
                  })
                );
              })
            )
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-bars-horizontal", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p;
          return (
            null != e.gen &&
              ((d = e.gen),
              (a = d.groups),
              (i = d.cols),
              (s = d.min),
              (l = d.max),
              (n = d.cats),
              (p = d.xs)),
            (r =
              "grouped" === (u = e.subtype) ||
              "stacked" === u ||
              "normalized" === u),
            a ||
              (a = r
                ? "stacked" === (c = e.subtype) || "normalized" === c
                  ? 3
                  : 2
                : 1),
            i ||
              (i = _.random(
                Math.ceil(e.layout.width / 4),
                Math.ceil(e.layout.width / 2)
              )),
            s || (s = 0),
            l || (l = _.random(100, 1e4)),
            (o = 0),
            _.flatten(
              _.range(i).map(function (e) {
                var i;
                return (
                  (i = p ? p[e] : t.randomCat()),
                  _.range(a).map(function (e) {
                    return {
                      x: i,
                      y: _.random(s, l),
                      category: n ? n[e] : "group " + t.catget(e),
                      id: o++,
                    };
                  })
                );
              })
            )
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-bars-ranking", function (e) {
          var n, i, a, o, r;
          return (
            null != e.gen &&
              ((r = (o = e.gen).slices),
              (a = o.min),
              (i = o.max),
              (n = o.labels)),
            r || (r = _.random(3, 8)),
            a || (a = 0),
            i || (i = _.random(-1e3, 1e4)),
            _.range(r).map(function (e) {
              return {
                id: "" + e,
                label: n ? n[e] : t.randomLabel(),
                value: _.random(a, i),
              };
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-bullet", function (e) {
          var n, i, a, o, r, l, s, d;
          return (
            null != e.gen &&
              ((r = (d = e.gen).min),
              (a = d.max),
              (i = d.label),
              (n = d.description),
              (s = d.omit),
              (o = d.merge)),
            r || (r = 0),
            a || (a = _.random(100, 300)),
            (l = {
              id: "" + e.id,
              value: _.random(r, a),
              label: null != i ? i : t.randomLabel(),
              description: null != n ? n : "Some optional description",
            }),
            null != s && (l = _.omit(l, s)),
            null != o && (l = _.merge({}, l, o)),
            l
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-date", function (t) {
          var e, n, i, a, o;
          return (
            null != t.gen &&
              ((o = (a = t.gen).time), (i = a.omit), (e = a.merge)),
            (n = {
              id: "" + t.id,
              time:
                o ||
                new Date(
                  _.random(2010, 2014),
                  _.random(11),
                  _.random(31)
                ).getTime(),
            }),
            null != i && (n = _.omit(n, i)),
            null != e && (n = _.merge({}, n, e)),
            n
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-funnel", function (e) {
          var n, i, a, o, r, l, s, d, u;
          return (
            null != e.gen &&
              ((d = (l = e.gen).slices),
              (r = l.min),
              (o = l.max),
              (i = l.label),
              (n = l.description),
              (s = l.series),
              (a = l.link)),
            d || (d = _.random(3, Math.floor(e.layout.height / 2))),
            r || (r = 0),
            o || (o = _.random(100, 1e4)),
            s || (s = 15),
            (u = _.sortBy(
              _.range(d).map(function () {
                return _.random(r, o);
              })
            ).reverse()),
            _.range(d).map(function (e) {
              return {
                id: e,
                label: null != i ? i : t.randomLabel(),
                description: null != n ? n : "Some optional description",
                value: u[e],
                series: _.range(s).map(function () {
                  return _.random(100);
                }),
                link: null != a ? a : "http://www.tadaboard.com",
              };
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-graph", function (t) {
          var e, n, i, a, o, r, l, s, d;
          return (
            null != t.gen &&
              ((d = t.gen),
              (r = d.nodes),
              (e = d.edges),
              (o = d.min),
              (n = d.max),
              (s = d.omitNode),
              (a = d.mergeNode),
              (l = d.omitEdge),
              (i = d.mergeEdge)),
            r || (r = _.random(10, 20)),
            e || (e = _.random(10, 30)),
            o || (o = 0),
            n || (n = _.random(100, 1e4)),
            {
              nodes: _.range(r).map(function (t) {
                var e;
                return (
                  (e = {
                    radius: _.random(o, n),
                    color: _.random(o, n),
                    label: "node " + t,
                    id: t,
                  }),
                  null != s && (e = _.omit(e, s)),
                  null != a && (e = _.merge({}, e, a[t])),
                  e
                );
              }),
              edges: _.range(e).map(function (t) {
                var e;
                return (
                  (e = {
                    source: _.random(r),
                    target: _.random(r),
                    width: _.random(o, n),
                    color: _.random(o, n),
                    id: t,
                  }),
                  null != l && (e = _.omit(e, l)),
                  null != i && (e = _.merge({}, e, i[t])),
                  e
                );
              }),
            }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-hour", function (t) {
          var e, n, i, a, o;
          return (
            null != t.gen &&
              ((o = (a = t.gen).time), (i = a.omit), (e = a.merge)),
            (n = {
              id: "" + t.id,
              time:
                o ||
                new Date(
                  _.random(2010, 2014),
                  _.random(11),
                  _.random(31),
                  _.random(23),
                  _.random(59),
                  _.random(59)
                ).getTime(),
            }),
            null != i && (n = _.omit(n, i)),
            null != e && (n = _.merge({}, n, e)),
            n
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-image", function (t) {
          var e;
          return (
            null != t.gen && (e = t.gen.thumb),
            { thumb: null != e ? e : "http://lorempixel.com/800/600/nature" }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-interval", function (e) {
          var n, i, a, o, r, l, s, d, u;
          return (
            null != e.gen &&
              ((s = (l = e.gen).slices),
              (o = l.min),
              (a = l.max),
              (n = l.interval),
              (d = l.start)),
            (i = _.isString(e.subtype) && e.subtype.indexOf("time") >= 0),
            s || (s = _.random(1, 15)),
            o || (o = 0),
            a || (a = _.random(100, 1e4)),
            i || d || (d = 1),
            n || (n = 1),
            i &&
              ((u = d
                ? new Date(d)
                : new Date(_.random(2010, 2014), _.random(11), 1)),
              (n = n ? t.customInterval(n) : t.randomInterval())),
            (r = window.noise()),
            _.range(s).map(function (e) {
              return {
                x: i ? t.timeize(e, u, n) : d + e * n,
                y: o + Math.floor(r.getVal(e / 4) * (a - o)),
              };
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-labelbox", function (e) {
          var n;
          return (
            null != e.gen && (n = e.gen.label),
            { id: "" + e.id, label: n || t.randomLabel() }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-lines", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p, m, g;
          return (
            null != e.gen &&
              ((a = (p = e.gen).groups),
              (i = p.cols),
              (u = p.min),
              (s = p.max),
              (r = p.interval),
              (m = p.start),
              (n = p.cats),
              (c = p.omit),
              (d = p.merge)),
            (l = "multiline" === e.subtype),
            a || (a = l ? 3 : 1),
            i || (i = _.random(3, 2 * e.layout.width)),
            u || (u = 0),
            s || (s = _.random(100, 1e3)),
            (o = r ? t.customInterval(r) : t.randomInterval()),
            (g = m
              ? new Date(m)
              : new Date(_.random(2010, 2014), _.random(11), 1)),
            _.flatten(
              _.range(a).map(function (e) {
                var a;
                return (
                  (a = window.noise()),
                  _.range(i).map(function (i) {
                    var r;
                    return (
                      (r = {
                        x: t.timeize(i, g, o),
                        y: u + Math.floor(a.getVal(i / 4) * (s - u)),
                        category: n ? n[e] : "group " + t.catget(e),
                      }),
                      null != c && (r = _.omit(r, c)),
                      null != d && (r = _.merge({}, r, d[i][e])),
                      r
                    );
                  })
                );
              })
            )
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-list", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p;
          return (
            null != e.gen &&
              ((c = (d = e.gen).slices),
              (l = d.min),
              (o = d.max),
              (i = d.labels),
              (n = d.description),
              (u = d.series),
              (a = d.link),
              (p = d.thumb),
              (s = d.omit),
              (r = d.merge)),
            c || (c = _.random(3, 8)),
            l || (l = 0),
            o || (o = _.random(100, 1e4)),
            u || (u = 15),
            _.range(c).map(function (e) {
              var d;
              return (
                (d = {
                  id: "" + e,
                  label: i ? i[e] : t.randomLabel(),
                  description: null != n ? n : "Some optional description",
                  value: _.random(l, o),
                  series: _.range(u).map(function () {
                    return _.random(100);
                  }),
                  link: null != a ? a : "http://www.tadaboard.com",
                  thumb:
                    null != p
                      ? p
                      : "http://lorempixel.com/50/50/food?" + (e % 11),
                }),
                null != s && (d = _.omit(d, s)),
                null != r && (d = _.merge({}, d, r[e])),
                d
              );
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-map-choropleth", function (t) {
          var e, n, i, a, o;
          return (
            null != t.gen &&
              ((o = (a = t.gen).slices), (i = a.min), (n = a.max), (e = a.ids)),
            o || (o = 20),
            i || (i = 0),
            n || (n = _.random(100, 1e4)),
            {
              features: _.range(o).map(function (t) {
                return { id: e ? e[t] : t + 1, category: _.random(i, n) };
              }),
            }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-map", function (t) {
          var e, n, i, a, o, r, l;
          return (
            null != t.gen &&
              ((l = (r = t.gen).slices),
              (a = r.min),
              (i = r.max),
              (o = r.radius),
              (e = r.lats),
              (n = r.lngs)),
            l || (l = 20),
            a || (a = 0),
            i || (i = _.random(100, 1e4)),
            o || (o = 250),
            e || (e = [36, 47]),
            n || (n = [7, 18]),
            {
              symbols: _.range(l).map(function (t) {
                return {
                  lat: _.random(e[0], e[1], !0),
                  lon: _.random(n[0], n[1], !0),
                  id: t + 1,
                  radius: _.random(o),
                  category: _.random(a, i),
                };
              }),
            }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-map-raster", function (t) {
          var e, n, i, a, o, r, l;
          return (
            (l = function (t) {
              var e, n, i, a, o, r;
              return (
                (o = (i = t[0])[0]),
                (r = i[1]),
                (n = (a = t[1])[0]),
                (e = a[1]),
                { lat: _.random(o, n), lng: _.random(r, e) }
              );
            }),
            null != t.gen && (a = t.gen.markers),
            (e =
              null != t.bounds
                ? t.bounds
                : [
                    [-90, -180],
                    [90, 180],
                  ]),
            (o = [l(e), l(e)]),
            (n = _.sortBy(_.pluck(o, "lat"))),
            (i = _.sortBy(_.pluck(o, "lng"))),
            (r = [
              [n[0], i[0]],
              [n[1], i[1]],
            ]),
            a || (a = _.random(3, 10)),
            _.range(a).map(function (t) {
              return l(r);
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-pie", function (e) {
          var n, i, a, o, r;
          return (
            null != e.gen &&
              ((r = (o = e.gen).slices),
              (a = o.min),
              (i = o.max),
              (n = o.cats)),
            r || (r = _.random(2, 5)),
            a || (a = 0),
            i || (i = _.random(100, 1e4)),
            _.range(r).map(function (e) {
              return {
                value: _.random(a, i),
                radius: _.random(200, 300),
                category: n ? n[e] : t.randomCat(),
                id: e,
              };
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-progress", function (t) {
          var e, n, i, a, o, r, l;
          return (
            null != t.gen &&
              ((l = t.gen).slices,
              (a = l.min),
              (n = l.max),
              (e = l.description),
              (r = l.omit),
              (i = l.merge)),
            a || (a = 0),
            n || (n = _.random(100, 1e4)),
            (o = {
              id: "" + t.id,
              value: _.random(1, !0),
              description: null != e ? e : "Some optional description",
            }),
            null != r && (o = _.omit(o, r)),
            null != i && (o = _.merge({}, o, i)),
            o
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-scatter", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p, m, g, f;
          return (
            null != e.gen &&
              ((m = (p = e.gen).slices),
              (u = p.min),
              (l = p.max),
              (d = p.minR),
              (r = p.maxR),
              (n = p.cats),
              (a = p.interval),
              (g = p.start),
              (c = p.omit),
              (s = p.merge)),
            (o = "basic-time" === e.subtype),
            m || (m = _.random(20, 50)),
            u || (u = 0),
            l || (l = _.random(100, 1e4)),
            d || (d = 1),
            r || (r = 1),
            (i = a ? t.customInterval(a) : t.randomInterval()),
            (f = g
              ? new Date(g)
              : new Date(_.random(2010, 2014), _.random(11), 1)),
            _.range(m).map(function (e) {
              var a;
              return (
                (a = {
                  x: o ? t.timeize(e, f, i) : _.random(u, l),
                  y: _.random(u, l),
                  radius: _.random(d, r),
                  category: n ? n[e] : t.randomCat(),
                  id: e,
                }),
                null != c && (a = _.omit(a, c)),
                null != s && (a = _.merge({}, a, s[e])),
                a
              );
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      "DataBuilderProvider",
      function (t, e) {
        var n;
        return (
          function (t) {
            return _.random(0, t || 1e3);
          },
          (n = function () {
            return e.iceCream(_.random(400));
          }),
          t.set("td-select-menu", function (t, e) {
            var i, a;
            return (
              (a = _.random(3, 8)),
              _.random(100, 1e4),
              (i = []),
              _.range(a).map(function (t) {
                var e;
                return (e = n()), i.push({ id: t, label: e });
              }),
              i
            );
          })
        );
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-separator", function (e) {
          return { title: t.randomTitle() };
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-slider", function (e) {
          var n, i, a, o, r, l, s;
          return (
            null != e.gen &&
              ((o = (r = e.gen).min),
              (a = r.max),
              (n = r.interval),
              (l = r.start)),
            (i = _.isString(e.subtype) && e.subtype.indexOf("time") >= 0),
            o || (o = 0),
            a || (a = _.random(1e3)),
            i || l || (l = 1),
            n || (n = 1),
            i &&
              ((s = l
                ? new Date(l)
                : new Date(_.random(2010, 2014), _.random(11), 1)),
              (n = n ? t.customInterval(n) : t.randomInterval())),
            { value: i ? t.timeize(0, s, n) : _.random(o, a) }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-switch", function (e) {
          var n, i, a, o, r;
          return (
            null != e.gen &&
              ((n = (r = e.gen).label), (o = r.omit), (i = r.merge)),
            (a = { id: "" + e.id, label: n || t.randomLabel() }),
            null != o && (a = _.omit(a, o)),
            null != i && (a = _.merge({}, a, i)),
            a
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-tab", function (e) {
          var n, i, a;
          return (
            null != e.gen && ((a = (i = e.gen).slices), (n = i.labels)),
            a || (a = _.random(3, 6)),
            {
              tabs: _.range(a).map(function (e) {
                return { id: "" + e, label: null != n ? n[e] : t.randomCat() };
              }),
            }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-table", function (e) {
          var n, i, a;
          return (
            null != e.gen && ((a = (i = e.gen).rows), (n = i.cols)),
            a || (a = _.random(3, 6)),
            n || (n = _.random(2, 4)),
            _.range(a).map(function (e) {
              return {
                id: "" + e,
                values: _.range(n).map(function () {
                  return { value: t.randomLabel() };
                }),
              };
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-tags", function (e) {
          var n, i, a, o, r, l, s;
          return (
            null != e.gen &&
              ((s = (l = e.gen).slices),
              (o = l.min),
              (i = l.max),
              (n = l.labels),
              (r = l.omit),
              (a = l.merge)),
            s || (s = _.random(e.layout.height || 3, 3 * e.layout.height || 8)),
            o || (o = 0),
            i || (i = _.random(100, 1e4)),
            _.range(s).map(function (e) {
              var l;
              return (
                (l = {
                  id: "" + e,
                  label: n ? n[e] : t.randomLabel(),
                  value: _.random(o, i),
                }),
                null != r && (l = _.omit(l, r)),
                null != a && (l = _.merge({}, l, a[e])),
                l
              );
            })
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-text", function (t) {
          var e;
          return {
            text:
              null != (e = _.get(t, "config.text")) && "" !== e
                ? e
                : "You can put your text here",
          };
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-text-select", function (e) {
          var n, i, a, o, r, l, s, d;
          return (
            null != e.gen &&
              ((s = (r = e.gen).slices),
              (n = r.labels),
              (a = r.omit),
              (i = r.merge),
              (o = r.options)),
            s || (s = _.random(3, 8)),
            o || (o = _.random(2, 5)),
            (d = ""),
            (l = []),
            _.range(s).map(function (e) {
              var r;
              return (
                _.sample([!0, !1])
                  ? ((r = {
                      key: String(e),
                      disabled: _.sample([!0, !1]),
                      default: t.randomLabel(),
                      options: _.range(o).map(function (i) {
                        return { id: i, label: n ? n[e] : t.randomLabel() };
                      }),
                    }),
                    null != a && (r = _.omit(r, a)),
                    null != i && (r = _.merge({}, r, i[e])),
                    l.push(r),
                    (d += "{" + r.key + "}"))
                  : (d += t.randomLabel()),
                (d += " ")
              );
            }),
            { template: d.trim(), selectors: l }
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      "DataBuilderProvider",
      function (t, e) {
        return (
          function (t) {
            return _.random(0, t || 1e3);
          },
          t.set("td-time-select", function (t, e) {})
        );
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-trigger", function (e) {
          var n, i, a, o, r, l, s, d, u, c, p, m;
          return (
            null != e.gen &&
              ((m = (r = e.gen).url),
              (n = r.label),
              r.action,
              (o = r.omit),
              (i = r.merge)),
            (a = {
              id: "" + e.id,
              url: null != m ? m : "http://www.tadaboard.com",
              label: n || t.randomLabel(),
              action: _.sample(["Run", "Update", "Refresh"]),
              feedback: {
                pending:
                  (null != (l = e.config) && null != (s = l.feedback)
                    ? s.pending
                    : void 0) || "Pending",
                success:
                  (null != (d = e.config) && null != (u = d.feedback)
                    ? u.success
                    : void 0) || "Success",
                error:
                  (null != (c = e.config) && null != (p = c.feedback)
                    ? p.error
                    : void 0) || "Error",
              },
            }),
            null != o && (a = _.omit(a, o)),
            null != i && (a = _.merge({}, a, i)),
            a
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "DataGeneratorProxyProvider",
      function (t) {
        return t.set("td-valuebox", function (e) {
          var n, i, a, o, r, l, s, d, u;
          return (
            (i = _.get(e, "config.multipleData")),
            null != e.gen &&
              ((u = (s = e.gen).slices),
              (r = s.min),
              (a = s.max),
              (d = s.series),
              (l = s.omit),
              (o = s.merge)),
            u || (u = i ? _.random(3, 8) : 1),
            r || (r = 0),
            a || (a = _.random(100, 1e4)),
            d || (d = 15),
            (n = _.range(u).map(function (n) {
              var s;
              return (
                (s = {
                  id: i ? "" + (n + 1) : "" + e.id,
                  title: i ? t.randomTitle() : e.title,
                  value: _.random(r, a),
                  series: _.range(d).map(function () {
                    return _.random(100);
                  }),
                  variation: _.random(-1, 1, !0),
                }),
                null != l && (s = _.omit(s, l)),
                null != o && (s = _.merge({}, s, i ? o[n] : o)),
                s
              );
            })),
            i ? n : n[0]
          );
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-areas",
          size: {
            minWidth: 8,
            minHeight: 5,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "enum",
              id: "line-interpolation",
              default: "linear",
              required: !0,
              path: "custom.interpolate",
              options: [
                { label: "Linear", value: "linear" },
                { label: "Step Before", value: "step-before" },
                { label: "Step After", value: "step-after" },
                { label: "Basis", value: "basis" },
                { label: "Monotone", value: "monotone" },
              ],
            },
            {
              type: "boolean",
              id: "legend-show",
              default: !1,
              required: !0,
              path: "legends.color.visible",
            },
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{y}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-bars-column",
          size: {
            minWidth: 8,
            minHeight: 4,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-bars-horizontal",
          size: {
            minWidth: 4,
            minHeight: 4,
            maxWidth: 16,
            maxHeight: 16,
            defaultWidth: 6,
            defaultHeight: 10,
          },
          properties: [
            {
              type: "boolean",
              id: "legend-show",
              default: !1,
              required: !0,
              path: "legends.color.visible",
            },
            {
              type: "string",
              id: "custom-thresholds",
              default: null,
              required: !0,
              path: "custom.thresholds",
            },
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{y}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-bars-ranking",
          size: {
            minWidth: 8,
            minHeight: 8,
            maxWidth: 12,
            maxHeight: 32,
            defaultWidth: 8,
            defaultHeight: 8,
          },
          properties: [
            {
              type: "boolean",
              id: "selection-enable",
              default: !1,
              required: !0,
              path: "selectionEnabled",
            },
            {
              type: "boolean",
              id: "selection-multiple",
              default: !1,
              required: !0,
              path: "selectionMultiple",
            },
            {
              type: "boolean",
              id: "sorting-show",
              default: !0,
              required: !0,
              path: "sortEnabled",
            },
            {
              type: "enum",
              id: "sorting-default",
              default: "-value",
              required: !0,
              path: "sorting",
              options: [
                { label: "Descending", value: "-value" },
                { label: "Ascending", value: "value" },
                { label: "Alphabetical (asc)", value: "label" },
                { label: "Alphabetical (desc)", value: "-label" },
              ],
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-bars",
          size: {
            minWidth: 8,
            minHeight: 5,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "boolean",
              id: "legend-show",
              default: !1,
              required: !0,
              path: "legends.color.visible",
            },
            {
              type: "string",
              id: "custom-thresholds",
              default: null,
              required: !0,
              path: "custom.thresholds",
            },
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{y}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-bullet",
          size: {
            minWidth: 8,
            minHeight: 3,
            maxWidth: 14,
            maxHeight: 6,
            defaultWidth: 8,
            defaultHeight: 4,
          },
          properties: [
            {
              type: "boolean",
              id: "show-title",
              default: !1,
              required: !1,
              path: "showTitle",
            },
            {
              type: "string",
              id: "custom-ranges",
              default: "100, 200, 300",
              required: !1,
              path: "custom.ranges",
            },
            {
              type: "string",
              id: "custom-target",
              default: "150",
              required: !1,
              path: "custom.target",
            },
            {
              type: "string",
              id: "custom-projected",
              default: "",
              required: !1,
              path: "custom.projected",
            },
            {
              type: "string",
              id: "description",
              default: "",
              required: !1,
              path: "description",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-date",
          size: {
            minWidth: 4,
            minHeight: 5,
            maxWidth: 6,
            maxHeight: 6,
            defaultWidth: 5,
            defaultHeight: 5,
          },
          properties: [],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-funnel",
          size: {
            minWidth: 8,
            minHeight: 8,
            maxWidth: 16,
            maxHeight: 16,
            defaultWidth: 10,
            defaultHeight: 10,
          },
          properties: [
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "selectionEnabled",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        var e;
        return (
          (e = {
            "tooltip.textFormat": "{radius}",
            "tooltip.visible": !0,
            "custom.showNodes": !0,
            "custom.showEdges": !0,
            "custom.showLabels": !1,
            "custom.collide": !1,
            "custom.draggable": !0,
          }),
          t.set({ type: "td-graph", properties: t.toSchema(e) })
        );
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-hour",
          size: {
            minWidth: 4,
            minHeight: 6,
            maxWidth: 6,
            maxHeight: 6,
            defaultWidth: 5,
            defaultHeight: 6,
          },
          properties: [],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-image",
          size: {
            minWidth: 3,
            minHeight: 3,
            maxWidth: 32,
            maxHeight: 24,
            defaultWidth: 4,
            defaultHeight: 4,
          },
          properties: [],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({ type: "td-input", properties: [] });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-interval",
          size: {
            minWidth: 6,
            minHeight: 3,
            maxWidth: 32,
            maxHeight: 4,
            defaultWidth: 8,
            defaultHeight: 4,
          },
          properties: [
            {
              type: "string",
              id: "precision",
              default: "0",
              required: !0,
              path: "precision",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-labelbox",
          size: {
            minWidth: 4,
            minHeight: 2,
            maxWidth: 8,
            maxHeight: 8,
            defaultWidth: 4,
            defaultHeight: 4,
          },
          properties: [
            {
              type: "string",
              id: "description",
              default: "",
              required: !1,
              path: "description",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        var e;
        return (
          (e = { text: "" }),
          t.set({ type: "td-legend", properties: t.toSchema(e) })
        );
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-lines",
          size: {
            minWidth: 8,
            minHeight: 5,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "enum",
              id: "line-interpolation",
              default: "linear",
              required: !0,
              path: "custom.interpolate",
              options: [
                { label: "Linear", value: "linear" },
                { label: "Step Before", value: "step-before" },
                { label: "Step After", value: "step-after" },
                { label: "Basis", value: "basis" },
                { label: "Monotone", value: "monotone" },
              ],
            },
            {
              type: "boolean",
              id: "legend-show",
              default: !1,
              required: !0,
              path: "legends.color.visible",
            },
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{y}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-normalized",
              default: !0,
              required: !0,
              path: "custom.normalized",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-list",
          size: {
            minWidth: 8,
            minHeight: 8,
            maxWidth: 16,
            maxHeight: 32,
            defaultWidth: 8,
            defaultHeight: 8,
          },
          properties: [
            {
              type: "boolean",
              id: "selection-enable",
              default: !1,
              required: !0,
              path: "selectionEnabled",
            },
            {
              type: "boolean",
              id: "selection-multiple",
              default: !1,
              required: !0,
              path: "selectionMultiple",
            },
            {
              type: "boolean",
              id: "bars-show",
              default: !1,
              required: !0,
              path: "barsVisible",
            },
            {
              type: "boolean",
              id: "sorting-show",
              default: !0,
              required: !0,
              path: "sortEnabled",
            },
            {
              type: "enum",
              id: "sorting-default",
              default: "-value",
              required: !0,
              path: "sorting",
              options: [
                { label: "Descending", value: "-value" },
                { label: "Ascending", value: "value" },
                { label: "Alphabetical (asc)", value: "label" },
                { label: "Alphabetical (desc)", value: "-label" },
              ],
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-map-choropleth",
          size: {
            minWidth: 10,
            minHeight: 6,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{category}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-map-raster",
          size: {
            minWidth: 10,
            minHeight: 6,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "string",
              id: "access-token",
              default: "",
              required: !0,
              path: "accessToken",
            },
            {
              type: "string",
              id: "map-id",
              default: "",
              required: !0,
              path: "mapId",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-map",
          size: {
            minWidth: 10,
            minHeight: 6,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{category}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-pie",
          size: {
            minWidth: 6,
            minHeight: 6,
            maxWidth: 8,
            maxHeight: 8,
            defaultWidth: 6,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "boolean",
              id: "legend-show",
              default: !1,
              required: !0,
              path: "legends.color.visible",
            },
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{value}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
            {
              type: "boolean",
              id: "custom-selectable",
              default: !0,
              required: !0,
              path: "custom.selectable",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-progress",
          size: {
            minWidth: 6,
            minHeight: 6,
            maxWidth: 8,
            maxHeight: 8,
            defaultWidth: 6,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "string",
              id: "description",
              default: "",
              required: !1,
              path: "description",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-scatter",
          size: {
            minWidth: 8,
            minHeight: 5,
            maxWidth: 32,
            maxHeight: 10,
            defaultWidth: 10,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "string",
              id: "axes-x-tick-format",
              default: void 0,
              required: !0,
              path: "axes.x.tickFormat",
            },
            {
              type: "string",
              id: "axes-y-tick-format",
              default: void 0,
              required: !0,
              path: "axes.y.tickFormat",
            },
            {
              type: "string",
              id: "tooltip-text-format",
              default: "{category}",
              required: !0,
              path: "tooltip.textFormat",
            },
            {
              type: "boolean",
              id: "tooltip-visible",
              default: !0,
              required: !0,
              path: "tooltip.visible",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-select-menu",
          size: {
            minWidth: 4,
            minHeight: 3,
            maxWidth: 8,
            maxHeight: 5,
            defaultWidth: 6,
            defaultHeight: 4,
          },
          properties: [],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-separator",
          size: {
            minWidth: 4,
            minHeight: 2,
            maxWidth: 32,
            maxHeight: 2,
            defaultWidth: 8,
            defaultHeight: 2,
          },
          properties: [],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-slider",
          size: {
            minWidth: 6,
            minHeight: 3,
            maxWidth: 32,
            maxHeight: 4,
            defaultWidth: 8,
            defaultHeight: 4,
          },
          properties: [
            {
              type: "string",
              id: "precision",
              default: "0",
              required: !0,
              path: "precision",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-switch",
          size: {
            minWidth: 6,
            minHeight: 3,
            maxWidth: 16,
            maxHeight: 4,
            defaultWidth: 8,
            defaultHeight: 4,
          },
          properties: [],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-tab",
          size: {
            minWidth: 8,
            minHeight: 1,
            maxWidth: 32,
            maxHeight: 4,
            defaultWidth: 16,
            defaultHeight: 2,
          },
          properties: [
            {
              type: "string",
              id: "labels",
              default: "",
              required: !1,
              path: "labels",
            },
            {
              type: "string",
              id: "ids",
              default: "",
              required: !1,
              path: "ids",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-tags",
          size: {
            minWidth: 6,
            minHeight: 5,
            maxWidth: 16,
            maxHeight: 32,
            defaultWidth: 8,
            defaultHeight: 6,
          },
          properties: [
            {
              type: "boolean",
              id: "show-values",
              default: !1,
              required: !1,
              path: "showValues",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({ type: "td-text-select", properties: [] });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-text",
          size: {
            minWidth: 8,
            minHeight: 4,
            maxWidth: 32,
            maxHeight: 8,
            defaultWidth: 8,
            defaultHeight: 4,
          },
          properties: [
            {
              type: "string",
              id: "text",
              default: null,
              required: !1,
              path: "text",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-time-range-select",
          size: {
            minWidth: 8,
            minHeight: 2,
            maxWidth: 30,
            maxHeight: 8,
            defaultWidth: 8,
            defaultHeight: 3,
          },
          properties: [
            {
              type: "enum",
              id: "default-range",
              default: "unset",
              required: !0,
              path: "defaultRange",
              options: [
                { label: "Unset", value: "unset" },
                { label: "Year to Date", value: "year-to-date" },
                { label: "Month to Date", value: "month-to-date" },
                { label: "Week to Date", value: "week-to-date" },
                { label: "Last Year", value: "last-year" },
                { label: "Last Month", value: "last-month" },
                { label: "Last Week", value: "last-week" },
                { label: "Custom", value: "custom" },
              ],
            },
            {
              type: "string",
              id: "custom-range",
              required: !1,
              path: "customRange",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-time-select",
          size: {
            minWidth: 4,
            minHeight: 4,
            maxWidth: 4,
            maxHeight: 4,
            defaultWidth: 4,
            defaultHeight: 4,
          },
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-trigger",
          size: {
            minWidth: 6,
            minHeight: 3,
            maxWidth: 16,
            maxHeight: 4,
            defaultWidth: 8,
            defaultHeight: 4,
          },
          properties: [
            {
              type: "string",
              id: "feedback-success",
              default: "Success",
              required: !1,
              path: "feedback.success",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").config([
      "schemaProvider",
      function (t) {
        return t.set({
          type: "td-valuebox",
          size: {
            minWidth: 4,
            minHeight: 4,
            maxWidth: 8,
            maxHeight: 8,
            defaultWidth: 5,
            defaultHeight: 5,
          },
          properties: [
            {
              type: "string",
              id: "description",
              default: "",
              required: !1,
              path: "description",
            },
            {
              type: "boolean",
              id: "multiple-data",
              default: !1,
              required: !0,
              path: "multipleData",
            },
          ],
        });
      },
    ]);
  }.call(this),
  function () {
    var t;
    (t = null),
      (window.Tadaboard = {
        create: function (e, n) {
          var i, a;
          $(e).attr("ng-controller", "MainController"),
            angular.module("tadapp").value("GLOBAL_PARAMS", n);
          try {
            t = angular.bootstrap(document, ["tadapp"]);
          } catch (a) {
            (i = a), console.error(i.stack || i.message || i);
          }
        },
        widgetSchema: function (e) {
          t.get("schema").get(e);
        },
        changeTheme: function (e) {
          var n, i, a, o, r, l;
          if (null !== (o = t.get("theme").get(e))) {
            for (
              n = $("body"),
                i = 0,
                a = (l = _.filter(n[0].className.split(/\s+/), function (t) {
                  return t.indexOf("theme-") >= 0;
                })).length;
              i < a;
              i++
            )
              (r = l[i]), n.removeClass(r);
            n.addClass(o.class),
              t.get("Dashboard").feed([{ id: "*", theme: o }]);
          }
        },
      });
  }.call(this),
  function () {
    angular.module("tadapp").factory("DataProvider", [
      "$log",
      function (t) {
        return {
          setup: function () {
            var t;
            return (
              (t = {}),
              {},
              {
                subscribe: function (e, n, i) {
                  return t[e] || (t[e] = {}), (t[e][n] = { id: e, handler: i });
                },
                unsubscribe: function (e, n) {
                  return n ? delete t[e][n] : delete t[e];
                },
                feed: function (e) {
                  return _.forEach(e, function (e) {
                    "*" === e.id
                      ? _.forIn(e, function (e, n) {
                          return _.forIn(t, function (t, i) {
                            if (t && t[n]) return t[n].handler(e);
                          });
                        })
                      : _.forIn(e, function (n, i) {
                          var a;
                          if ((a = t[e.id]) && a[i]) return a[i].handler(n);
                        });
                  });
                },
              }
            );
          },
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").value("GLOBAL_PARAMS", {});
  }.call(this),
  function () {
    angular.module("tadapp").controller("MainController", [
      "$scope",
      "Dashboard",
      "GLOBAL_PARAMS",
      "$log",
      function (t, e, n, i) {
        return e.willInitialize()
          ? e
              .config({
                dashboardId: n.dashboardId,
                requestMethod: n._requestMethod || "POST",
                configUrl: n._configUrl,
                dataUrl: n._dataUrl,
                useDataGen: n._useDataGen || !1,
                useExternalFeed: n._useExternalFeed || !1,
              })
              .run(t)
          : console.log("Cannot launch.");
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").factory("SystemNotifier", [
      "$log",
      "$rootScope",
      function (t, e) {
        return {
          setup: function (t) {
            var n, i;
            return (
              (i = e.dataProvider),
              (n = {
                on: function (e, a) {
                  return i.subscribe(t, e, a), n;
                },
                status: function (t) {
                  return e.$on("status.change", t), n;
                },
              })
            );
          },
        };
      },
    ]);
  }.call(this),
  function () {
    angular
      .module("tadapp")
      .directive("tdbarsextenthorizontal", [
        "$rootScope",
        "$log",
        "$filter",
        "$interpolate",
        "Dashboard",
        function (t, e, n, i, a) {
          return {
            scope: {
              componentId: "@",
              componentSubtype: "@",
              title: "@",
              tipText: "@",
              query: "@",
            },
            link: function (t, e, n) {
              var o, r, l, s, d, u, c, p;
              return (
                $(e).parent().data(),
                (s = null),
                function (t) {
                  if (t.ngTooltipVisible)
                    return (s =
                      null != t.ngTooltipTextFormat
                        ? i(t.ngTooltipTextFormat)
                        : i("{{$y}}"));
                },
                (l = {
                  scales: { color: { field: "d.category" } },
                  scales: {
                    x: { range: [0, "height"] },
                    y: { domain: ["min", "max"], range: [0, "width"] },
                  },
                  axes: {
                    x: { position: "left", tickPadding: 50 },
                    y: { position: "bottom", tickPadding: 100 },
                  },
                  tooltip: { visible: !1, template: "{{y}}" },
                  legends: { color: { visible: !1 } },
                  custom: { horizontal: !0, selectable: !1 },
                }),
                { padding: { top: 0, right: 0, bottom: 20, left: 20 } },
                { padding: { bottom: 0 } },
                { padding: { left: 0 } },
                (c = {
                  padding: { top: 15, right: 10, bottom: 15, left: 0.3 },
                }),
                { padding: { left: 20 } },
                (u = { padding: { bottom: 40 } }),
                (d = null),
                (r = da.barsExtent(
                  $(e[0]).find(".td-block-content")[0]
                )).options(_.merge(l, c)),
                function (t) {
                  return t;
                },
                a
                  .subscribe(t.componentId, "query", function (t) {
                    return (d = t);
                  })
                  .subscribe(t.componentId, "data", function (t) {
                    return r.data(t), o();
                  })
                  .subscribe(t.componentId, "config", function (e) {
                    var n, i;
                    return (
                      (i = r.options()),
                      (i = e.legends.color.visible
                        ? _.merge(i, u)
                        : _.merge(i, c)),
                      (n = _.merge(i, e, e, function (t, e) {
                        if (_.isArray(t)) return e;
                      })),
                      _.has(n, "$title") &&
                        ((t.title = n.$title), delete n.$title),
                      _.has(n, "$key") && ((t.key = n.$key), delete n.$key),
                      r.options(n),
                      (t.config = n),
                      o()
                    );
                  })
                  .subscribe(t.componentId, "theme", function (t) {
                    return (
                      r.options({ scales: { color: { range: t.range } } }), o()
                    );
                  })
                  .on("status.change", function (e, n, i, r) {
                    if (
                      null != d &&
                      (p(),
                      r !== t.componentId ||
                        (r === t.componentId && null === a.status(d)))
                    )
                      return o();
                  }),
                r
                  .on("click", function (e) {
                    var n;
                    return (
                      (n =
                        null == e
                          ? null
                          : null != e.id
                          ? e.id.toString()
                          : null != e.$color
                          ? e.$color.toString()
                          : void 0),
                      d
                        ? t.$apply(function () {
                            return a.status(d, n, t.componentId);
                          })
                        : r.select(null)
                    );
                  })
                  .on("over", function (e) {
                    if (s)
                      return t.$apply(function () {
                        return (t.tooltipText = null === e ? null : s(e));
                      });
                  }),
                (p = function () {
                  if (d) return (t.selected = a.status(d));
                }),
                (o = function () {
                  if (null != d) return r.select(a.status(d));
                }),
                (t.resetSelection = function () {
                  if (d) return a.status(d, null, t.componentId);
                })
              );
            },
            template: JST["tadaboard/templates/td-block"],
          };
        },
      ])
      .config([
        "schemaProvider",
        function (t) {
          return t.set({
            type: "td-bars-extent-horizontal",
            size: {
              minWidth: 4,
              minHeight: 4,
              maxWidth: 16,
              maxHeight: 16,
              defaultWidth: 6,
              defaultHeight: 10,
            },
            properties: [
              {
                type: "boolean",
                id: "legend-show",
                default: !1,
                required: !0,
                path: "legends.color.visible",
              },
              {
                type: "string",
                id: "tooltip-text-format",
                default: "{y}",
                required: !0,
                path: "tooltip.textFormat",
              },
              {
                type: "boolean",
                id: "tooltip-visible",
                default: !0,
                required: !0,
                path: "tooltip.visible",
              },
            ],
          });
        },
      ])
      .config([
        "DataGeneratorProxyProvider",
        function (t) {
          var e, n;
          return (
            (e = function (t) {
              var e;
              return (e = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890")[t % e.length];
            }),
            (n = function (t) {
              return _.random(-t || 0, t || 1e3);
            }),
            t.set("td-bars-extent-horizontal", function (t, i) {
              var a, o, r, l, s;
              return (
                (r =
                  "grouped" === t.subtype || "stacked" === t.subtype
                    ? "stacked" === t.subtype
                      ? 3
                      : 2
                    : 1),
                (o = _.random(
                  Math.floor(t.layout.height / 2),
                  Math.floor(t.layout.height / 1.4)
                )),
                (s = _.random(100, 1e4)),
                (a = []),
                (l = 0),
                _.range(r).map(function (t) {
                  return _.range(o).map(function (t) {
                    var i;
                    return (
                      (i = n(s)),
                      a.push({
                        x: e(t),
                        y: i,
                        y0: i - Math.abs(n(s)),
                        y1: i + Math.abs(n(s)),
                        id: l++,
                      })
                    );
                  });
                }),
                a
              );
            })
          );
        },
      ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tadaboard", [
      "$rootScope",
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n, i) {
        return {
          restrict: "A",
          scope: { config: "=tdConfig", status: "=tdStatus" },
          template: JST["tadaboard/templates/tadaboard"],
          link: function (t, e, n) {
            var a;
            return (
              (t.initialized = !1),
              (a = null),
              t.$watch(
                "config",
                function () {
                  if (null != t.config && !t.initialized)
                    return (
                      (t.initialized = !0),
                      i.willInitialize()
                        ? (a = i.config({
                            dashboardId: t.config.info.id,
                            requestMethod: t.config.source.method,
                            dataUrl: t.config.source.url,
                            configObject: t.config,
                            useDataGen: t.config.source.randomData,
                            useExternalFeed: t.config.source.externalFeed,
                            disableRouting: t.config.info.disableRouting,
                          })).run(t)
                        : console.log("Cannot launch dashboard.")
                    );
                },
                !0
              ),
              t.$on("reload:dashboard", function () {
                return a
                  .config({
                    dashboardId: t.config.info.id,
                    requestMethod: t.config.source.method,
                    dataUrl: t.config.source.url,
                    configObject: t.config,
                    useDataGen: t.config.source.randomData,
                    useExternalFeed: t.config.source.externalFeed,
                    disableRouting: t.config.info.disableRouting,
                  })
                  .reload();
              })
            );
          },
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").factory("timeutils", function () {
      return {
        unixts2date: function (t) {
          return new Date(1e3 * t);
        },
        date2unixts: function (t) {
          return ~~(t.getTime() / 1e3);
        },
      };
    });
  }.call(this),
  function () {
    angular.module("tadapp").filter("numeral", function () {
      return function (t, e) {
        return null === t || null === e
          ? t
          : "" === e
          ? ""
          : numeral(t).format(e);
      };
    });
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdWidgetFocus", [
      "$rootScope",
      "$log",
      function (t, e) {
        return {
          link: function (e, n, i) {
            var a, o;
            return (
              (a = function (e) {
                return t.$apply(function () {
                  return (t.widgetFocus = null);
                });
              }),
              t.widgetFocusId ||
                ((t.widgetFocusId = 0), $("html").bind("click", a)),
              e.$on("$destroy", function () {
                return $("html").unbind("click", a);
              }),
              (o = t.widgetFocusId += 1),
              $(n).click(function (e) {
                return (
                  e.preventDefault(),
                  e.stopPropagation(),
                  t.$apply(function () {
                    return (t.widgetFocus = o);
                  })
                );
              }),
              $(n)
                .parent()
                .on("click", function (t) {
                  return t.preventDefault(), t.stopPropagation();
                }),
              t.$watch("widgetFocus", function () {
                return $(n).toggleClass("td-active", t.widgetFocus === o);
              })
            );
          },
          template: JST["tadaboard/templates/td-widget-focus"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").service("Dashboard", [
      "$state",
      "$timeout",
      "DataProvider",
      "DataSource",
      "DataGenerator",
      "GLOBAL_PARAMS",
      "$log",
      "theme",
      "$window",
      function (t, e, n, i, a, o, r, l, s) {
        var d, u, c, p, m, g, f, h, b, y, v, w;
        return (
          (u = null),
          (h = null),
          (c = null),
          (p = null),
          (b = null),
          (this.willInitialize = function () {
            return !0;
          }),
          (this.config = function (t) {
            return arguments.length ? ((u = t), this) : u;
          }),
          (this.status = function (t, e, n) {
            return arguments.length
              ? (void 0 !== n && (b = n),
                1 === arguments.length
                  ? h.status[t]
                  : (null != h && (h.status[t] = e), this))
              : null;
          }),
          (this.statusUpdate = function (t) {
            return null != h && _.merge(h.status, t), this;
          }),
          (this.feed = function (t) {
            return c.feed(t), this;
          }),
          (this.subscribe = function (t, e, n) {
            return c.subscribe(t, e, n), this;
          }),
          (this.unsubscribe = function (t, e) {
            return c.unsubscribe(t, e), this;
          }),
          (this.notify = function (t, e) {
            if ("new-widget" === t) return d(e);
          }),
          (this.on = function (t, e) {
            return h.$on(t, e), this;
          }),
          (this.reload = function () {
            return (
              p.config({ method: u.requestMethod, dataUrl: u.dataUrl }), f()
            );
          }),
          (this.run = function (t) {
            return (
              ((h = t).global = { app: { inited: !1, loading: !1 } }),
              void 0 === h.status && (h.status = null),
              (c = n.setup()),
              (p = i.create({ method: u.requestMethod, dataUrl: u.dataUrl })),
              h.$watch(
                "status",
                function (t, e) {
                  if (h.global.app.inited)
                    return f(), h.$broadcast("status.change", t, e, b);
                },
                !0
              ),
              null != u.configObject
                ? g(null, u.configObject)
                : i
                    .create({
                      method: u.requestMethod,
                      dashboardId: u.dashboardId,
                      dataUrl: u.configUrl,
                    })
                    .load(null, g)
            );
          }),
          angular.element(s).on(
            "resize",
            _.debounce(function () {
              if (!0 === _.get(u, "configObject.layout.resizable"))
                return h.$broadcast("window.resize");
            }, 300)
          ),
          (y = function () {
            return (
              (h.global.app.loading = !0),
              u.useDataGen
                ? (null != u.configObject
                    ? c.feed(a.generateByItems(u.configObject.item, b).item)
                    : c.feed(a.generate().item),
                  e(function () {
                    h.global.app.loading = !1;
                  }, 1e3))
                : u.useExternalFeed
                ? void 0
                : p.load(
                    h.status,
                    function (t) {
                      return h.$apply(function () {
                        return (
                          null != t.query && _.assign(h.status || {}, t.query),
                          t.item && c.feed(t.item),
                          (h.global.app.loading = !1)
                        );
                      });
                    },
                    function () {
                      return h.$apply(function () {
                        return (h.global.app.loading = !1);
                      });
                    }
                  )
            );
          }),
          (v = function () {
            if (!0 !== u.disableRouting)
              return t.go("state", { query: JSON.stringify(h.status) });
          }),
          (m = _.debounce(function () {
            return h.$apply(function () {
              return y(), v();
            });
          }, 1e3)),
          (f = function () {
            if (h.global.app.inited) return m();
          }),
          (w = function () {
            var t;
            if (
              null != u.configObject &&
              null != (t = l.get(u.configObject.layout.theme))
            )
              return c.feed([{ id: "*", theme: t }]);
          }),
          (d = function (t) {
            var e;
            if (null != t.id)
              return null != (e = _.find(u.configObject.item, { id: t.id }))
                ? _.merge(e, t)
                : u.configObject.item.push(t);
          }),
          (g = function (t, n) {
            return e(function () {
              return h.$apply(function () {
                return t
                  ? r.log("Error initializing Dashboard")
                  : (null == h.status &&
                      null != n.query &&
                      (h.status = n.query),
                    (h.global.app.inited = !0),
                    w(),
                    e(function () {
                      return c.feed(n.item), f();
                    }, 100));
              });
            });
          }),
          this
        );
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").factory("DataGenerator", [
      "DataGeneratorProxy",
      function (t) {
        return {
          generateByItems: function (e, n) {
            var i;
            return (
              (i = _.map(e, function (e) {
                var i;
                return (
                  (i = t.get(e.type)),
                  e.id === n
                    ? { id: e.id }
                    : { id: e.id, tip: e.tipText, data: i ? i(e) : [] }
                );
              })),
              {
                status: !0,
                error: null,
                timestamp: _.now(),
                query: _.zipObject(
                  _.uniq(
                    _.compact(
                      _.map(e, function (t) {
                        return t.query;
                      })
                    )
                  ),
                  _.map(_.range(e.length), function () {
                    return null;
                  })
                ),
                item: i,
              }
            );
          },
          generate: function () {
            return { status: !0, error: null, timestamp: _.now(), item: [] };
          },
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").factory("DataSource", [
      "$log",
      function (t) {
        return {
          create: function (t) {
            var e;
            return (
              (e = null),
              {
                load: function (n, i, a) {
                  var o;
                  return (
                    (o = { id: t.dashboardId, query: n }),
                    n || delete o.query,
                    null != e && e.abort(),
                    (e = jQuery.ajax({
                      url: t.dataUrl,
                      method: t.method || "POST",
                      data: o,
                      dataType: "json",
                      success: i,
                      error: a,
                    }))
                  );
                },
                config: function (e) {
                  return (t = e);
                },
              }
            );
          },
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdsparkbar", [
      "$log",
      "$filter",
      "$timeout",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: { source: "=", config: "=" },
          link: function (t, e, i) {
            return n(function () {
              var n, i;
              return (
                (i = {
                  axes: { x: { visible: !1 }, y: { visible: !1 } },
                  legends: { color: { visible: !1 } },
                  tooltip: { visible: !1 },
                  custom: { rangePadding: 0 },
                }),
                (n = da.bars(e[0]).options(
                  _.merge(i, t.config, function (t, e) {
                    if (_.isArray(t)) return e;
                  })
                )),
                t.$watch("source", function (t, e) {
                  var i;
                  if (null != t)
                    return (
                      (i = _.map(t, function (t, e) {
                        return { x: e, y: t };
                      })),
                      n.data(i)
                    );
                }),
                t.$on("window.resize", function () {
                  return n.resize();
                })
              );
            });
          },
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdsparkline", [
      "$log",
      "$filter",
      "$timeout",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: { source: "=", config: "=" },
          link: function (t, e, i) {
            return n(function () {
              var n, i, a;
              return (
                (n = {
                  padding: { top: 2, right: 2, bottom: 2, left: 2 },
                  axes: { x: { visible: !1 }, y: { visible: !1 } },
                  legends: { color: { visible: !1 } },
                  tooltip: { visible: !1 },
                  custom: { showAreas: !0, showPoints: !1 },
                }),
                (i = da.lines(e[0]).options(
                  _.merge(n, t.config, function (t, e) {
                    if (_.isArray(t)) return e;
                  })
                )),
                t.$watch("source", function (t, e) {
                  var n;
                  if (null != t)
                    return (
                      (n = _.map(t, function (t, e) {
                        return { x: e, y: t };
                      })),
                      i.data(n)
                    );
                }),
                t.$on("window.resize", function () {
                  return i.resize();
                }),
                (a = function () {
                  return i.resize();
                }),
                addResizeListener(e[0], a),
                t.$on("$destroy", function () {
                  return removeResizeListener(e[0], a);
                })
              );
            });
          },
        };
      },
    ]);
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/tadaboard"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div id="dashboard" ng-class="config.layout.themeClass || config.layout.theme">\n  <div ng-cloack="" ng-switch="global.app.inited">\n    <div ng-switch-when="true" class="ng-scope">\n      <div class="container" ng-show="global.app.inited">\n        <div class="loading-data animate-enter ng-hide" ng-show="global.app.loading">\n          <div class="loading-box">Loading data...</div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-repeat="item in config.item">\n    <div class="td-widget" ng-class="{ \'td-query\': item.query }" data-x="{{ item.layout.x }}" data-y="{{ item.layout.y }}" data-width="{{ item.layout.width }}" data-height="{{ item.layout.height }}" ng-switch="item.type">\n      <div tdbars component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-bars" ng-class="{{item.class}}" ng-switch-when="td-bars"></div>\n      <div tdpie  component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-pie" ng-class="{{item.class}}"  ng-switch-when="td-pie"></div>\n      <div tdlines  component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-lines" ng-class="{{item.class}}"  ng-switch-when="td-lines"></div>\n      <div tdareas  component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-areas" ng-class="{{item.class}}" ng-switch-when="td-areas"></div>\n      <div tdlist component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-list" ng-class="{{item.class}}" ng-switch-when="td-list"></div>\n      <div tdfunnel component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-funnel" ng-class="{{item.class}}" ng-switch-when="td-funnel"></div>\n      <div tdimage component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-image" ng-class="{{item.class}}" ng-switch-when="td-image"></div>\n      <div tdtext component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-text" ng-class="{{item.class}}" ng-switch-when="td-text"></div>\n      <div tdprogress component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-progress" ng-class="{{item.class}}" ng-switch-when="td-progress"></div>\n      <div tdvaluebox component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-valuebox" ng-class="{{item.class}}" ng-switch-when="td-valuebox"></div>\n      <div tdlabelbox component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-labelbox" ng-class="{{item.class}}" ng-switch-when="td-labelbox"></div>\n      <div tdbullet component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-bullet" ng-class="{{item.class}}" ng-switch-when="td-bullet"></div>\n      <div tdtimeselect component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-time-selection" ng-class="{{item.class}}" ng-switch-when="td-time-select"></div>\n      <div tdscatter component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-scatter" ng-class="{{item.class}}" ng-switch-when="td-scatter"></div>\n      <div tdselectmenu component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-select-menu" ng-class="{{item.class}}" ng-switch-when="td-select-menu"></div>\n      <div tdmap component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-map" ng-class="{{item.class}}" ng-switch-when="td-map"></div>\n      <div td-map-raster component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-map-raster" ng-class="{{item.class}}" ng-switch-when="td-map-raster"></div>\n      <div tdmapchoropleth component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-map" ng-class="{{item.class}}" ng-switch-when="td-map-choropleth"></div>\n      <div tdinput component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-input" ng-class="{{item.class}}" ng-switch-when="td-input"></div>\n      <div tdbarshorizontal component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-bars" ng-class="{{item.class}}" ng-switch-when="td-bars-horizontal"></div>\n      <div tdtab component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-tab" ng-class="{{item.class}}" ng-switch-when="td-tab"></div>\n      <div tdbarsextenthorizontal component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-bars-extent-horizontal" ng-class="{{item.class}}" ng-switch-when="td-bars-extent-horizontal"></div>\n      <div tdbarsranking component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-bars-ranking" ng-class="{{item.class}}" ng-switch-when="td-bars-ranking"></div>\n      <div tdbarscolumn component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-bars-column" ng-class="{{item.class}}" ng-switch-when="td-bars-column"></div>\n      <div tdseparator component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-separator" ng-class="{{item.class}}" ng-switch-when="td-separator"></div>\n      <div tdtimerangeselect component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-time-range-select" ng-class="{{item.class}}" ng-switch-when="td-time-range-select"></div>\n      <div td-interval component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-interval" ng-class="{{item.class}}" ng-switch-when="td-interval"></div>\n      <div td-switch component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-switch" ng-class="{{item.class}}" ng-switch-when="td-switch"></div>\n      <div td-trigger component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-trigger" ng-class="{{item.class}}" ng-switch-when="td-trigger"></div>\n      <div td-slider component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-slider" ng-class="{{item.class}}" ng-switch-when="td-slider"></div>\n      <div td-date component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-date" ng-class="{{item.class}}" ng-switch-when="td-date"></div>\n      <div td-hour component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-hour" ng-class="{{item.class}}" ng-switch-when="td-hour"></div>\n      <div td-text-select component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-text-select" ng-class="{{item.class}}" ng-switch-when="td-text-select"></div>\n      <div td-tags component-id="{{ item.id }}" component-subtype="{{ item.subtype }}" title="{{ item.title }}" tip-text="{{ item.tipText }}" query="{{ item.query }}" class="td-block td-tags" ng-class="{{item.class}}" ng-switch-when="td-tags"></div>\n    </div>\n  </div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-bars-column"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '\x3c!-- <div class="td-widget-focus" title="Click to activate" td-widget-focus ng-show="focusActive"></div> --\x3e\n<div class="td-widget-selection" ng-show="selected != null">\n  <i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n</div>\n<div class="td-title">{{ title || config.title }}</div>\n<div class="td-bars-container">\n  <div class="td-column" ng-repeat="column in dataColumns track by $index">\n    <div class="td-bar animate-enter" ng-repeat="bar in column track by $index" ng-class="{\'td-selected\': bar.selected}" style="top:{{ bar._start }}px; height:{{ bar._length }}px; background-color:{{ bar._color }};"></div>\n  </div>\n</div>\n<div class="td-axes-container">\n  <svg class="td-axis-y">\n    <g></g>\n  </svg>\n  <div class="td-axis-x">\n    <div class="td-tick" ng-repeat="tick in dataTicks track by $index" ng-class="{\'td-selected\': tick.selected}" ng-click="select(tick)">{{ tick.x }}</div>\n  </div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-bars-ranking"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '\x3c!-- <div class="td-widget-focus" title="Click to activate" td-widget-focus ng-show="focusActive"></div> --\x3e\n<div class="td-widget-selection" ng-show="selected.length > 0">\n  <i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n</div>\n<div class="td-title">{{title || config.title}}</div>\n<div class="td-list-container">\n  <div class="td-item" ng-repeat="item in data | orderBy:config.sorting track by $index" ng-click="select(item)" ng-class="item.selected ? \'td-selected\' : \'\'" ng-switch="componentSubtype">\n    <div class="td-txt">\n      <div class="td-progress-bar" ng-show="config.barsVisible">\n        <div class="td-bar animate-enter" ng-style="{ left: item._left + \'%\', width: item._normalized + \'%\' }"></div>\n      </div>\n      <div ng-show=\'item.label != null\' class="td-label">\n        {{item.label}}\n        <a class="td-external-link" ng-show=\'item.link != null\' href="#" ng-click="clickLink($event, item)" target="_blank">\n        \t<i class="fa fa-external-link"></i>\n        </a>\n      </div>\n    </div>\n    <div class="td-values">\n      <div ng-show=\'item.value != null\' class="td-value"> {{item.value != null ? (item.value | numeral:config.format) : \'\'}} </div>\n    </div>\n  </div>\n</div>\n<div class="td-axes-container">\n  <svg class="td-axis-x"></svg>\n</div>\n<div class="td-filter" ng-class="{\'selected\': selected}" ng-show="config.sortEnabled">\n  <i class="fa" ng-class="{\'td-selected\': [\'label\', \'-label\'].indexOf(config.sorting) > -1, \'fa-sort-alpha-asc\': labelAsc, \'fa-sort-alpha-desc\': !labelAsc}" ng-click="config.sorting = (labelAsc = ([\'label\', \'-label\'].indexOf(config.sorting) > -1) ? !labelAsc : labelAsc) ? \'label\' : \'-label\'" ng-show="config.sortByLabel"></i>\n  <i class="fa" ng-class="{\'td-selected\': [\'value\', \'-value\'].indexOf(config.sorting) > -1, \'fa-sort-numeric-asc\': valueAsc, \'fa-sort-numeric-desc\': !valueAsc}" ng-click="config.sorting = (valueAsc = ([\'value\', \'-value\'].indexOf(config.sorting) > -1) ? !valueAsc : valueAsc) ? \'value\' : \'-value\'" ng-show="config.sortByLabel"></i>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-block"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '\x3c!-- <div class="td-widget-focus" title="Click to activate" td-widget-focus ng-show="focusActive"></div> --\x3e\n<div class="td-widget-selection" ng-show="selected != null">\n  <i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n</div>\n<div class="td-ng-tooltip-container">\n\t<div class="td-ng-tooltip" ng-show="tooltipText != null">{{tooltipText}}</div>\n</div>\n<div class="td-title">\n  {{title || config.title}}\n</div>\n<div class="td-block-content"></div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-bullet"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div ng-click="select()">\n  <div class="td-widget-selection" ng-show="selected != null">\n    <i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n  </div>\n  <div class="td-title" ng-show="config.showTitle">{{title || config.title}}</div>\n  <div class="td-block-content" ng-class="{\'no-title\': !config.showTitle}">\n  \t<div class="td-labels-container">\n  \t\t<div class="td-text">\n  \t\t\t<div ng-show= \'data.label != null\' class="td-label">{{data.label}}</div>\n  \t\t\t<div class="td-description">{{config.description || data.description}}</div>\n  \t\t</div>\n  \t</div>\n  \t<div class="td-bullet-container"></div>\n  </div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-date"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-date-container">\n  <i class="fa fa-calendar td-icon"></i>\n  <div class="td-day">{{ data.time | date:\'d\' }}</div>\n  <div class="td-month">{{ data.time | date:\'MMM\' }}</div>\n  <div class="td-year">{{ data.time | date:\'yyyy\' }}</div>\n  <div class="td-weekday" ng-show="config.showWeekday">{{ data.time | date:\'EEEE\' }}</div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-funnel"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class=\"td-widget-selection\" ng-show=\"selected != null\">\n  <i class=\"td-label fa fa-times\" ng-click=\"resetSelection()\"></i>\n</div>\n<div class=\"td-title\">{{title || config.title}}</div>\n<div class='td-items-container'>\n  <div class='td-item' ng-repeat=\"item in data track by $index\" ng-click=\"select(item)\" ng-class=\"item.selected ? 'td-selected' : ''\">\n    <div class='td-progress-bar'>\n\t\t\t<div class='td-bar animate-enter' style='background-color:{{item._color}}; width:{{item._normalized}}%;'></div>\n\t\t</div>\n    <div class='td-txt'>\n      <div class='td-item-label' ng-show='item.label != null'>{{item.label}}</div>\n      <div class='td-item-description' ng-show='item.description != null'>{{item.description}}</div>\n    </div>\n  </div>\n</div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-hour"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-hour-container">\n  <i class="fa fa-clock-o td-icon"></i>\n  <div class="td-hour">\n    <span>{{ data.time | date:\'H\' }}</span><span ng-class="{ flash: config.runWatch }">:</span><span>{{ data.time | date:\'mm\' }}</span>\n  </div>\n  <div class="td-date" ng-show="config.showDate">{{ data.time | date:\'d MMM yyyy\' }}</div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-image-list"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-widget td-image" ng-repeat="item in data" ng-click="select(item)" ng-class="{\'td-selectable\' : config.selectable, \'td-selected\': (selected==item.id) }" data-height="1" data-width="1" data-x="1" data-y="1">\n\t<div ng-show= \'item.title != null\' class="td-title">{{title || config.title}}</div>\n\t<div class="td-image-container">\n\t  \t<img ng-src="{{item.src}}">\n\t</div>\n\t<div class="td-label"></div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-image"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div ng-click="select(item)">\n  <div ng-show= \'title != null\' class="td-title">{{title || config.title}}</div>\n  <div class="td-image-container" ng-show="!data.link">\n    <img ng-src="{{data.thumb}}">\n  </div>\n  <div class="td-image-container" ng-show="data.link">\n    <a ng-href="{{data.link}}" target="_blank">\n      <img ng-src="{{data.thumb}}">\n    </a>\n  </div>\n  <div class="td-label"></div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-input"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-input-container">\n  <input type="text" ng-model="text" placeholder="Insert query.." />\n</div>\n<div class="td-input-go" ng-click="updateText()">GO</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-interval"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class='td-title'>{{ title || config.title }}</div>\n<div ng-if=\"componentSubtype.indexOf('areas') >= 0\" class=\"td-sparkline td-sparkarea\" tdsparkline source=\"data\" config=\"config.spark\"></div>\n<div ng-if=\"componentSubtype.indexOf('bars') >= 0\" class=\"td-sparkbar\" tdsparkbar source=\"data\" config=\"config.spark\"></div>\n<div ng-if=\"componentSubtype.indexOf('lines') >= 0\" class=\"td-sparkline\" tdsparkline source=\"data\" config=\"config.spark\"></div>\n<div class='td-slider-container'>\n  <div class='td-slider-domain'></div>\n  <div class='td-slider-progress' ng-style='{left: progress.offset, width: progress.length}'></div>\n  <div class='td-slider-handle' ng-style='{left: handleMin.offset}'></div>\n  <div class='td-slider-handle' ng-style='{left: handleMax.offset}'></div>\n</div>\n<div class='td-labels-container'>\n  <div class='td-label min'>{{ labels.min.getTime ? (labels.min | date) : (labels.min | numeral:config.format) }}</div>\n  <div class='td-label max'>{{ labels.max.getTime ? (labels.max | date) : (labels.max | numeral:config.format) }}</div>\n</div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-labelbox"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-handler" ng-click="select(item)">\n\t<div class="td-widget-selection" ng-show="selected != null">\n\t\t<i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n\t</div>\n\t<div class="td-title">{{title || config.title}}</div>\n\t<div class="td-labelbox-container">\n\t\t<div class="td-labelbox-title">{{data.label}}</div>\n\t\t<div class="td-labelbox-description">{{config.description || data.description}}</div>\n\t\t\x3c!-- <div ng-show= \'data.menu != null\' class="td-widget-menu" ng-class="{\'td-active\': toggle}">\n\t\t\t<div class="td-toggle" ng-click="toggle=!toggle">\n\t\t\t\t<i class="fa fa-bars td-widget-menu-toogle"></i>\n\t\t\t</div>\n\t\t\t<div class="td-widget-menu-container" ng-show="toggle">\n\t\t\t\t<ul>\n\t\t\t\t\t<li ng-repeat="elem in data.menu">{{elem}}</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div> --\x3e\n\t\t<div ng-show=\'config.selectable\' class="td-label"></div>\n\t</div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-legend"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-widget-legend-container">\n\t<div class="td-widget-legend-item" ng-repeat="item in config.items">\n\t\t<div class="td-widget-legend-item-icon" ng-style="{\'background\': item.color}"></div>\n\t\t<div class="td-widget-legend-item-label">{{item.label}}</div>\n\t\t<div class="td-clear"></div>\n\t</div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-list"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '\x3c!-- <div class="td-widget-focus" title="Click to activate" td-widget-focus ng-show="focusActive"></div> --\x3e\n<div class="td-widget-selection" ng-show="selected != null">\n  <i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n</div>\n<div class="td-title">{{title || config.title}}</div>\n<div class="td-list-container">\n\t<div class="td-item" ng-repeat="item in data | orderBy:config.sorting track by $index" ng-click="select(item)" ng-class="item.selected ? \'td-selected\' : \'\'" ng-switch="componentSubtype" title="{{ item.label }}">\n    <div class=\'img\'>\n      <img ng-src=\'{{item.thumb}}\'>\n    </div>\n    <div class="td-txt">\n\t\t\t<div ng-show=\'item.label != null\' class="td-label">\n\t\t\t\t{{item.label}}\n        <a class="td-external-link" ng-show=\'item.link != null\' href="#" ng-click="clickLink($event, item)" target="_blank">\n        \t<i class="fa fa-external-link"></i>\n        </a>\n\t\t\t</div>\n\t\t\t<div ng-show=\'item.description != null\' class="td-description" ng-bind-html="item.description | linky"></div>\n\t\t</div>\n    <div class="td-values">\n    \t<div ng-show=\'item.value != null\' class="td-value">\n    \t\t{{item.value != null ? (item.value | numeral:config.format) : \'\'}}\n    \t\t<span ng-show=\'config.unit != null\' >{{config.unit}}</span>\n    \t</div>\n    </div>\n\t\t<div ng-if=\'item.series != null\' class="td-sparkline" tdsparkline source="item.series" config="config.spark"></div>\n\t\t<div class="td-progress-bar" ng-show="config.barsVisible">\n\t\t\t<div class="td-bar animate-enter" ng-style="{ width: item._normalized + \'%\' }"></div>\n\t\t</div>\n\t</div>\n</div>\n<div class="td-filter" ng-class="{\'selected\': selected}" ng-show="config.sortEnabled">\n  <i class="fa" ng-class="{\'td-selected\': [\'label\', \'-label\'].indexOf(config.sorting) > -1, \'fa-sort-alpha-asc\': labelAsc, \'fa-sort-alpha-desc\': !labelAsc}" ng-click="config.sorting = (labelAsc = ([\'label\', \'-label\'].indexOf(config.sorting) > -1) ? !labelAsc : labelAsc) ? \'label\' : \'-label\'" ng-show="config.sortByLabel"></i>\n  <i class="fa" ng-class="{\'td-selected\': [\'value\', \'-value\'].indexOf(config.sorting) > -1, \'fa-sort-numeric-asc\': valueAsc, \'fa-sort-numeric-desc\': !valueAsc}" ng-click="config.sorting = (valueAsc = ([\'value\', \'-value\'].indexOf(config.sorting) > -1) ? !valueAsc : valueAsc) ? \'value\' : \'-value\'" ng-show="config.sortByLabel"></i>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-metrics-bars"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div ng-show=\'item.bars != null\' class="td-sparkbar" tdsparkbar source="item.bars" config="config.spark"></div>\n<div ng-show=\'item.labelBottom != null\' class="td-description">{{item.labelBottom}}</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-metrics-label"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div ng-show='config.description != null || data[i].description != null' class=\"td-sublabel td-sublabel-value\">{{ config.description || data[i].description }}</div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-metrics-series"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div ng-show=\'config.description != null || data[i].description != null\' class="td-description">{{ config.description || data[i].description }}</div>\n<div ng-show=\'data[i].series != null\' class="td-sparkline" tdsparkline source="data[i].series" config="config.spark"></div>\n\x3c!-- WARN: use next-sibling selector to manage description :empty --\x3e\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-metrics-variation"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class=\"td-variation\" ng-show= 'data[i].variation != null'>\n\t<div class= \"td-arrow\">\n\t\t<i class=\"fa\" ng-class=\"data[i].variation >= 0 ? 'fa-caret-up' : 'fa-caret-down'\"></i>\n\t</div>\n\t{{(data[i].variation | numeral:'0,0.[00]a%')}}\n</div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-metrics"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-widget td-metric" ng-repeat="item in data | filter:{id: visibleId}" ng-click="select(item)" ng-class="{\'td-selectable\' : config.selectable, \'td-selected\': (selected==item.id) }" data-height="1" data-width="1" data-x="1" data-y="1" ng-switch="config.type">\n\t<div class="td-title">{{title || config.title}}\n\t\t<div ng-show= \'item.category != null\' class="td-category" ng-style="{\'background\': item.category}"></div>\n\t</div>\n\t<div ng-show= \'item.value != null\' class="td-value">\n\t\t{{item.value != null ? (item.value | numstr) : \'\'}}\n\t</div>\n\t<div ng-switch-when="label"> <div ng-include="\'tadaboard/templates/td-metrics-label\'"></div> </div>\n\t<div ng-switch-when="series"> <div ng-include="\'tadaboard/templates/td-metrics-series\'"></div> </div>\n\t<div ng-switch-when="bars"> <div ng-include="\'tadaboard/templates/td-metrics-bars\'"></div> </div>\n\t<div ng-switch-when="variation"> <div ng-include="\'tadaboard/templates/td-metrics-variation\'"></div> </div>\n\t<div ng-show=\'config.selectable\' class="td-label"></div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-progress"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-handler" ng-click="select(item)">\n\t<div class="td-widget-selection" ng-show="selected != null">\n\t\t<i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n\t</div>\n\t<div class="td-title">{{title || config.title}}</div>\n\t<div class="td-block-content">\n\t\t<div ng-show= \'data.value != null\' class="td-percent">\n\t\t\t{{data.value | numeral:config.format}}\n\t\t</div>\n\t\t<div class="td-value">\n\t\t\t{{config.description || data.description}}\n\t\t</div>\n\t</div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-select-menu"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-select-container">\n  <div class="td-select-placeholder">{{selected.label || "--"}}</div>\n  <select class="td-select-content" ng-options="item.label for item in data" ng-model="selected" ng-change="changed()"></select>\n  <i class="fa fa-angle-down"></i>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-separator"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{ title || config.title || data.title }}</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-slider"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class='td-title'>{{ title || config.title }}</div>\n<div class='td-slider-container'>\n  <div class='td-slider-domain'></div>\n  <div class='td-slider-progress' ng-style='{left: progress.offset, width: progress.length}'></div>\n  <div class='td-slider-handle' ng-style='{left: handle.offset}'></div>\n</div>\n<div class='td-labels-container'>\n  <div class='td-label'>{{ label.getTime ? (label | date) : (label | numeral:config.format) }}</div>\n</div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-switch"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-handler" ng-click="select(item)">\n  <div class="td-title" ng-show="title || config.title">{{ title || config.title }}</div>\n  <div class="td-switch-container">\n    <div class="td-switch-label">{{ data.label }}</div>\n    <div class="td-switch-content">\n      <div class="td-switch-handle">\n    </div>\n  </div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-tab"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div>\n\t<ul>\n\t\t<li ng-repeat="item in (config.tabs || data.tabs)"><a href="" ng-click="item.disabled || select(item)" ng-class="{\'active\':selected==item.id, \'disabled\': item.disabled}">{{item.label}}</a></li>\n\t</ul>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-table"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-widget-focus" title="Click to activate" td-widget-focus ng-show="focusActive"></div>\n<div class="td-title">{{title || config.title}}</div>\n<div class="td-table-container">\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th ng-repeat = "header in config.headers" >{{ header }}</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr class="td-item" ng-repeat = "item in data" ng-click="select(item)" ng-class="item.selected ? \'td-selected\' : \'\'">\n\t\t\t\t<td class="td-datum" ng-repeat = "cell in item.values" ng-show=\'cell != null\' ng-style="{\'background\': cell.color != null ? cell.color : \'\' }">{{ cell.value }}</th>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-tags"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-tags-container">\n  <span class="td-item" ng-repeat="item in data track by $index" ng-click="select(item)" ng-class="item.selected ? \'td-selected\' : \'\'" title="{{ item.label }}">{{item.label}} {{config.showValues ? \'(\' + item.value + \')\' : \'\'}}</span>\n</div>\n<div class="td-widget-selection" ng-show="selected.length > 0">\n  <i class="td-label fa fa-times" ng-click="resetSelection()"></i>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-text-select"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class=\"td-title\">{{title || config.title}}</div>\n<div class=\"td-text-container\">\n  <span class=\"text-repeat\" ng-repeat='item in data.items track by $index'>\n    <span class=\"custom-text\" ng-if='isString(item)'>{{ item }}</span>\n    <span class=\"custom-select\" ng-if='isObject(item)' ng-class='{disabled: item.disabled}'>\n      <span>{{ texts[item.key] || item.default }}</span>\n      <select ng-options='opt.id as opt.label for opt in item.options' ng-model='selected[item.key]' ng-change='change(item.key, selected[item.key])' ng-disabled='item.disabled' title='{{ texts[item.key] || item.default }}'>\n        <option value=''>{{ item.default }}</option>\n      </select>\n    </span>\n  </span>\n</div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-text"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {}) __p.push("<div >{{data.text || config.text}}</div>\n");
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-time-range-select"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="time-selection-box pull-left" ng-class="{\'select-hours\': config.picker.timePicker}" ng-click="showPicker = !showPicker">\n  <div class="td-label">\n    <i class="fa fa fa-calendar date-icon inline-middle"></i>\n    <div class="inline-middle">{{ config.labels.from }}</div>\n  </div>\n  <div class="day from inline-middle">{{current[0] | date:\'dd\'}}</div>\n  <div class="month from inline-middle">{{current[0] | date:\'MM/yyyy\'}}</div>\n  <i class="fa fa-angle-down arrow-icon inline-middle"></i>\n  <div ng-show="config.picker.timePicker" >\n    <i class="fa fa-clock-o hour-icon inline-middle"></i>\n    <div class="hour from inline-middle">{{current[0] | date:\'HH\'}}</div>\n    <i class="fa fa-angle-down arrow-icon inline-middle"></i>\n  </div>\n</div>\n<div class="time-selection-box last pull-left" ng-class="{\'select-hours\': config.picker.timePicker}" ng-click="showPicker = !showPicker">\n  <div class="td-label">\n    <i class="fa fa fa-calendar date-icon inline-middle"></i>\n    <div class="inline-middle">{{ config.labels.to }}</div>\n  </div>\n  <div class="day to inline-middle">{{current[1] | date:\'dd\'}}</div>\n  <div class="month to inline-middle">{{current[1] | date:\'MM/yyyy\'}}</div>\n  <i class="fa fa-angle-down arrow-icon inline-middle"></i>\n  <div ng-show="config.picker.timePicker" >\n    <i class="fa fa-clock-o hour-icon inline-middle"></i>\n    <div class="hour to inline-middle">{{current[1] | date:\'HH\'}}</div>\n    <i class="fa fa-angle-down arrow-icon inline-middle"></i>\n  </div>\n</div>\n<div class="clear"></div>\n<input class="input-date" readonly></input>\n<div class="picker-container" ng-show="showPicker"></div>\n<div class="interval" ng-repeat="item in config.selectors" ng-class="{\'selected\': isSelected(item.value)}">\n  <a href="" ng-click="selectInterval(item)" >{{item.label}}</a>\n</div>\n<div class="days">\n  <span>{{ days }}</span>\n  {{ config.labels.days }}\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-time-select-hour"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-title">{{title || config.title}}</div>\n<div class="td-time-selection-box td-pull-left">\n\t<div class="td-hour-from" ng-click="clickOpenPicker($event, true, false)"></div>\n\t\x3c!-- <div class="td-minute-to" ng-click="clickOpenPicker($event, true, true)"></div> --\x3e\n\t<div class="td-label">\n\t\t<i class="fa fa-clock-o td-hour-icon td-inline-middle"></i>\n\t\t<div class="td-inline-middle">From</div>\n\t</div>\n\t<div class="td-hour td-from td-inline-middle">{{current[0] | date:\'HH\'}}</div>\n\t<div class="td-minute td-from td-inline-middle">{{current[0] | date:\'mm\'}}</div>\n\t<input class="td-input-hour-from" readonly></input>\n\x3c!-- \t<input class="td-input-minute-from" readonly></input>\n\t<i class="fa fa-angle-down td-arrow-icon td-inline-middle"></i> --\x3e\n</div>\n<div class="td-time-selection-box td-last td-pull-left">\n\t<div class="td-hour-to" ng-click="clickOpenPicker($event, false, false)"></div>\n\t\x3c!-- <div class="td-minute-to" ng-click="clickOpenPicker($event, false, true)"></div> --\x3e\n\t<div class="td-label">\n\t\t<i class="fa fa-clock-o td-hour-icon td-inline-middle"></i>\n\t\t<div class="td-inline-middle">To</div>\n\t</div>\n\t<div class="td-hour td-to td-inline-middle">{{current[1] | date:\'HH\'}}</div>\n\t<div class="td-minute td-to td-inline-middle">{{current[1] | date:\'mm\'}}</div>\n\t<input class="td-input-hour-to" readonly></input>\n\t\x3c!-- <input class="td-input-minute-to" readonly></input>\n\t<i class="fa fa-angle-down td-arrow-icon td-inline-middle"></i> --\x3e\n</div>\n<div class=\'td-clear\'></div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-time-select"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class=\"td-title\">{{title || config.title}}</div>\n<div class='td-time-selection-box td-pull-left'>\n\t<div class='td-date-from' ng-click='clickOpenPicker($event, true, false)'></div>\n\t<div class='td-label'>\n\t\t<i class='fa fa-calendar td-date-icon td-inline-middle'></i>\n\t\t<div class='td-inline-middle'>From</div>\n\t</div>\n\t\t<div class=\"td-day td-from td-inline-middle\">{{current[0] | date:'dd'}}</div>\n\t\t<div class=\"td-month td-from td-inline-middle\">{{current[0] | date:'MM'}}</div>\n\t\t<div class='td-year td-from td-inline-middle'>{{current[0] | date:'yyyy'}}</div>\n\t<input class='td-input-date-from' readonly='readonly'>\n</div>\n<div class='td-time-selection-box td-last td-pull-left'>\n\t<div class='td-date-to' ng-click='clickOpenPicker($event, false, false)'></div>\n\t<div class='td-label'>\n\t\t<i class='fa fa-calendar td-date-icon td-inline-middle'></i>\n\t\t<div class='td-inline-middle'>To</div>\n\t</div>\n\t\t<div class=\"td-day td-to td-inline-middle\">{{current[1] | date:'dd'}}</div>\n\t\t<div class=\"td-month td-to td-inline-middle\">{{current[1] | date:'MM'}}</div>\n\t\t<div class='td-year td-to td-inline-middle'>{{current[1] | date:'yyyy'}}</div>\n\t<input class='td-input-date-to' readonly='readonly'>\n</div>\n<div class='td-clear'></div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-trigger"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            '<div class="td-handler" ng-click="trig()">\n  <div class="td-title" ng-show="title || config.title">{{ title || config.title }}</div>\n  <div class="td-trigger-container" ng-class="status">\n    <div class="td-trigger-label">{{ data.label }}</div>\n    <div class="td-trigger-content">\n      <div class="td-trigger-action">{{ data.action }}</div>\n      <div class="td-trigger-feedback">{{ data.feedback[status] || config.feedback[status] }}</div>\n    </div>\n  </div>\n</div>\n'
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-valuebox"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push(
            "<div class=\"td-title\" ng-class=\"{'multiple': data.length > 1}\">{{ data ? (data[i].title || config.placeholder) : '' }}\n\t<i class=\"fa fa-angle-down arrow\"></i>\n\t<div ng-show= 'data[i].category != null' class=\"td-category\" ng-style=\"{'background': data[i].category}\"></div>\n\t<select ng-options='index as item.title for (index, item) in data' ng-model='i' ng-change='update()'>\n\t\t<option value='' disabled>{{ config.placeholder }}</option>\n\t</select>\n</div>\n<div class='handler' ng-click=\"select()\">\n\t<div ng-show= 'data[i].value != null' class=\"td-value\">\n\t\t{{data[i].value != null ? (data[i].value | numeral:config.format) : ''}}\n\t</div>\n\t<div ng-if=\"componentSubtype === 'basic'\" ng-include=\"'tadaboard/templates/td-metrics-label'\"></div>\n\t<div ng-if=\"componentSubtype === 'series'\" ng-include=\"'tadaboard/templates/td-metrics-series'\"></div>\n\t<div ng-if=\"componentSubtype === 'variation'\" ng-include=\"'tadaboard/templates/td-metrics-variation'\"></div>\n</div>\n<div ng-show='config.selectable' class=\"td-label\"></div>\n"
          );
        return __p.join("");
      });
  }.call(this),
  function () {
    this.JST || (this.JST = {}),
      (this.JST["tadaboard/templates/td-widget-focus"] = function (obj) {
        var __p = [],
          print = function () {
            __p.push.apply(__p, arguments);
          };
        with (obj || {})
          __p.push('<div class="td-label">Click to activate</div>\n');
        return __p.join("");
      });
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdareas", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u, c, p;
            return (
              function () {
                return $(e).parent().data();
              },
              (l = null),
              function (t) {
                if (t.ngTooltipVisible)
                  return (l =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$y}}"));
              },
              (r = {
                scales: {
                  x: { type: "time" },
                  y: { domainExtend: 0.1 },
                  color: { field: "d.category" },
                },
                axes: {
                  x: { tickFormat: "{M(x)}" },
                  y: { tickPadding: 50, tickExtension: "default" },
                },
                legends: { color: { visible: !1 } },
                custom: {
                  interpolate: "linear",
                  stacked: !1,
                  showAreas: !0,
                  showLines: !1,
                  showPoints: !0,
                  showMarker: !0,
                  pointRadius: 4,
                },
              }),
              (c = { padding: { top: 15, right: 15, bottom: 30, left: 40 } }),
              (d = { padding: { bottom: 48 } }),
              (s = t.query),
              (u = da.lines($(e[0]).find(".td-block-content")[0])).options(
                _.merge(r, c)
              ),
              a
                .subscribe(t.componentId, "query", function (t) {
                  return (s = t);
                })
                .subscribe(t.componentId, "data", function (t) {
                  return u.data(t), o();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  return (
                    (i = u.options()),
                    (i = e.legends.color.visible
                      ? _.merge(i, d)
                      : _.merge(i, c)),
                    (n = _.merge(i, e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    u.options(n),
                    (t.config = n),
                    o()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    u.options({ scales: { color: { range: t.range } } }), o()
                  );
                })
                .on("status.change", function (e, n, i, r) {
                  if (
                    null != s &&
                    (p(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(s)))
                  )
                    return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-areas",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return u.resize();
              }),
              u
                .on("click", function (e) {
                  var n;
                  return (
                    (n =
                      null == e
                        ? null
                        : null != e.id
                        ? e.id.toString()
                        : null != e.$color
                        ? e.$color.toString()
                        : void 0),
                    s
                      ? t.$apply(function () {
                          return a.status(s, n, t.componentId);
                        })
                      : u.select(null)
                  );
                })
                .on("over", function (e) {
                  if (l)
                    return t.$apply(function () {
                      return (t.tooltipText = null === e ? null : l(e));
                    });
                }),
              (p = function () {
                if (s) return (t.selected = a.status(s));
              }),
              (o = function () {
                if (null != s) return u.select(a.status(s));
              }),
              (t.resetSelection = function () {
                if (s) return a.status(s, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdbarscolumn", [
      "$log",
      "$filter",
      "$timeout",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, a) {
            var o, r, l, s, d, u, c, p, m;
            return (
              (t.dataColumns = []),
              (t.dataTicks = []),
              (t.selected = []),
              (t.focusActive = !0),
              (l = {
                selectionEnabled: !0,
                selectionMultiple: !1,
                sortEnabled: !0,
                sortByLabel: !0,
                sortByValue: !0,
                barsVisible: !0,
                tickPadding: 100,
                paddingTop: 15,
                paddingBottom: 30,
                yTickFormat: '{N(y,"0.[00]a")}',
                localeId: null,
                fieldColor: "category",
              }),
              (t.config = l),
              (r = d3.scale.linear()),
              (o = $(".td-axis-y", e[0])),
              (p = d3.scale.linear().clamp(!0)),
              (m = d3.svg.axis().scale(p).orient("left")),
              (s = d3.layout.stack()),
              (d = function (t) {
                return r.range(t.range).domain(_.range(t.range.length));
              }),
              (u = function (e) {
                var n, i, a, d, u;
                if (e)
                  return (
                    (i = _.values(_.groupBy(e, l.fieldColor))),
                    (i = s(i)),
                    (d = d3.min([
                      0,
                      d3.min(e, function (t) {
                        return t.y0 + t.y;
                      }),
                    ])),
                    (a = d3.max([
                      0,
                      d3.max(e, function (t) {
                        return t.y0 + t.y;
                      }),
                    ])),
                    (n = o.innerHeight() - l.paddingTop - l.paddingBottom),
                    p.domain([d, a]).range([l.paddingTop + n, l.paddingTop]),
                    m
                      .ticks((u = n / l.tickPadding) > 3 ? u : 3)
                      .tickFormat(function (t) {
                        return da.utils.template(
                          l.yTickFormat,
                          { y: t },
                          l.localeId
                        );
                      }),
                    d3
                      .select(o[0])
                      .select("g")
                      .transition()
                      .duration(1e3)
                      .call(m),
                    e.forEach(function (t) {
                      return (
                        (t._length =
                          t.y < 0
                            ? Math.abs(p(t.y))
                            : n + l.paddingTop - Math.abs(p(t.y))),
                        (t._start = t.y < 0 ? p(t.y0) : p(t.y0 + t.y)),
                        (t._color = r(
                          da.utils.moreColor(
                            t[l.fieldColor],
                            _.uniq(_.pluck(e, l.fieldColor)),
                            r.range()
                          )
                        ))
                      );
                    }),
                    (t.dataColumns = _.unzip(i)),
                    (t.dataTicks = _.uniq(_.pluck(e, "x")).map(function (t) {
                      return { x: t };
                    }))
                  );
              }),
              (c = function () {
                var e, n, i;
                if (t.data)
                  return (
                    (e = _.flatten(t.dataColumns, !0)),
                    (i = t.dataTicks),
                    (n = e.concat(i)),
                    _.isArray(t.selected)
                      ? _.forEach(n, function (e) {
                          return (e.selected = _.contains(t.selected, e.x)), !0;
                        })
                      : _.forEach(n, function (e) {
                          return (e.selected = t.selected === e.x), !0;
                        })
                  );
              }),
              i
                .subscribe(t.componentId, "query", function (e) {
                  return (t.query = e), (t.selected = i.status(t.query));
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = _.merge({}, l, e));
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (
                    u(e),
                    n(function () {
                      return t.$apply(function () {
                        return (t.data = e);
                      });
                    })
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return d(t);
                })
                .on("status.change", function (e, n, a) {
                  return t.query && (t.selected = i.status(t.query)), c();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-bars-column",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (t.select = function (e) {
                var n, a;
                if (t.query && t.config.selectionEnabled)
                  return t.config.selectionMultiple
                    ? ((n = i.status(t.query) || []),
                      (a = !e.selected)
                        ? _.unique(n.push(e.x))
                        : _.pull(n, e.x),
                      i.status(t.query, n, t.componentId))
                    : ((a = !e.selected),
                      t.query
                        ? i.status(t.query, a ? e.x : null, t.componentId)
                        : void 0);
              }),
              (t.resetSelection = function () {
                if (t.query) return i.status(t.query, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-bars-column"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdbarshorizontal", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u, c, p, m;
            return (
              $(e).parent().data(),
              (s = null),
              function (t) {
                if (t.ngTooltipVisible)
                  return (s =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$y}}"));
              },
              (l = {
                scales: { color: { field: "d.category" } },
                scales: {
                  x: { range: [0, "height"] },
                  y: { domain: ["max", "min"], range: [0, "width"] },
                },
                axes: {
                  x: { position: "left", tickPadding: 50 },
                  y: { position: "bottom", tickPadding: 100 },
                },
                tooltip: { visible: !1, template: "{{y}}" },
                legends: { color: { visible: !1 } },
                custom: { horizontal: !0 },
              }),
              { padding: { top: 0, right: 0, bottom: 20, left: 20 } },
              { padding: { bottom: 0 } },
              { padding: { left: 0 } },
              (c = { padding: { top: 15, right: 10, bottom: 15, left: 30 } }),
              { padding: { left: 20 } },
              (u = { padding: { bottom: 40 } }),
              (d = t.query),
              (r = da.bars($(e[0]).find(".td-block-content")[0])).options(
                _.merge(l, c)
              ),
              (m = function (t) {
                return (
                  null != t.custom.thresholds &&
                    "" !== t.custom.thresholds &&
                    (t.custom.thresholds = [Number(t.custom.thresholds)]),
                  t
                );
              }),
              a
                .subscribe(t.componentId, "query", function (t) {
                  return (d = t);
                })
                .subscribe(t.componentId, "data", function (t) {
                  return r.data(t), o();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  return (
                    (i = r.options()),
                    (i = e.legends.color.visible
                      ? _.merge(i, u)
                      : _.merge(i, c)),
                    (n = _.merge(i, m(e), e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    _.has(n, "$title") &&
                      ((t.title = n.$title), delete n.$title),
                    _.has(n, "$key") && ((t.key = n.$key), delete n.$key),
                    r.options(n),
                    (t.config = n),
                    o()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    r.options({ scales: { color: { range: t.range } } }), o()
                  );
                })
                .on("status.change", function (e, n, i, r) {
                  if (
                    null != d &&
                    (p(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(d)))
                  )
                    return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-bars-horizontal",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return r.resize();
              }),
              r
                .on("click", function (e) {
                  var n;
                  return (
                    (n =
                      null == e
                        ? null
                        : null != e.id
                        ? e.id.toString()
                        : null != e.$color
                        ? e.$color.toString()
                        : void 0),
                    d
                      ? t.$apply(function () {
                          return a.status(d, n, t.componentId);
                        })
                      : r.select(null)
                  );
                })
                .on("over", function (e) {
                  if (s)
                    return t.$apply(function () {
                      return (t.tooltipText = null === e ? null : s(e));
                    });
                }),
              (p = function () {
                if (d) return (t.selected = a.status(d));
              }),
              (o = function () {
                if (null != d) return r.select(a.status(d));
              }),
              (t.resetSelection = function () {
                if (d) return a.status(d, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdbarsranking", [
      "$log",
      "$filter",
      "$timeout",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, a) {
            var o, r, l, s, d, u, c;
            return (
              (t.data = []),
              (t.selected = []),
              (t.focusActive = !0),
              (t.labelAsc = !0),
              (t.valueAsc = !1),
              (r = {
                selectionEnabled: !1,
                selectionMultiple: !1,
                sortEnabled: !0,
                sortByLabel: !0,
                sortByValue: !0,
                sorting: "-value",
                barsVisible: !0,
                tickPadding: 100,
                paddingLeft: 15,
                paddingRight: 55,
                xTickFormat: '{N(x,"0.[00]a")}',
                localeId: null,
                format: "0,0.[00]a",
              }),
              (t.config = r),
              (s = $(e[0])),
              (o = $(".td-axis-x", e[0])),
              (d = d3.scale.linear().clamp(!0)),
              (c = d3.scale.linear().clamp(!0).range([0, 100])),
              (u = d3.svg.axis().scale(d).orient("bottom")),
              (l = function (e) {
                var n, i, a, l;
                if (e)
                  return (
                    (i = d3.min([
                      0,
                      d3.min(e, function (t) {
                        return t.value;
                      }),
                    ])),
                    (n = d3.max([
                      0,
                      d3.max(e, function (t) {
                        return t.value;
                      }),
                    ])),
                    (a = o.innerWidth() - r.paddingLeft - r.paddingRight),
                    d.domain([i, n]).range([r.paddingLeft, r.paddingLeft + a]),
                    c.domain([i, n]),
                    u
                      .ticks((l = a / r.tickPadding) > 3 ? l : 3)
                      .tickFormat(function (t) {
                        return da.utils.template(
                          r.xTickFormat,
                          { x: t },
                          r.localeId
                        );
                      }),
                    d3.select(o[0]).transition().duration(1e3).call(u),
                    _.isArray(t.selected)
                      ? (s.toggleClass("td-selected", !_.isEmpty(t.selected)),
                        _.forEach(e, function (e) {
                          return (
                            (e.selected = _.contains(t.selected, e.id)),
                            (e._left = c(d3.min([0, e.value]))),
                            (e._normalized = Math.abs(c(e.value) - c(0))),
                            !0
                          );
                        }))
                      : (s.toggleClass("td-selected", null != t.selected),
                        _.forEach(e, function (e) {
                          return (
                            (e.selected = t.selected === e.id),
                            (e._left = c(d3.min([0, e.value]))),
                            (e._normalized = Math.abs(c(e.value) - c(0))),
                            !0
                          );
                        }))
                  );
              }),
              i
                .subscribe(t.componentId, "query", function (e) {
                  return (t.query = e), (t.selected = i.status(t.query));
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  if (
                    ((t.config = _.merge({}, r, e)),
                    ("label" !== (n = t.config.sorting) && "-label" !== n) ||
                      (t.labelAsc = "label" === t.config.sorting),
                    "value" === (i = t.config.sorting) || "-value" === i)
                  )
                    return (t.valueAsc = "value" === t.config.sorting);
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (
                    l(e),
                    n(function () {
                      return t.$apply(function () {
                        return (t.data = e);
                      });
                    })
                  );
                })
                .on("status.change", function (e, n, a) {
                  return t.query && (t.selected = i.status(t.query)), l(t.data);
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-bars-ranking",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (t.select = function (e) {
                var n, a;
                if (t.query && t.config.selectionEnabled)
                  return t.config.selectionMultiple
                    ? ((n = i.status(t.query) || []),
                      (a = !e.selected)
                        ? _.unique(n.push(e.id))
                        : _.pull(n, e.id),
                      i.status(t.query, n, t.componentId))
                    : ((a = !e.selected),
                      t.query
                        ? i.status(t.query, a ? e.id : null, t.componentId)
                        : void 0);
              }),
              (t.clickLink = function (t, e) {
                return window.open(e.link), t.preventDefault();
              }),
              (t.selectAll = function () {
                if (t.query)
                  return i.status(
                    t.query,
                    _.pluck(t.data, "id"),
                    t.componentId
                  );
              }),
              (t.resetSelection = function () {
                if (t.query) return i.status(t.query, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-bars-ranking"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdbars", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u, c, p, m, g, f, h;
            return (
              $(e).parent().data(),
              (s = null),
              function (t) {
                if (t.ngTooltipVisible)
                  return (s =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$y}}"));
              },
              (l = {
                scales: { color: { field: "d.category" } },
                axes: { y: { tickPadding: 50, tickExtension: "default" } },
                tooltip: { visible: !1, template: "{{y}}" },
                legends: { color: { visible: !1 } },
                custom: {
                  normalized:
                    "normalized" === (p = t.componentSubtype) ||
                    "normalized-time" === p ||
                    void 0,
                  grouped:
                    "grouped" === (m = t.componentSubtype) ||
                    "grouped-time" === m ||
                    void 0,
                  rangePadding: 0.4,
                  outerPadding: 0.2,
                },
              }),
              ("basic-time" !== (g = t.componentSubtype) &&
                "stacked-time" !== g &&
                "grouped-time" !== g &&
                "normalized-time" !== g) ||
                _.merge(l, {
                  scales: { x: { type: "time", domain: ["min", "max"] } },
                  axes: { x: { tickFormat: "{M(x)}" } },
                }),
              { padding: { top: 0, right: 0, bottom: 20, left: 20 } },
              { padding: { bottom: 0 } },
              { padding: { left: 0 } },
              (c = { padding: { top: 15, right: 15, bottom: 30, left: 40 } }),
              { padding: { left: 20 } },
              (u = { padding: { bottom: 48 } }),
              (d = t.query),
              (r = da.bars($(e[0]).find(".td-block-content")[0])).options(
                _.merge(l, c)
              ),
              (h = function (t) {
                return (
                  null != _.get(t, "custom.thresholds") &&
                    "" !== t.custom.thresholds &&
                    (t.custom.thresholds = [Number(t.custom.thresholds)]),
                  t
                );
              }),
              a
                .subscribe(t.componentId, "query", function (t) {
                  return (d = t);
                })
                .subscribe(t.componentId, "data", function (t) {
                  return r.data(t), o();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  return (
                    (i = r.options()),
                    (i =
                      !0 === _.get(e, "legends.color.visible")
                        ? _.merge(i, u)
                        : _.merge(i, c)),
                    (n = _.merge(i, h(e), e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    _.has(n, "$title") &&
                      ((t.title = n.$title), delete n.$title),
                    _.has(n, "$key") && ((t.key = n.$key), delete n.$key),
                    r.options(n),
                    (t.config = n),
                    o()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    r.options({ scales: { color: { range: t.range } } }), o()
                  );
                })
                .on("status.change", function (e, n, i, r) {
                  if (
                    null != d &&
                    (f(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(d)))
                  )
                    return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-bars",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return r.resize();
              }),
              r
                .on("click", function (e) {
                  var n;
                  return (
                    (n =
                      null == e
                        ? null
                        : null != e.id
                        ? e.id.toString()
                        : null != e.$color
                        ? e.$color.toString()
                        : void 0),
                    d
                      ? t.$apply(function () {
                          return a.status(d, n, t.componentId);
                        })
                      : r.select(null)
                  );
                })
                .on("over", function (e) {
                  if (s)
                    return t.$apply(function () {
                      return (t.tooltipText = null === e ? null : s(e));
                    });
                }),
              (f = function () {
                if (d) return (t.selected = a.status(d));
              }),
              (o = function () {
                if (null != d) return r.select(a.status(d));
              }),
              (t.resetSelection = function () {
                if (d) return a.status(d, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdbullet", [
      "$rootScope",
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var a, o, r, l, s, d, u;
            return (
              function () {
                return $(e).parent().data();
              },
              (u = $(e)[0].parentNode),
              (o = {
                padding: { left: 10, right: 10, bottom: 20 },
                scales: { x: { field: "d.value" } },
                selectable: !0,
                showTitle: !1,
                ratioBreakpoint: [2],
              }),
              (a = da.bullet($(e[0]).find(".td-bullet-container")[0])),
              (t.config = o),
              a.options(t.config),
              (d = function (t) {
                var e;
                return (
                  null != _.get(t, "custom.projected") &&
                    _.isString(t.custom.projected) &&
                    Number(t.custom.projected),
                  null != _.get(t, "custom.target") &&
                    _.isString(t.custom.target) &&
                    Number(t.custom.target),
                  null != _.get(t, "custom.ranges") &&
                    _.isString(t.custom.ranges) &&
                    ((e = t.custom.ranges.split(",").map(Number)),
                    (t.custom.ranges = _.map(e, function (t, n) {
                      return [e[n - 1] || 0, t];
                    }))),
                  t
                );
              }),
              (l = t.query),
              (s = function () {
                var e, n, i, a, s, d, c, p, m;
                for (
                  m = $(u),
                    s = Math.round((m.width() / m.height()) * 10) / 10,
                    m.toggleClass(
                      "td-selectable",
                      o.selectable && null != l && "" !== l
                    ),
                    m.toggleClass(
                      "td-selected",
                      o.selectable &&
                        null != t.data &&
                        null != t.selected &&
                        r() === t.selected
                    ),
                    p = [],
                    n = i = 0,
                    a = (c = d = t.config.ratioBreakpoint).length;
                  i < a;
                  n = ++i
                )
                  (e = c[n]),
                    p.push(
                      m.toggleClass(
                        "ratio-" + (n + 1),
                        e < s && s <= (d[n + 1] || 1 / 0)
                      )
                    );
                return p;
              }),
              i
                .subscribe(t.componentId, "query", function (e) {
                  return (l = e), (t.selected = i.status(l)), s();
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e), a.data(e), s();
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (
                    (t.config = _.merge(a.options(), d(e), function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    a.options(t.config),
                    s()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return a.options({ scales: { color: { range: t.range } } });
                })
                .on("status.change", function (e, n, a) {
                  return l && (t.selected = i.status(l)), s();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-bullet",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return s(), a.resize();
              }),
              (r = function () {
                return null != t.data.id ? t.data.id : t.componentId;
              }),
              (t.select = function () {
                var e;
                l &&
                  ((e = i.status(l) === r() ? null : r()),
                  i.status(l, e, t.componentId)),
                  s();
              }),
              (t.resetSelection = function () {
                if ((event.stopPropagation(), l))
                  return i.status(l, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-bullet"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdDate", [
      "$timeout",
      "$http",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (e, i, a) {
            return t(function () {
              var t;
              return (
                (t = { showWeekday: !0 }),
                (e.config = t),
                n
                  .subscribe(e.componentId, "data", function (t) {
                    if (((e.data = t), null != e.data.time))
                      return (e.data.time = new Date(e.data.time));
                  })
                  .subscribe(e.componentId, "config", function (n) {
                    return (e.config = _.merge({}, t, n));
                  })
                  .notify("new-widget", {
                    id: e.componentId,
                    type: "td-date",
                    subtype: e.componentSubtype,
                    layout: { width: e.width, height: e.height },
                  })
              );
            });
          },
          template: JST["tadaboard/templates/td-date"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdfunnel", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            var o, r, l;
            return (
              (n.data = []),
              (n.selected = []),
              (n.focusActive = !0),
              (r = {
                selectionEnabled: !1,
                selectionMultiple: !1,
                colorRange: ["#444", "#ccc"],
              }),
              (n.config = r),
              (o = d3.scale.linear()),
              (l = function (t) {
                var e;
                if (t)
                  return (
                    (e = d3.max(t, function (t) {
                      return t.value;
                    })),
                    o
                      .domain(_.range(n.config.colorRange.length))
                      .range(n.config.colorRange),
                    _.isArray(n.selected)
                      ? _.forEach(t, function (i, a) {
                          return (
                            (i.selected = _.contains(n.selected, i.id)),
                            (i._normalized =
                              90 * (0 !== e && i.value > 0 ? i.value / e : 0)),
                            (i._color = o(
                              da.utils.moreColor(
                                a,
                                _.range(t.length),
                                n.config.colorRange
                              )
                            )),
                            !0
                          );
                        })
                      : _.forEach(t, function (i, a) {
                          return (
                            (i.selected = n.selected === i.id),
                            (i._normalized =
                              90 * (0 !== e && i.value > 0 ? i.value / e : 0)),
                            (i._color = o(
                              da.utils.moreColor(
                                a,
                                _.range(t.length),
                                n.config.colorRange
                              )
                            )),
                            !0
                          );
                        })
                  );
              }),
              e
                .subscribe(n.componentId, "query", function (t) {
                  return (n.query = t), (n.selected = e.status(n.query));
                })
                .subscribe(n.componentId, "config", function (t) {
                  return (n.config = _.merge({}, r, t));
                })
                .subscribe(n.componentId, "data", function (e) {
                  return (
                    l(e),
                    t(function () {
                      return n.$apply(function () {
                        return (n.data = e);
                      });
                    })
                  );
                })
                .subscribe(n.componentId, "theme", function (t) {
                  return (n.config.colorRange = t.range);
                })
                .on("status.change", function (t, i, a) {
                  return n.query && (n.selected = e.status(n.query)), l(n.data);
                })
                .notify("new-widget", {
                  id: n.componentId,
                  type: "td-funnel",
                  subtype: n.componentSubtype,
                  layout: { width: n.width, height: n.height },
                }),
              (n.select = function (t) {
                var i, a;
                if (n.query && n.config.selectionEnabled)
                  return n.config.selectionMultiple
                    ? ((i = e.status(n.query) || []),
                      (a = !t.selected)
                        ? _.unique(i.push(t.id))
                        : _.pull(i, t.id),
                      e.status(n.query, i, n.componentId))
                    : ((a = !t.selected),
                      n.query
                        ? e.status(n.query, a ? t.id : null, n.componentId)
                        : void 0);
              }),
              (n.resetSelection = function () {
                if (n.query) return e.status(n.query, null, n.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-funnel"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdgraph", [
      "$rootScope",
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (t, e, n) {
            var a, o;
            return (
              function () {
                return $(e).parent().data();
              },
              (a = {
                scales: {
                  nodeColor: { field: "d.category" },
                  edgeColor: { field: "d.category" },
                },
              }),
              (t.focusActive = !0),
              (o = da.graph($(e[0]).find(".td-block-content")[0]).options(a)),
              i
                .subscribe(t.componentId, "data", function (t) {
                  return o.data(t);
                })
                .subscribe(t.componentId, "config", function (t) {
                  return o.options(t);
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return o.options({
                    scales: {
                      nodeColor: { range: t.range },
                      edgeColor: { range: t.range },
                    },
                  });
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-graph",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              o.on("forceStop", function () {
                return o.center();
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdHour", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, i;
              return (
                (t = { showDate: !0, runWatch: !0 }),
                (n.config = t),
                (i = null),
                e
                  .subscribe(n.componentId, "data", function (t) {
                    if (
                      ((n.data = t),
                      clearInterval(i),
                      null != n.data.time &&
                        ((n.data.time = new Date(n.data.time)),
                        n.config.runWatch))
                    )
                      return (i = setInterval(function () {
                        return n.$apply(function () {
                          return (n.data.time = new Date(
                            n.data.time.getTime() + 1e3
                          ));
                        });
                      }, 1e3));
                  })
                  .subscribe(n.componentId, "config", function (e) {
                    return (n.config = _.merge({}, t, e));
                  })
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-hour",
                    subtype: n.componentSubtype,
                    layout: { width: n.width, height: n.height },
                  })
              );
            });
          },
          template: JST["tadaboard/templates/td-hour"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdimagelist", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: { componentId: "@", title: "@" },
          link: function (t, e, i) {
            var a;
            return (
              (a = t.query),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (a = e), (t.selected = n.status(a));
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e);
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = e);
                })
                .on("status.change", function (e, i, o) {
                  if (a) return (t.selected = n.status(a));
                }),
              (t.select = function () {
                if (a) return n.status(a, item.id);
              })
            );
          },
          template: JST["tadaboard/templates/td-image-list"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdimage", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o, r, l, s, d;
            return (
              (d = $(e)[0].parentNode),
              (a = t.query),
              (o = !1),
              (r = !1),
              (l = function () {
                return o
                  ? $(d).addClass("td-selectable")
                  : $(d).removeClass("td-selectable td-selected");
              })(),
              (s = function () {
                if (o)
                  return r && o
                    ? $(d).addClass("td-selected")
                    : $(d).removeClass("td-selected");
              })(),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (a = e), (t.selected = n.status(a));
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e);
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (
                    null != e.selectable && (o = e.selectable),
                    l(),
                    (t.config = e)
                  );
                })
                .on("status.change", function (e, i, o) {
                  if (a) return (t.selected = n.status(a));
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-image",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (t.select = function () {
                if (a) return (r = !0), s(), n.status(a, !0);
              })
            );
          },
          template: JST["tadaboard/templates/td-image"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdinput", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (t, e, i) {
            var a;
            return (
              (a = t.query),
              (t.updateText = function () {
                if (t.query) return n.status(t.query, t.text);
              }),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (t.query = e), (t.text = n.status(t.query));
                })
                .on("status.change", function (e, i, o) {
                  if (a) return (t.text = n.status(a));
                })
            );
          },
          template: JST["tadaboard/templates/td-input"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdInterval", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, a, o, r, l, s, d, u, c, p, m, g, f, h, b;
              return (
                (l = null),
                (r = null),
                (d = null),
                (a = { format: "0,0.[00]a", precision: 1 }),
                (n.config = a),
                (s =
                  _.isString(n.componentSubtype) &&
                  n.componentSubtype.indexOf("time") >= 0),
                (c = s ? d3.time.scale() : d3.scale.linear()).clamp(!0),
                $(".td-slider-handle", i).each(function (e) {
                  var i, a, o;
                  return (
                    (o = this),
                    (i = new Hammer.Manager(o)).add(new Hammer.Pan()),
                    (a = 0),
                    i
                      .on("panstart", function () {
                        return (a = parseInt($(o).css("left")));
                      })
                      .on("panmove", function (i) {
                        var d, p, m;
                        return (
                          (d = i.deltaX),
                          (p = a + d),
                          s
                            ? (p = e ? t(p, c(l), c.range()[1]) : t(p, 0, c(r)))
                            : (s || (p = c(u(c.invert(p), n.config.precision))),
                              (m = Math.pow(10, -n.config.precision)),
                              (p = e
                                ? t(p, c(l + m), c.range()[1])
                                : t(p, 0, c(r - m)))),
                          $(o).css("left", p),
                          n.$apply(function () {
                            return e ? g(p) : f(p);
                          })
                        );
                      })
                      .on("panend", function () {
                        return n.$apply(function () {
                          return p();
                        });
                      })
                  );
                }),
                (function () {
                  var t;
                  return (
                    (t = i.find(".td-slider-container").width()),
                    c.range([0, t])
                  );
                })(),
                (m = function (t) {
                  var e;
                  if (t)
                    return (
                      null ==
                        (e = d3.extent(
                          _.map(t, function (t) {
                            return s ? new Date(t.x) : t.x;
                          })
                        ))[0] && (e = [0, 1]),
                      "undefined" != typeof min && null !== min && (e[0] = min),
                      "undefined" != typeof max && null !== max && (e[1] = max),
                      c.domain(e),
                      (null == l || l < e[0]) && (l = e[0]),
                      null == r || r > e[1] ? (r = e[1]) : void 0
                    );
                }),
                (h = function () {
                  var t, e;
                  return (
                    (e = c(l)),
                    (t = c(r)),
                    (n.handleMin = { offset: e }),
                    (n.handleMax = { offset: t }),
                    (n.progress = { offset: e, length: t - e }),
                    (n.labels = { min: l, max: r })
                  );
                }),
                (f = function (t) {
                  (l = c.invert(t)), h();
                }),
                (g = function (t) {
                  (r = c.invert(t)), h();
                }),
                (n.resetSelection = function () {
                  (l = c.domain()[0]), (r = c.domain()[1]), h(), p();
                }),
                (b = function (t) {
                  return (
                    null != t.precision &&
                      _.isString(t.precision) &&
                      Number(t.precision),
                    t
                  );
                }),
                (d = n.query),
                e
                  .subscribe(n.componentId, "query", function (t) {
                    return (d = t), o(), h();
                  })
                  .subscribe(n.componentId, "config", function (t) {
                    return (n.config = _.merge({}, a, b(t)));
                  })
                  .subscribe(n.componentId, "data", function (t) {
                    return (n.data = _.map(t, "y")), m(t), h();
                  })
                  .on("status.change", function (t, e, n) {
                    return o(), h();
                  })
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-interval",
                    subtype: n.componentSubtype,
                    layout: { width: n.width, height: n.height },
                  }),
                (p = function (t, i) {
                  var a;
                  if (
                    ((a = e.status(d)),
                    _.isEmpty(a) && (a = []),
                    null != l && (a[0] = l),
                    null != r && (a[1] = r),
                    d)
                  )
                    return e.status(d, a.sort(), n.componentId);
                }),
                (o = function () {
                  var t;
                  if (((t = e.status(d)), !_.isEmpty(t)))
                    return (l = t[0]), (r = t[1]);
                }),
                (t = function (t, e, n) {
                  return Math.min(Math.max(t, e), n);
                }),
                (u = function (t, e) {
                  var n;
                  return e < 0
                    ? ((n = Math.pow(10, Math.abs(e))), Math.round(t / n) * n)
                    : +t.toFixed(e);
                })
              );
            });
          },
          template: JST["tadaboard/templates/td-interval"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdlabelbox", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o, r, l, s;
            return (
              (s = $(e)[0].parentNode),
              (a = { selectable: !0, ratioBreakpoint: [1.5] }),
              (t.config = a),
              (r = t.query),
              !1,
              (l = function () {
                var e, n, i, l, d, u, c, p, m;
                for (
                  m = $(s),
                    d = Math.round((m.width() / m.height()) * 10) / 10,
                    m.toggleClass(
                      "td-selectable",
                      a.selectable && null != r && "" !== r
                    ),
                    m.toggleClass(
                      "td-selected",
                      a.selectable &&
                        null != t.data &&
                        null != t.selected &&
                        o() === t.selected
                    ),
                    p = [],
                    n = i = 0,
                    l = (c = u = t.config.ratioBreakpoint).length;
                  i < l;
                  n = ++i
                )
                  (e = c[n]),
                    p.push(
                      m.toggleClass(
                        "ratio-" + (n + 1),
                        e < d && d <= (u[n + 1] || 1 / 0)
                      )
                    );
                return p;
              }),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (r = e), (t.selected = n.status(r)), l();
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e), l();
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = _.merge({}, a, e)), l();
                })
                .on("status.change", function (e, i, a) {
                  return r && (t.selected = n.status(r)), l();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-labelbox",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return l();
              }),
              (o = function () {
                return null != t.data.id ? t.data.id : t.componentId;
              }),
              (t.select = function () {
                var e;
                r &&
                  ((e = n.status(r) === o() ? null : o()),
                  n.status(r, e, t.componentId)),
                  l();
              }),
              (t.resetSelection = function () {
                if ((event.stopPropagation(), r))
                  return n.status(r, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-labelbox"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdlegend", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (t, e, i) {
            var a;
            return (
              (a = t.query),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (a = e), (t.selected = n.status[a]);
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e);
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = e);
                })
            );
          },
          template: JST["tadaboard/templates/td-legend"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdlines", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u;
            return (
              function () {
                return $(e).parent().data();
              },
              (r = null),
              (u = function (t) {
                if (t.ngTooltipVisible)
                  return (r =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$y}}"));
              }),
              (o = {
                scales: {
                  x: { type: "time" },
                  y: { domainExtend: 0.1 },
                  color: { field: "d.category" },
                },
                axes: {
                  x: { tickFormat: "{M(x)}" },
                  y: { tickPadding: 50, tickExtension: "default" },
                },
                legends: { color: { visible: !1 } },
                tooltip: { visible: !1 },
                custom: {
                  interpolate: "linear",
                  stacked: !1,
                  normalized: !0,
                  showAreas: !1,
                  showLines: !0,
                  showPoints: !0,
                  showMarker: !0,
                  pointRadius: 4,
                },
              }),
              (d = { padding: { top: 15, right: 15, bottom: 30, left: 40 } }),
              (l = { padding: { bottom: 48 } }),
              (s = da.lines($(e[0]).find(".td-block-content")[0])).options(
                _.merge(o, d)
              ),
              a
                .subscribe(t.componentId, "data", function (t) {
                  return s.data(t);
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  return (
                    u(e),
                    null != r && (e.tooltip = { visible: !1 }),
                    (i = s.options()),
                    (i =
                      !0 === _.get(e, "legends.color.visible")
                        ? _.merge(i, l)
                        : _.merge(i, d)),
                    (n = _.merge(i, e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    s.options(n),
                    (t.config = n)
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return s.options({ scales: { color: { range: t.range } } });
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-lines",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return s.resize();
              }),
              s.on("over", function (e) {
                if (r)
                  return t.$apply(function () {
                    return (t.tooltipText = null === e ? null : r(e));
                  });
              }),
              s.on("brush", function (t) {
                return console.log(t);
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdlist", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o, r;
            return (
              (t.data = []),
              (t.selected = []),
              (t.focusActive = !0),
              (t.labelAsc = !0),
              (t.valueAsc = !1),
              (a = {
                selectionEnabled: !1,
                selectionMultiple: !1,
                sortEnabled: !0,
                sortByLabel: !0,
                sortByValue: !0,
                sorting: "-value",
                barsVisible: !1,
                format: "0,0.[00]a",
              }),
              (t.config = a),
              (r = $(e[0])),
              (o = function (e) {
                var n;
                if (e)
                  return (
                    (n = d3.max(e, function (t) {
                      return t.value;
                    })),
                    _.isArray(t.selected)
                      ? (r.toggleClass("td-selected", !_.isEmpty(t.selected)),
                        _.forEach(e, function (e) {
                          return (
                            (e.selected = _.contains(t.selected, e.id)),
                            (e._normalized =
                              90 * (0 !== n && e.value > 0 ? e.value / n : 0)),
                            !0
                          );
                        }))
                      : (r.toggleClass("td-selected", null != t.selected),
                        _.forEach(e, function (e) {
                          return (
                            (e.selected = t.selected === e.id),
                            (e._normalized =
                              90 * (0 !== n && e.value > 0 ? e.value / n : 0)),
                            !0
                          );
                        }))
                  );
              }),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (t.query = e), (t.selected = n.status(t.query));
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  if (
                    ((t.config = _.merge({}, a, e)),
                    ("label" !== (n = t.config.sorting) && "-label" !== n) ||
                      (t.labelAsc = "label" === t.config.sorting),
                    "value" === (i = t.config.sorting) || "-value" === i)
                  )
                    return (t.valueAsc = "value" === t.config.sorting);
                })
                .subscribe(t.componentId, "data", function (e) {
                  return o(e), (t.data = e);
                })
                .on("status.change", function (e, i, a) {
                  return t.query && (t.selected = n.status(t.query)), o(t.data);
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-list",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (t.select = function (e) {
                var i, a;
                if (t.query && t.config.selectionEnabled)
                  return t.config.selectionMultiple
                    ? ((i = n.status(t.query) || []),
                      (a = !e.selected)
                        ? _.unique(i.push(e.id))
                        : _.pull(i, e.id),
                      n.status(t.query, i, t.componentId))
                    : ((a = !e.selected),
                      t.query
                        ? n.status(t.query, a ? e.id : null, t.componentId)
                        : void 0);
              }),
              (t.clickLink = function (t, e) {
                return window.open(e.link), t.preventDefault();
              }),
              (t.selectAll = function () {
                if (t.query)
                  return n.status(
                    t.query,
                    _.pluck(t.data, "id"),
                    t.componentId
                  );
              }),
              (t.resetSelection = function () {
                if (t.query) return n.status(t.query, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-list"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdmapchoropleth", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u, c, p;
            return (
              function () {
                return $(e).parent().data();
              },
              (d = null),
              function (t) {
                if (t.ngTooltipVisible)
                  return (d =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$color}}"));
              },
              (r = {
                scales: {
                  symbolColor: { field: "d.category" },
                  shapeColor: { field: "d.category" },
                },
                tooltip: { visible: !1 },
                custom: {
                  projection: { scale: 1e3, center: [0, 42] },
                  responsive: !0,
                },
              }),
              (s = "/maps/italy-regions.json"),
              (l = null),
              (u = t.query),
              (c = da.map($(e[0]).find(".td-block-content")[0]).options(r)),
              a
                .subscribe(t.componentId, "query", function (e) {
                  return (u = e), (t.selected = a.status(u));
                })
                .subscribe(t.componentId, "data", function (t) {
                  return c.data(t), o();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n;
                  return (
                    (t.config = e),
                    null == (n = _.get(e, "custom.source")) &&
                      s !== l &&
                      (_.set(e, "custom.source", s), (l = n)),
                    c.options(e),
                    o()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    c.options({
                      scales: {
                        symbolColor: { range: t.range },
                        shapeColor: { range: t.range },
                      },
                    }),
                    o()
                  );
                })
                .on("status.change", function (e, n, i, r) {
                  if (
                    null != u &&
                    (p(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(u)))
                  )
                    return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-map-choropleth",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return c.resize();
              }),
              c
                .on("click", function (e) {
                  var n;
                  return (
                    (n =
                      null == e
                        ? null
                        : null != e.id
                        ? e.id.toString()
                        : null != e.$color
                        ? e.$color.toString()
                        : void 0),
                    u
                      ? t.$apply(function () {
                          return a.status(u, n, t.componentId);
                        })
                      : c.select(null)
                  );
                })
                .on("over", function (e) {
                  if (d)
                    return t.$apply(function () {
                      return (t.tooltipText = null === e ? null : d(e));
                    });
                }),
              (p = function () {
                if (u) return (t.selected = a.status(u));
              }),
              (o = function () {
                if (null != u) return c.select(a.status(u));
              }),
              (t.resetSelection = function () {
                if (u) return a.status(u, null, t.componentId);
              }),
              {
                type: "Topology",
                objects: {
                  items: {
                    type: "GeometryCollection",
                    crs: {
                      type: "name",
                      properties: { name: "urn:ogc:def:crs:OGC:1.3:CRS84" },
                    },
                    geometries: [
                      {
                        type: "Polygon",
                        properties: { adm1: 1, label: "PIEMONTE" },
                        id: 1,
                        arcs: [[0, 1, 2, 3, 4, 5, 6]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 2, label: "VALLE D'AOSTA" },
                        id: 2,
                        arcs: [[-6, 7]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 3, label: "LOMBARDIA" },
                        id: 3,
                        arcs: [[8, 9, 10, -2, -1, 11]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 4, label: "TRENTINO-ALTO ADIGE" },
                        id: 4,
                        arcs: [[12, 13, 14, -9, 15]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 5, label: "VENETO" },
                        id: 5,
                        arcs: [[16, 17, 18, -10, -15, -14, -13, 19]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 6, label: "FRIULI VENEZIA GIULIA" },
                        id: 6,
                        arcs: [[-17, 20]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 7, label: "LIGURIA" },
                        id: 7,
                        arcs: [[-4, 21, 22, 23]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 8, label: "EMILIA-ROMAGNA" },
                        id: 8,
                        arcs: [[24, 25, 26, 27, -22, -3, -11, -19, 28], [29]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 9, label: "TOSCANA" },
                        id: 9,
                        arcs: [
                          [[-23, -28, 30, 31, 32, 33, 34]],
                          [[35]],
                          [[36]],
                          [[37]],
                          [[-30]],
                          [[38]],
                          [[39]],
                        ],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 10, label: "UMBRIA" },
                        id: 10,
                        arcs: [[40, 41, -32, 42]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 11, label: "MARCHE" },
                        id: 11,
                        arcs: [[43, 44, -41, -43, -31, -27, 45, -25, 46]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 12, label: "LAZIO" },
                        id: 12,
                        arcs: [[[-34, -33, -42, -45, 47, 48, 49, 50, 51, 52]]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 13, label: "ABRUZZO" },
                        id: 13,
                        arcs: [[53, -49, -48, -44, 54]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 14, label: "MOLISE" },
                        id: 14,
                        arcs: [[55, 56, -51, -50, -54, 57]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 15, label: "CAMPANIA" },
                        id: 15,
                        arcs: [[[-52, -57, 58, 59, 60]], [[61]], [[62]]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 16, label: "PUGLIA" },
                        id: 16,
                        arcs: [[63, -59, -56, 64]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 17, label: "BASILICATA" },
                        id: 17,
                        arcs: [[-60, -64, 65, 66, 67, 68]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 18, label: "CALABRIA" },
                        id: 18,
                        arcs: [[-68, -67, 69]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 19, label: "SICILIA" },
                        id: 19,
                        arcs: [
                          [[70]],
                          [[71]],
                          [[72]],
                          [[73]],
                          [[74]],
                          [[75]],
                          [[76]],
                          [[77]],
                          [[78]],
                          [[79]],
                        ],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 20, label: "SARDEGNA" },
                        id: 20,
                        arcs: [[[80]], [[81]], [[82]], [[83]], [[84]], [[85]]],
                      },
                    ],
                  },
                },
                arcs: [
                  [
                    [1756, 9141],
                    [11, -66],
                    [-133, -104],
                    [21, -58],
                    [-33, -49],
                    [31, -39],
                    [44, -8],
                    [-5, -38],
                    [36, -5],
                    [5, -28],
                    [-24, -1],
                    [37, -32],
                    [-10, -19],
                    [27, -63],
                    [53, -17],
                    [46, -79],
                    [-40, -13],
                    [-64, 0],
                    [38, -24],
                    [-39, -41],
                    [-43, -10],
                    [-8, 29],
                    [-37, 24],
                    [-49, 7],
                    [-14, -36],
                    [-33, -24],
                    [32, -13],
                    [-11, -48],
                    [48, -16],
                    [-29, -18],
                    [75, -80],
                    [0, -41],
                    [19, -21],
                    [39, 18],
                    [57, -27],
                    [44, 35],
                    [62, 2],
                    [3, -37],
                    [21, -21],
                    [29, 5],
                    [8, -38],
                    [29, -35],
                    [54, -32],
                    [-16, -14],
                  ],
                  [
                    [2037, 8066],
                    [25, -32],
                    [64, -4],
                    [13, -32],
                    [36, -16],
                    [-11, -57],
                  ],
                  [
                    [2164, 7925],
                    [1, -63],
                  ],
                  [
                    [2165, 7862],
                    [-40, -33],
                    [-36, 6],
                    [-7, 23],
                    [-43, 10],
                    [-26, 36],
                    [-79, 11],
                    [-38, -33],
                    [23, -20],
                    [7, -46],
                    [-76, 2],
                    [-34, -64],
                    [-56, 80],
                    [-75, 0],
                    [-29, -21],
                    [-18, -40],
                    [-84, 0],
                    [-22, -11],
                    [-38, 11],
                    [-9, -28],
                    [-141, 33],
                    [-25, -44],
                    [22, -27],
                    [-15, -24],
                    [-53, -33],
                    [-33, -57],
                    [-36, 0],
                    [25, -24],
                    [-19, -43],
                    [26, -39],
                    [-25, -29],
                    [-48, 10],
                    [-27, -15],
                    [29, -17],
                    [-109, -13],
                    [-101, 32],
                    [-33, -17],
                    [11, -40],
                    [-20, -11],
                  ],
                  [
                    [913, 7387],
                    [4, 18],
                    [-43, 43],
                    [16, 35],
                    [-43, 3],
                    [-15, -23],
                    [-101, -8],
                    [-60, -24],
                    [-59, 2],
                    [-9, 25],
                    [-69, 2],
                    [-61, 44],
                    [-40, 2],
                    [-61, 29],
                    [-55, 2],
                    [-7, 38],
                    [-34, 15],
                    [-49, 64],
                    [-4, 42],
                    [47, 8],
                    [-61, 45],
                    [-18, 39],
                    [51, 27],
                    [45, 58],
                    [-18, 23],
                    [36, 33],
                    [72, -7],
                    [-9, 27],
                    [-34, 22],
                    [-20, 43],
                    [20, 29],
                    [-78, 34],
                    [-16, -15],
                    [-42, 5],
                    [-94, 48],
                    [13, 46],
                    [-18, 47],
                    [-58, 3],
                    [-11, 46],
                    [-30, 27],
                    [45, 33],
                    [50, -3],
                    [24, 19],
                    [67, -28],
                    [41, 13],
                    [-4, 23],
                    [46, 2],
                    [16, 32],
                    [72, 15],
                    [13, -14],
                    [58, 40],
                    [-22, 61],
                    [41, 28],
                    [22, 37],
                    [-61, 28],
                    [-6, 28],
                  ],
                  [
                    [402, 8598],
                    [27, 43],
                    [15, -27],
                    [56, -13],
                    [40, 38],
                    [90, 2],
                    [97, 58],
                    [62, 6],
                    [94, -33],
                    [47, -2],
                    [97, 45],
                    [44, -10],
                    [-4, 18],
                    [36, 28],
                    [-29, 33],
                    [27, 35],
                    [-63, 60],
                    [11, 60],
                    [-9, 47],
                  ],
                  [
                    [1040, 8986],
                    [12, 49],
                    [26, 20],
                    [58, 2],
                    [47, 38],
                    [0, 50],
                    [61, 9],
                    [40, 29],
                    [10, 32],
                    [-24, 38],
                    [-45, 29],
                    [48, 37],
                    [59, 5],
                    [42, 44],
                    [43, 14],
                    [-19, 28],
                    [56, 34],
                    [68, 14],
                    [23, -16],
                    [-1, -98],
                    [-30, -29],
                    [34, -56],
                    [53, -14],
                    [68, -82],
                    [87, -22],
                  ],
                  [
                    [402, 8598],
                    [-48, 5],
                    [5, 19],
                    [-45, 9],
                    [-20, 72],
                    [20, 45],
                    [-71, 10],
                    [-90, 63],
                    [-7, 43],
                    [14, 53],
                    [51, 10],
                    [54, -1],
                    [40, 18],
                    [25, 42],
                    [22, 5],
                    [59, -55],
                    [31, 18],
                    [29, -18],
                    [34, 29],
                    [27, -2],
                    [26, 26],
                    [76, -20],
                    [101, 55],
                    [30, -5],
                    [9, 26],
                    [33, -13],
                    [65, 4],
                    [58, -44],
                    [16, 14],
                    [40, -20],
                    [54, 0],
                  ],
                  [
                    [3217, 9515],
                    [4, -19],
                    [77, -14],
                    [59, -38],
                    [8, -42],
                    [-52, -18],
                    [-43, -30],
                    [42, -15],
                    [16, -71],
                    [-37, -48],
                    [19, -18],
                    [-19, -56],
                    [-54, -44],
                    [8, -19],
                    [-29, -44],
                    [29, -7],
                    [18, -40],
                    [-14, -37],
                    [14, -49],
                    [29, -5],
                    [15, -31],
                    [72, 19],
                    [7, 23],
                    [75, 9],
                    [81, -8],
                  ],
                  [
                    [3542, 8913],
                    [-108, -129],
                    [-67, -63],
                    [11, -142],
                    [59, -23],
                    [-25, -56],
                    [39, -34],
                    [5, -23],
                    [38, 24],
                    [54, -50],
                    [74, -22],
                    [10, -22],
                    [37, -8],
                    [3, -41],
                    [44, 4],
                    [-6, -36],
                    [48, -15],
                    [41, 27],
                    [35, -14],
                    [-10, -42],
                    [52, -15],
                    [22, 11],
                    [8, -33],
                    [128, -49],
                    [0, -9],
                  ],
                  [
                    [4034, 8153],
                    [-83, 9],
                    [-45, -20],
                    [-29, 6],
                    [-73, -10],
                    [-66, 24],
                    [-11, -10],
                    [-61, 1],
                    [-39, -25],
                    [-161, 22],
                    [-19, 38],
                    [-21, -23],
                    [-14, 18],
                    [-51, -51],
                    [-43, -15],
                    [-45, 2],
                    [-75, 31],
                    [-25, 32],
                    [-30, -16],
                    [-77, 28],
                    [-16, 17],
                    [-75, 23],
                    [-51, -19],
                    [-47, 16],
                    [-16, 45],
                    [-43, 34],
                    [-53, -29],
                    [-1, 34],
                    [-29, -10],
                    [18, -29],
                    [-72, -14],
                    [-50, 30],
                    [-7, -31],
                    [-30, -15],
                    [-68, 24],
                    [-5, 40],
                    [-20, -25],
                    [-29, 2],
                    [-29, -25],
                    [-24, 22],
                    [-55, -8],
                    [-58, -39],
                    [4, -24],
                    [-26, -23],
                    [-25, -50],
                    [-18, -3],
                    [-2, -43],
                    [44, -12],
                    [17, -39],
                    [-64, -56],
                    [38, -20],
                    [-7, -40],
                    [-103, -2],
                  ],
                  [
                    [1756, 9141],
                    [23, 22],
                    [53, -18],
                    [41, -34],
                    [-54, -49],
                    [86, -41],
                    [47, -99],
                    [69, -19],
                    [21, 47],
                    [28, 21],
                    [-58, 25],
                    [-27, 36],
                    [33, 20],
                    [-9, 48],
                    [52, 13],
                    [-7, 48],
                    [43, 12],
                    [61, 38],
                    [22, 44],
                    [62, 75],
                    [-12, 84],
                    [-27, 29],
                    [28, 43],
                    [71, 10],
                    [40, -36],
                    [40, 35],
                    [-5, -78],
                    [9, -38],
                    [24, -6],
                    [47, -55],
                    [77, -13],
                    [28, 14],
                    [33, -9],
                    [7, 41],
                    [40, -4],
                    [116, 39],
                    [37, -1],
                    [38, -26],
                    [-14, -24],
                    [15, -34],
                    [49, -18],
                    [11, -38],
                    [54, 7],
                    [36, 29],
                    [-50, 48],
                    [-7, 32],
                    [47, 34],
                    [-30, 35],
                    [-27, -10],
                    [-48, 22],
                    [12, 73],
                    [66, 65],
                    [91, 25],
                    [3, -49],
                    [47, -25],
                    [100, 2],
                    [29, -18],
                  ],
                  [
                    [4919, 9643],
                    [-37, -9],
                    [-38, -38],
                    [-41, 5],
                    [-45, -11],
                    [-21, 10],
                    [-58, -30],
                    [2, 21],
                    [-42, 13],
                    [-64, 36],
                    [-3, -45],
                    [-56, -79],
                    [-73, 0],
                    [-81, -28],
                    [-2, -18],
                    [52, -5],
                    [12, -26],
                    [-33, -7],
                    [-15, -47],
                    [-49, -18],
                    [57, -46],
                    [-4, -30],
                    [41, 6],
                    [20, -47],
                    [44, -20],
                    [-28, -21],
                    [-30, -47],
                    [-100, -13],
                  ],
                  [
                    [4327, 9149],
                    [-77, -14],
                    [21, -38],
                    [-32, -24],
                    [5, -47],
                    [-73, 5],
                    [-9, 32],
                    [-75, 1],
                    [-36, -24],
                    [-62, 2],
                    [8, -35],
                    [-30, -28],
                    [-27, 18],
                    [-47, -9],
                    [-14, -38],
                  ],
                  [
                    [3879, 8950],
                    [-1, -17],
                    [-55, -59],
                    [4, -42],
                    [-34, -36],
                    [-39, -2],
                    [-30, 20],
                    [-49, -8],
                    [-51, -31],
                    [-41, 37],
                    [-38, 2],
                    [33, 86],
                    [-36, 13],
                  ],
                  [
                    [3217, 9515],
                    [15, 10],
                    [13, 62],
                    [-35, 23],
                    [-37, -2],
                    [-15, 39],
                    [50, 59],
                    [-15, 32],
                    [22, 13],
                    [16, 44],
                    [70, -5],
                    [97, 23],
                    [80, -46],
                    [-28, -30],
                    [48, 6],
                    [85, -27],
                    [24, 10],
                    [87, -10],
                    [16, 36],
                    [37, 15],
                    [-9, 30],
                    [35, 63],
                    [123, 43],
                    [82, 9],
                    [40, -22],
                    [60, 38],
                    [50, -22],
                    [75, 25],
                    [35, -18],
                    [37, 1],
                    [30, -21],
                    [28, 20],
                    [47, 1],
                    [68, 35],
                    [131, 22],
                    [94, 28],
                    [46, -19],
                    [-29, -36],
                    [-71, -18],
                    [9, -38],
                    [31, -26],
                    [-20, -16],
                    [42, -9],
                    [17, -27],
                    [43, 13],
                    [34, -47],
                    [-19, -44],
                    [61, -6],
                    [18, -46],
                    [84, -37],
                  ],
                  [
                    [5132, 9604],
                    [10, -51],
                    [-22, -25],
                    [-72, -29],
                    [26, -37],
                    [-77, 6],
                    [-54, -30],
                    [-36, -62],
                    [-43, -32],
                    [-48, -11],
                    [-27, -56],
                    [69, -42],
                    [33, 0],
                    [11, -30],
                    [28, -13],
                    [-5, -44],
                    [-48, -24],
                    [-24, -31],
                    [25, -41],
                    [-3, -40],
                    [61, -19],
                    [76, -95],
                    [15, 19],
                    [57, -39],
                    [47, 39],
                    [44, 14],
                    [31, -25],
                    [47, 22],
                    [15, -26],
                    [50, 1],
                    [65, -73],
                    [12, -46],
                    [47, -34],
                  ],
                  [
                    [5442, 8750],
                    [-4, -8],
                    [-156, -16],
                    [-15, -13],
                    [-130, -59],
                    [-240, -80],
                    [-44, -8],
                    [-58, -67],
                    [-26, -80],
                    [0, -40],
                    [28, -44],
                    [-5, -33],
                    [25, -50],
                    [72, -46],
                    [88, -33],
                    [-31, -38],
                    [-36, -72],
                    [-61, -45],
                  ],
                  [
                    [4849, 8018],
                    [-35, 20],
                    [-8, 25],
                    [-48, 21],
                    [6, 50],
                    [-31, 11],
                    [-24, -16],
                    [-48, 16],
                    [-24, -12],
                    [-26, 29],
                    [-129, 21],
                    [-25, -10],
                    [-105, 3],
                    [-47, -16],
                    [-2, -21],
                    [-64, -17],
                    [-40, -23],
                    [-73, 41],
                    [-89, -6],
                    [-3, 19],
                  ],
                  [
                    [4919, 9643],
                    [69, -24],
                    [53, 9],
                    [58, -5],
                    [33, -19],
                  ],
                  [
                    [5132, 9604],
                    [21, 11],
                    [68, -16],
                    [13, -20],
                    [194, -2],
                    [69, -11],
                    [74, -25],
                    [56, -7],
                    [47, 23],
                    [43, -19],
                    [65, 8],
                    [176, -37],
                    [-25, -75],
                    [-77, 0],
                    [-47, -44],
                    [-74, -19],
                    [-1, -23],
                    [-38, -32],
                    [-22, -1],
                    [39, -58],
                    [118, -23],
                    [1, -15],
                    [83, -7],
                    [-15, -36],
                    [-60, -41],
                    [-64, -28],
                    [-19, -44],
                    [56, -37],
                    [44, 23],
                    [36, -2],
                    [1, -45],
                    [-54, -76],
                    [19, -34],
                    [52, -7],
                    [73, -39],
                    [44, -10],
                    [32, -49],
                    [70, -47],
                    [-64, -42],
                    [-51, 1],
                    [-53, 19],
                    [58, -5],
                    [-29, 68],
                    [-102, 76],
                    [-75, 22],
                    [-18, -24],
                    [28, -31],
                    [-109, -45],
                    [-30, -1],
                    [-72, 25],
                    [-53, 10],
                    [-77, -15],
                    [-41, -48],
                  ],
                  [
                    [2165, 7862],
                    [37, -13],
                    [45, 9],
                    [34, -27],
                    [35, -1],
                    [19, 21],
                    [29, -30],
                    [32, 0],
                    [23, -31],
                    [-8, -40],
                    [-22, -1],
                    [-21, -57],
                    [118, 10],
                    [59, -14],
                    [28, -39],
                  ],
                  [
                    [2573, 7649],
                    [100, -72],
                    [37, -10],
                    [21, -41],
                    [-16, -27],
                    [43, 15],
                    [18, -12],
                    [-31, -24],
                    [63, 1],
                    [23, -43],
                    [64, -23],
                    [-43, -41],
                  ],
                  [
                    [2852, 7372],
                    [-47, -7],
                    [-94, 62],
                    [-25, -15],
                    [10, -37],
                    [-79, 38],
                    [-61, 43],
                    [-26, -7],
                    [-25, 32],
                    [-33, 10],
                    [-61, 45],
                    [-77, 18],
                    [-32, 36],
                    [-115, 44],
                    [-8, -44],
                    [-56, 16],
                    [-11, 39],
                    [-153, 24],
                    [-60, 15],
                    [-120, 18],
                    [-99, -48],
                    [-97, -38],
                    [-53, -37],
                    [7, -21],
                    [-33, -33],
                    [5, -26],
                    [-128, -45],
                    [-36, -51],
                    [-1, -33],
                    [-46, -34],
                    [3, -42],
                    [-176, -89],
                    [-130, -25],
                    [-60, -24],
                    [-34, 4],
                    [-20, -18],
                    [-83, 13],
                    [-40, -8],
                    [-29, 61],
                    [7, 18],
                    [51, 21],
                    [2, 37],
                    [74, 27],
                    [7, 46],
                    [43, 30],
                  ],
                  [
                    [5148, 7306],
                    [-19, -38],
                    [-2, -55],
                    [-36, -6],
                    [-1, -22],
                    [-49, -6],
                    [-28, 56],
                    [-40, -20],
                    [1, 22],
                    [-41, 24],
                  ],
                  [
                    [4933, 7261],
                    [18, 22],
                    [-1, 43],
                    [-93, -33],
                    [12, -47],
                  ],
                  [
                    [4869, 7246],
                    [-60, -28],
                    [-9, -36],
                    [-44, -26],
                    [0, -25],
                  ],
                  [
                    [4756, 7131],
                    [-63, -8],
                    [-12, -22],
                    [-26, 27],
                    [-73, -19],
                    [-76, 19],
                    [-65, 43],
                    [-57, -4],
                    [-44, 32],
                    [-66, 28],
                    [6, 38],
                    [-61, 58],
                    [86, 99],
                    [-2, 19],
                    [-56, -1],
                    [-22, -19],
                    [-53, 20],
                    [17, 29],
                    [-89, 3],
                    [-47, 31],
                    [-22, 36],
                    [-33, -33],
                    [-34, 4],
                    [-51, -45],
                    [-75, -6],
                    [60, -38],
                    [-85, 8],
                    [-95, -19],
                    [-40, 17],
                    [4, 25],
                    [-75, -66],
                    [-32, 31],
                    [-26, -1],
                    [-77, 48],
                    [-97, 6],
                    [-14, -35],
                    [-29, -4],
                    [-55, 36],
                    [-28, 53],
                    [-44, 6],
                    [-57, 38],
                    [-63, 14],
                    [-36, -15],
                    [-27, 31],
                    [-67, 44],
                    [-43, -1],
                    [-86, 44],
                    [15, 22],
                    [-30, 30],
                    [-39, 6],
                    [-87, -5],
                    [-65, -75],
                    [-47, -11],
                  ],
                  [
                    [4849, 8018],
                    [-60, 2],
                    [14, 18],
                    [-44, 21],
                    [-33, -68],
                    [-7, -62],
                    [30, -61],
                    [10, -131],
                    [22, -54],
                    [35, -114],
                    [31, -52],
                    [104, -94],
                    [51, -24],
                    [41, -39],
                    [73, -48],
                    [32, -6],
                  ],
                  [
                    [4706, 7170],
                    [-47, -4],
                    [14, -28],
                    [44, 12],
                    [-11, 20],
                  ],
                  [
                    [4756, 7131],
                    [36, -13],
                    [35, -30],
                    [-32, -7],
                    [-122, -58],
                    [24, -25],
                  ],
                  [
                    [4697, 6998],
                    [-43, -44],
                    [-8, -27],
                    [-42, 1],
                    [-6, -28],
                    [39, -24],
                    [-98, -47],
                    [37, -10],
                    [3, -30],
                    [32, 1],
                    [20, -23],
                    [-3, -43],
                    [37, -10],
                    [15, 27],
                    [26, -16],
                    [-110, -50],
                    [-39, 15],
                    [-17, -55],
                    [-88, -36],
                    [-8, -17],
                    [19, -63],
                    [38, 1],
                    [-41, -128],
                    [22, -33],
                    [-27, -2],
                    [-26, -28],
                  ],
                  [
                    [4429, 6329],
                    [-69, -12],
                    [-2, -20],
                    [-36, 19],
                    [-18, -29],
                    [61, -35],
                    [-15, -33],
                  ],
                  [
                    [4350, 6219],
                    [-14, -31],
                    [21, -16],
                    [-49, -12],
                    [-14, -25],
                    [-99, -43],
                    [-24, 10],
                    [-23, -47],
                    [47, -25],
                    [1, -46],
                    [-109, 4],
                    [-31, -50],
                  ],
                  [
                    [4056, 5938],
                    [-171, 32],
                    [-29, -6],
                    [-21, -42],
                    [-26, -1],
                    [-51, 26],
                    [0, 42],
                    [55, -5],
                    [25, 67],
                    [-28, 42],
                    [-36, 4],
                    [-25, 52],
                    [-64, 29],
                    [-27, 49],
                    [-30, 22],
                    [-59, 19],
                    [-74, 10],
                    [-25, 27],
                    [27, 69],
                    [-36, 35],
                    [-55, 18],
                    [-72, 4],
                    [-38, -6],
                    [-4, -23],
                    [-36, 14],
                    [-14, 44],
                    [21, 3],
                    [22, 62],
                    [4, 91],
                    [-8, 51],
                    [-24, 54],
                    [-38, 33],
                    [-26, 60],
                    [-36, 42],
                    [-32, 15],
                    [-42, 76],
                    [6, 18],
                    [-24, 86],
                    [0, 73],
                    [-25, 91],
                    [-65, 83],
                    [-86, 59],
                    [-37, 15],
                  ],
                  [
                    [3187, 6357],
                    [22, -17],
                    [-8, -63],
                    [-42, -13],
                    [40, -22],
                    [-11, -23],
                    [-36, 10],
                    [-15, 34],
                    [-57, -4],
                    [-3, -17],
                    [-39, 13],
                    [-3, -20],
                    [-97, 14],
                    [-15, 38],
                    [69, 21],
                    [48, -20],
                    [23, 33],
                    [52, -8],
                    [22, -16],
                    [40, 62],
                    [10, -2],
                  ],
                  [
                    [3581, 5945],
                    [38, -45],
                    [-12, -16],
                    [-29, 29],
                    [3, 32],
                  ],
                  [
                    [2696, 6515],
                    [7, -22],
                    [-28, -20],
                    [-15, 18],
                    [29, 43],
                    [7, -19],
                  ],
                  [
                    [3101, 5912],
                    [14, -25],
                    [-29, -7],
                    [15, 32],
                  ],
                  [
                    [2913, 6120],
                    [-3, -22],
                    [-37, 12],
                    [40, 10],
                  ],
                  [
                    [5272, 6509],
                    [-1, -69],
                    [66, -31],
                    [0, -50],
                    [22, 33],
                    [44, 10],
                    [49, -26],
                    [41, -50],
                    [70, 23],
                    [17, -43],
                    [-25, -31],
                    [-33, -10],
                    [-5, -24],
                  ],
                  [
                    [5517, 6241],
                    [-14, -58],
                    [-36, -5],
                    [-57, -33],
                    [-32, 15],
                    [-16, -20],
                    [-44, 3],
                    [-61, -15],
                    [11, -34],
                    [-100, -43],
                    [-53, -10],
                    [26, -27],
                    [-65, -25],
                    [-42, 20],
                    [0, -44],
                    [-72, -43],
                    [-9, 31],
                    [-45, -3],
                    [0, 29],
                    [-40, -6],
                    [9, 56],
                    [-32, 10],
                    [-32, -22],
                    [-62, 29],
                    [-2, 46],
                    [-30, 9],
                    [3, 50],
                    [-69, 42],
                    [-30, -24],
                    [-80, 0],
                    [-75, 29],
                    [-9, 27],
                    [40, 43],
                    [-43, 14],
                    [-27, 47],
                  ],
                  [
                    [4697, 6998],
                    [9, -16],
                    [70, -2],
                    [52, 18],
                    [3, -23],
                    [-51, -36],
                    [45, -7],
                    [28, -22],
                    [18, 23],
                    [31, -17],
                    [36, 5],
                    [45, -46],
                    [60, -42],
                    [31, 15],
                    [39, -11],
                    [19, 33],
                    [31, -3],
                    [5, -49],
                    [-23, -10],
                    [47, -71],
                    [-11, -21],
                    [30, -15],
                    [10, -43],
                    [22, -5],
                    [0, -38],
                    [-28, -18],
                    [10, -20],
                    [34, -1],
                    [13, -67],
                  ],
                  [
                    [6128, 6379],
                    [-163, -33],
                    [-20, -29],
                    [-47, -15],
                    [-60, -4],
                    [-31, 14],
                    [-37, -71],
                    [-35, -1],
                    [-11, -28],
                    [-65, -5],
                  ],
                  [
                    [5659, 6207],
                    [-60, 41],
                    [-30, -16],
                    [-52, 9],
                  ],
                  [
                    [4869, 7246],
                    [58, -3],
                    [6, 18],
                  ],
                  [
                    [5148, 7306],
                    [40, -3],
                    [92, -37],
                    [67, -49],
                    [67, -37],
                    [56, -43],
                    [121, -76],
                    [135, -61],
                    [37, -6],
                    [40, 13],
                    [48, -50],
                    [33, -11],
                    [-3, -40],
                    [34, -58],
                    [41, -91],
                    [19, -18],
                    [95, -190],
                    [29, -110],
                    [29, -60],
                  ],
                  [
                    [5659, 6207],
                    [10, -38],
                    [32, -6],
                    [-22, -53],
                    [-112, -7],
                    [-48, 13],
                    [-13, -37],
                    [2, -57],
                    [-52, -30],
                    [61, -38],
                    [-31, -37],
                    [61, -33],
                    [14, -42],
                    [116, -77],
                    [-47, -18],
                  ],
                  [
                    [5630, 5747],
                    [-15, -19],
                    [-48, -10],
                    [-48, 28],
                    [-88, 16],
                    [0, -29],
                    [-42, -21],
                    [-16, -36],
                    [33, -53],
                    [40, 9],
                    [153, -66],
                    [20, 1],
                    [61, -43],
                    [-18, -24],
                    [4, -35],
                    [71, -8],
                    [45, -19],
                    [14, -25],
                    [44, -17],
                    [75, 51],
                    [44, -13],
                    [28, -31],
                    [143, -36],
                    [19, -28],
                  ],
                  [
                    [6149, 5339],
                    [40, -29],
                    [19, -39],
                    [-11, -24],
                    [22, -22],
                  ],
                  [
                    [6219, 5225],
                    [3, -28],
                    [-47, -25],
                    [5, -27],
                  ],
                  [
                    [6180, 5145],
                    [-56, -29],
                    [-41, -9],
                    [20, -29],
                    [-11, -42],
                    [8, -39],
                    [-47, -11],
                    [-8, -29],
                    [-39, -2],
                    [-8, -16],
                  ],
                  [
                    [5998, 4939],
                    [-42, 25],
                    [-23, -6],
                    [-54, 14],
                    [-37, -17],
                    [-22, -30],
                    [-147, 65],
                    [-88, 12],
                    [-97, -24],
                    [-51, -38],
                    [-45, 5],
                    [-25, 57],
                    [-41, 48],
                    [-93, 52],
                    [-76, -1],
                    [-77, 39],
                    [-39, -10],
                    [-59, 78],
                    [-97, 92],
                    [-72, 48],
                    [-107, 41],
                    [0, 31],
                    [-22, 51],
                    [-48, 66],
                    [-76, 34],
                    [-23, 24],
                    [-99, 49],
                    [-59, -10],
                    [-24, 45],
                    [-31, 23],
                    [-63, 110],
                    [-53, 52],
                    [-61, 35],
                    [-91, 39],
                  ],
                  [
                    [6854, 5669],
                    [3, -32],
                    [-47, -25],
                    [-52, -55],
                    [-1, -20],
                    [-43, -23],
                    [-14, -34],
                    [-92, -79],
                    [-18, 15],
                    [-20, 55],
                    [-55, 34],
                    [-15, -16],
                    [-30, 30],
                    [-38, 11],
                    [-51, -48],
                    [-51, -11],
                    [16, -65],
                    [-44, -15],
                    [-11, -33],
                    [-34, 24],
                    [-13, -30],
                    [-29, -18],
                    [-66, 5],
                  ],
                  [
                    [6128, 6379],
                    [24, -78],
                    [42, -81],
                    [92, -122],
                    [69, -63],
                    [63, -46],
                    [125, -71],
                    [27, -40],
                    [52, -36],
                    [8, -19],
                    [96, -44],
                    [76, -23],
                    [0, -57],
                    [52, -30],
                  ],
                  [
                    [7155, 5546],
                    [1, -41],
                    [-33, -36],
                    [13, -41],
                    [-16, -22],
                    [21, -39],
                    [34, -9],
                    [-95, -47],
                    [-20, -29],
                    [-58, 19],
                    [-18, -19],
                    [14, -24],
                    [-12, -57],
                    [60, -35],
                  ],
                  [
                    [7046, 5166],
                    [-53, -27],
                    [-83, -25],
                    [-52, 23],
                    [-16, -31],
                    [-45, -14],
                    [-34, 5],
                    [-57, -36],
                    [-95, 21],
                    [-7, 22],
                    [-130, 34],
                    [-73, 38],
                    [-63, -4],
                    [-34, 13],
                    [-36, -37],
                    [23, -69],
                    [-58, 7],
                    [-53, 59],
                  ],
                  [
                    [6854, 5669],
                    [103, -42],
                    [77, -14],
                    [73, -55],
                    [48, -12],
                  ],
                  [
                    [7046, 5166],
                    [21, -29],
                    [55, -17],
                    [0, -37],
                    [-33, -15],
                    [11, -34],
                    [49, -13],
                    [16, -33],
                    [43, 5],
                    [41, -12],
                    [26, -27],
                    [-29, -4],
                    [13, -33],
                    [-44, -25],
                    [49, -53],
                    [83, -19],
                    [26, 19],
                    [41, -26],
                    [82, -19],
                  ],
                  [
                    [7496, 4794],
                    [17, -20],
                    [3, -53],
                    [-34, -55],
                    [-48, -13],
                    [3, -16],
                    [-48, 8],
                    [-31, -13],
                    [-1, -26],
                    [-36, -2],
                    [45, -34],
                    [-6, -62],
                    [41, -27],
                    [60, -22],
                    [-43, -51],
                    [49, -18],
                    [31, -48],
                    [-6, -37],
                    [41, -39],
                    [103, -57],
                    [-4, -30],
                    [30, -33],
                    [43, -12],
                    [4, -58],
                    [-55, -19],
                    [-25, -34],
                    [4, -37],
                    [-51, -65],
                  ],
                  [
                    [7582, 3921],
                    [-14, 27],
                    [-96, -4],
                    [-46, -30],
                    [-33, -37],
                    [-66, 11],
                    [-48, 26],
                    [-7, 29],
                    [-56, 46],
                    [-27, 6],
                    [-42, 39],
                    [-52, -7],
                    [-34, 11],
                    [-30, 35],
                    [-46, 8],
                    [-24, 23],
                    [31, 19],
                    [3, 53],
                    [44, 19],
                    [0, 25],
                    [-82, 141],
                    [-47, 58],
                    [-74, 50],
                    [-34, -9],
                    [-33, -29],
                    [-45, 12],
                    [-80, -35],
                    [-29, 18],
                    [-64, -16],
                    [-80, -35],
                    [22, 57],
                    [47, 8],
                    [35, 38],
                    [29, 10],
                    [-29, 48],
                    [-41, 1],
                    [-78, 65],
                    [-35, 11],
                    [-36, -14],
                    [-30, -31],
                    [-21, 21],
                    [-69, 9],
                    [10, -42],
                    [-38, 9],
                    [-2, 71],
                    [-34, 67],
                    [-68, 66],
                    [-16, 43],
                    [-57, 76],
                    [-62, 51],
                  ],
                  [
                    [6091, 4541],
                    [70, -19],
                    [8, -23],
                    [-77, -14],
                    [-18, 13],
                    [17, 43],
                  ],
                  [
                    [6418, 4369],
                    [-53, -22],
                    [2, 22],
                    [51, 0],
                  ],
                  [
                    [8609, 4228],
                    [-48, 29],
                    [-4, 21],
                    [-72, 21],
                    [15, 19],
                    [-27, 41],
                    [18, 43],
                    [-14, 30],
                    [13, 67],
                    [-78, 36],
                    [-49, 7],
                    [-26, -33],
                    [-36, 32],
                    [-18, -22],
                    [-55, -30],
                    [-82, 71],
                    [-33, 15],
                    [-39, 47],
                    [-24, 53],
                    [-33, 11],
                    [-35, -27],
                    [-19, 16],
                    [-99, 32],
                    [43, 38],
                    [4, 35],
                    [-33, 13],
                    [-17, 34],
                    [-91, 41],
                    [-31, -9],
                    [-28, -33],
                    [-39, 5],
                    [-61, -10],
                    [-84, 10],
                    [-31, -37],
                  ],
                  [
                    [7155, 5546],
                    [167, -9],
                    [38, -13],
                    [98, 5],
                    [117, 18],
                    [58, -13],
                    [181, 17],
                    [79, 15],
                    [58, -8],
                    [57, -29],
                    [40, -70],
                    [-11, -46],
                    [-95, -53],
                    [-7, -13],
                    [-136, -67],
                    [-8, -37],
                    [26, -71],
                    [47, -42],
                    [190, -73],
                    [50, -28],
                    [78, -19],
                    [75, -37],
                    [59, -16],
                    [53, -31],
                    [164, -40],
                    [157, -55],
                    [77, -18],
                    [123, -63],
                    [65, -28],
                    [73, -62],
                    [15, -4],
                    [93, -62],
                    [86, -30],
                    [93, -25],
                    [89, -50],
                    [51, -14],
                    [58, -2],
                    [8, -30],
                    [53, -8],
                    [25, -36],
                    [-8, -19],
                    [38, -43],
                    [50, -33],
                    [53, -16],
                    [39, -27],
                    [115, -105],
                    [37, -24],
                    [28, -51],
                    [-5, -18],
                    [53, -86],
                    [-31, -26],
                    [-11, -32],
                    [-29, -14],
                    [-23, -39],
                    [-15, -60],
                    [-1, -81],
                    [-36, -20],
                    [-69, 39],
                    [-47, 0],
                    [-52, 23],
                    [-83, 56],
                    [-45, 58],
                    [21, 27],
                    [-25, 26],
                    [18, 24],
                    [-13, 41],
                    [-59, 44],
                    [-1, 28],
                    [-50, 57],
                    [-165, 19],
                    [-135, -9],
                    [-49, 28],
                    [-40, 5],
                    [-113, 51],
                    [-56, 18],
                    [46, 26],
                    [-30, 32],
                    [-32, 1],
                    [-49, 33],
                    [-71, -6],
                    [-63, -28],
                    [-82, -70],
                  ],
                  [
                    [8609, 4228],
                    [-68, -82],
                    [-42, -81],
                    [-40, -54],
                    [-38, -24],
                  ],
                  [
                    [8421, 3987],
                    [-47, 13],
                    [-52, -13],
                    [-46, 13],
                    [-52, -11],
                    [5, -32],
                    [-19, -37],
                    [5, -23],
                    [-51, -68],
                    [10, -32],
                    [-30, 28],
                    [-84, -4],
                    [1, -26],
                    [-47, 20],
                    [-93, -21],
                    [-23, 34],
                  ],
                  [
                    [7898, 3828],
                    [-12, 21],
                    [20, 29],
                    [-45, -5],
                    [-46, 12],
                    [-21, -17],
                    [-39, 22],
                    [-26, -4],
                    [-42, -37],
                    [-12, -30],
                  ],
                  [
                    [7675, 3819],
                    [-21, 34],
                    [-72, 68],
                  ],
                  [
                    [8421, 3987],
                    [-33, -35],
                    [-5, -33],
                    [23, -74],
                    [-80, -79],
                    [-29, -40],
                    [-7, -45],
                    [35, -34],
                    [-9, -49],
                    [87, -40],
                    [125, 0],
                    [79, -70],
                    [91, -42],
                    [43, -6],
                    [11, -24],
                    [66, -43],
                    [35, -4],
                    [-38, -71],
                    [-6, -53],
                    [37, -44],
                    [-32, -69],
                    [20, -59],
                    [52, -27],
                    [-28, -30],
                    [6, -31],
                    [-62, -49],
                    [-119, 34],
                    [-143, -34],
                    [-144, -70],
                    [-40, -46],
                    [-26, -54],
                    [20, -19],
                    [20, -195],
                    [-22, -37],
                    [-81, -64],
                    [-118, -41],
                    [-100, -106],
                    [-30, -26],
                    [-19, -94],
                    [-39, -62],
                    [-30, -26],
                    [-55, -8],
                    [-53, 10],
                    [-142, -10],
                    [-72, 33],
                    [-35, 46],
                    [15, 20],
                    [-19, 62],
                    [18, 47],
                    [-17, 24],
                    [2, 38],
                    [86, 20],
                    [48, 23],
                    [30, 39],
                    [5, 33],
                    [22, 19],
                    [38, 71],
                    [18, 71],
                    [-86, 65],
                    [18, 29],
                    [84, 28],
                    [27, 25],
                    [33, 5],
                    [72, -12],
                    [36, 11],
                    [37, 32],
                    [25, 73],
                    [-1, 57],
                    [-57, 36],
                    [-47, 68],
                    [-25, 86],
                    [-13, 143],
                    [-48, 127],
                    [-58, 70],
                    [-36, 14],
                    [-62, 162],
                    [-32, 94],
                    [18, 21],
                    [-30, 51],
                  ],
                  [
                    [4889, 1978],
                    [37, 73],
                    [-23, 31],
                    [27, 37],
                    [23, 59],
                    [45, 43],
                    [57, 4],
                    [30, 34],
                    [28, -5],
                    [24, 28],
                    [-7, 42],
                    [33, -8],
                    [19, -62],
                    [30, -37],
                    [56, -35],
                    [79, 15],
                    [77, 39],
                    [-22, 45],
                    [47, 44],
                    [62, -19],
                    [75, 25],
                    [39, 22],
                    [35, -28],
                    [5, -57],
                    [65, -27],
                    [77, 12],
                    [3, -41],
                    [25, -20],
                    [118, -51],
                    [38, -6],
                    [84, 14],
                    [78, 35],
                    [65, 12],
                    [33, -19],
                    [68, 4],
                    [69, -12],
                    [115, 4],
                    [55, 23],
                    [37, -8],
                    [71, 24],
                    [63, 9],
                    [46, 31],
                    [51, 50],
                    [35, -11],
                    [85, 18],
                    [22, 17],
                    [43, -34],
                    [65, 0],
                    [49, -26],
                    [67, 31],
                    [50, 51],
                    [49, -9],
                    [46, 9],
                    [79, 29],
                    [60, 39],
                    [110, -28],
                    [-55, -15],
                    [-30, -67],
                    [-47, -81],
                    [-159, -171],
                    [1, -22],
                    [-79, -85],
                    [6, -34],
                    [-21, -58],
                    [-16, -11],
                    [2, -50],
                    [-73, -64],
                    [-4, -32],
                    [9, -119],
                    [83, -37],
                    [7, 9],
                    [45, -46],
                    [-56, -6],
                    [-3, -37],
                    [28, -50],
                    [64, -22],
                    [-17, -58],
                    [33, -2],
                    [18, -30],
                    [-28, 11],
                    [-30, -11],
                    [-7, -25],
                    [-42, -8],
                    [-43, -38],
                    [-17, -45],
                    [-27, -30],
                    [-9, -49],
                    [37, -79],
                    [-47, -30],
                    [-47, 43],
                    [-60, -5],
                    [-32, 24],
                    [-40, 9],
                    [-73, -24],
                    [-33, 15],
                    [-36, -4],
                    [-52, 38],
                    [-70, 18],
                    [-54, 5],
                    [-25, 25],
                    [-22, 57],
                    [-43, 63],
                    [-71, 68],
                    [-34, 20],
                    [-87, 33],
                    [-84, 13],
                    [-67, -1],
                    [-38, -13],
                    [-38, 4],
                    [-54, 39],
                    [-59, 4],
                    [-73, 39],
                    [-10, 19],
                    [-81, 58],
                    [-63, 4],
                    [-47, 15],
                    [-17, 22],
                    [-113, 52],
                    [-46, 58],
                    [-51, 33],
                    [-65, 8],
                    [-49, -9],
                    [-55, 62],
                    [-78, 12],
                    [-82, -2],
                    [-77, -18],
                    [-43, 46],
                    [-6, 20],
                    [-46, 23],
                    [-36, -1],
                    [-39, 38],
                    [1, 33],
                    [-25, 39],
                  ],
                  [
                    [4493, 1156],
                    [36, -8],
                    [33, -28],
                    [1, -28],
                    [-23, -21],
                    [-30, 1],
                    [-55, 56],
                    [7, 26],
                    [31, 2],
                  ],
                  [
                    [7006, 2611],
                    [2, -62],
                    [-18, -6],
                    [-37, 37],
                    [6, 21],
                    [47, 10],
                  ],
                  [
                    [6926, 2662],
                    [5, -39],
                    [-57, 15],
                    [3, 24],
                    [49, 0],
                  ],
                  [
                    [7008, 2523],
                    [29, -22],
                    [-4, -24],
                    [-32, 13],
                    [7, 33],
                  ],
                  [
                    [4963, 31],
                    [82, -8],
                    [4, -23],
                    [-97, 23],
                    [11, 8],
                  ],
                  [
                    [4750, 2103],
                    [25, 18],
                    [14, -22],
                    [39, -6],
                    [-70, -5],
                    [-8, 15],
                  ],
                  [
                    [7220, 2826],
                    [-23, 16],
                    [24, 19],
                    [23, -9],
                    [-24, -26],
                  ],
                  [
                    [4571, 2152],
                    [16, -40],
                    [-22, 7],
                    [-23, 35],
                    [29, -2],
                  ],
                  [
                    [4894, 2070],
                    [-2, -44],
                    [-13, 44],
                    [15, 0],
                  ],
                  [
                    [1326, 4385],
                    [-10, 33],
                    [-26, -49],
                    [-13, 56],
                    [35, 11],
                    [15, 39],
                    [-61, 41],
                    [72, 117],
                    [0, 27],
                    [-36, 28],
                    [24, 34],
                    [29, -15],
                    [-3, -41],
                    [65, -53],
                    [84, -5],
                    [71, -16],
                    [69, 15],
                    [44, 38],
                    [68, 31],
                    [65, 3],
                    [70, 63],
                    [6, 30],
                    [30, 6],
                    [82, 77],
                    [81, 8],
                    [52, 36],
                    [-14, 15],
                    [22, 46],
                    [46, 9],
                    [30, -19],
                    [26, -39],
                    [51, 15],
                    [6, -21],
                    [46, -8],
                    [14, -61],
                    [27, 27],
                    [45, 19],
                    [15, -38],
                    [22, -10],
                    [-35, -23],
                    [-21, -56],
                    [49, 24],
                    [-10, -25],
                    [38, 13],
                    [13, -17],
                    [-24, -24],
                    [-6, -42],
                    [-57, 0],
                    [-1, -14],
                    [48, 6],
                    [22, -16],
                    [46, 15],
                    [-25, -24],
                    [62, -44],
                    [-15, -45],
                    [40, -32],
                    [-4, -33],
                    [25, -17],
                    [7, -77],
                    [62, -61],
                    [0, -16],
                    [-55, -109],
                    [-36, -17],
                    [-43, -39],
                    [-36, -66],
                    [8, -56],
                    [43, -58],
                    [42, -22],
                    [-39, -88],
                    [-2, -29],
                    [25, -15],
                    [-22, -15],
                    [7, -54],
                    [-19, -35],
                    [1, -88],
                    [-25, -51],
                    [10, -45],
                    [-22, -85],
                    [11, -34],
                    [-37, -79],
                    [1, -40],
                    [22, -14],
                    [-47, -53],
                    [-8, -44],
                    [14, -11],
                    [-18, -41],
                    [-45, -20],
                    [-17, 22],
                    [-38, -13],
                    [-59, 47],
                    [-60, 33],
                    [-88, 6],
                    [-39, -33],
                    [-44, 27],
                    [-62, -56],
                    [-3, -54],
                    [25, -24],
                    [-18, -47],
                    [-100, -84],
                    [-43, -24],
                    [-51, 14],
                    [-62, 37],
                    [-58, -36],
                    [-38, -4],
                    [14, 40],
                    [-48, 54],
                    [-3, 39],
                    [-29, 12],
                    [-51, -3],
                    [-19, -74],
                    [-25, -13],
                    [-46, 71],
                    [0, 63],
                    [54, -1],
                    [34, -46],
                    [20, 24],
                    [-39, 27],
                    [-4, 33],
                    [-60, 64],
                    [60, 54],
                    [-14, 37],
                    [-37, 30],
                    [29, 43],
                    [-24, 33],
                    [52, 67],
                    [22, 53],
                    [-17, 24],
                    [-5, 116],
                    [12, 10],
                    [36, -48],
                    [8, 34],
                    [29, 35],
                    [7, 37],
                    [-26, 57],
                    [-47, 0],
                    [-21, -19],
                    [-36, 19],
                    [-5, 66],
                    [11, 43],
                    [-25, 5],
                    [70, 17],
                    [28, 27],
                    [-29, 55],
                    [3, 54],
                    [18, 63],
                    [-17, 26],
                    [-69, 19],
                    [17, 62],
                    [-28, 75],
                    [-25, 10],
                    [-43, 75],
                    [-37, -22],
                    [-33, 9],
                  ],
                  [
                    [1342, 4778],
                    [51, 34],
                    [-11, 20],
                    [42, 18],
                    [25, -27],
                    [-14, -32],
                    [-43, 11],
                    [-29, -32],
                    [5, -36],
                    [-37, 2],
                    [11, 42],
                  ],
                  [
                    [1414, 3178],
                    [-1, -65],
                    [-51, 5],
                    [-24, 32],
                    [10, 15],
                    [66, 13],
                  ],
                  [
                    [2335, 4929],
                    [-22, 20],
                    [44, 23],
                    [6, -42],
                    [-28, -1],
                  ],
                  [
                    [2389, 4957],
                    [16, -20],
                    [-19, -27],
                    [-15, 20],
                    [18, 27],
                  ],
                  [
                    [2612, 4679],
                    [8, -9],
                    [-58, -16],
                    [50, 25],
                  ],
                ],
                transform: {
                  scale: [0.0011894605993974438, 0.0011598935795490968],
                  translate: [6.62773062275904, 35.49486425540846],
                },
              }
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdMapRaster", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, a, o, r, l, s, d, u;
              return (
                (s = null),
                (d = []),
                (o = {
                  accessToken: null,
                  mapId: null,
                  bounds: [
                    [-90, -180],
                    [90, 180],
                  ],
                  fitBounds: !0,
                  pad: 0.1,
                }),
                (n.config = o),
                n.query,
                e
                  .subscribe(n.componentId, "query", function (t) {
                    return t;
                  })
                  .subscribe(n.componentId, "data", function (t) {
                    return u(t);
                  })
                  .subscribe(n.componentId, "config", function (t) {
                    var e;
                    return (
                      (e = _.merge(o, t, function (t, e) {
                        if (_.isArray(t)) return e;
                      })),
                      (n.config = e),
                      l()
                    );
                  })
                  .subscribe(n.componentId, "theme", function (t) {})
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-map-raster",
                    subtype: n.componentSubtype,
                    layout: { width: n.width, height: n.height },
                  }),
                (l = function () {
                  var t;
                  if (
                    null == s &&
                    null !== (t = n.config.accessToken) &&
                    "" !== t
                  )
                    return (
                      (L.mapbox.accessToken = n.config.accessToken),
                      (s = L.mapbox.map(
                        $(i[0]).find(".td-block-content")[0],
                        n.config.mapId,
                        {
                          maxBounds: n.config.bounds,
                          noWrap: !0,
                          zoomControl: !1,
                        }
                      ))
                    );
                }),
                (u = function (e) {
                  if (null != s)
                    return (
                      _.isEmpty(d) || r(),
                      null != e && _.isArray(e) ? t(e) : void 0
                    );
                }),
                (r = function () {
                  var t, e, n;
                  for (t = 0, e = d.length; t < e; t++)
                    (n = d[t]), s.removeLayer(n);
                  return (d = []);
                }),
                (t = function (t) {
                  var e, i, o, r;
                  for (e = 0, i = t.length; e < i; e++)
                    (o = t[e]),
                      (r = L.marker([o.lat, o.lng])).addTo(s),
                      d.push(r);
                  if (n.config.fitBounds) return s.fitBounds(a(t));
                }),
                (a = function (t) {
                  return new L.LatLngBounds(t).pad(n.config.pad);
                })
              );
            });
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdmap", [
      "$rootScope",
      "$log",
      "$compile",
      "$filter",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: { componentId: "@", title: "@", width: "@", height: "@" },
          link: function (t, e, n) {
            var i, o, r, l, s, d, u;
            return (
              function () {
                return $(e).parent().data();
              },
              (o = {
                scales: {
                  symbolColor: { field: "d.category" },
                  shapeColor: { field: "d.category" },
                },
                tooltip: { visible: !1 },
                custom: { projection: { scale: 1e3, center: [0, 42] } },
              }),
              (l = "/maps/italy-regions.json"),
              (r = null),
              (s = t.query),
              (d = da.map($(e[0]).find(".td-block-content")[0]).options(o)),
              a
                .subscribe(t.componentId, "query", function (e) {
                  return (s = e), (t.selected = a.status(s));
                })
                .subscribe(t.componentId, "data", function (t) {
                  return d.data(t), i();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n;
                  return (
                    (t.config = e),
                    null == (n = _.get(e, "custom.source")) &&
                      l !== r &&
                      (_.set(e, "custom.source", l), (r = n)),
                    d.options(e),
                    i()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    d.options({
                      scales: {
                        symbolColor: { range: t.range },
                        shapeColor: { range: t.range },
                      },
                    }),
                    i()
                  );
                })
                .on("status.change", function (e, n, o, r) {
                  if (
                    null != s &&
                    (u(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(s)))
                  )
                    return i();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-map",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return d.resize();
              }),
              d.on("click", function (e) {
                var n;
                return (
                  (n =
                    null == e
                      ? null
                      : null != e.id
                      ? e.id.toString()
                      : null != e.$color
                      ? e.$color.toString()
                      : void 0),
                  s
                    ? t.$apply(function () {
                        return a.status(s, n, t.componentId);
                      })
                    : d.select(null)
                );
              }),
              (u = function () {
                if (s) return (t.selected = a.status(s));
              }),
              (i = function () {
                if (null != s) return d.select(a.status(s));
              }),
              (t.resetSelection = function () {
                if (s) return a.status(s, null, t.componentId);
              }),
              {
                type: "Topology",
                objects: {
                  items: {
                    type: "GeometryCollection",
                    crs: {
                      type: "name",
                      properties: { name: "urn:ogc:def:crs:OGC:1.3:CRS84" },
                    },
                    geometries: [
                      {
                        type: "Polygon",
                        properties: { adm1: 1, label: "PIEMONTE" },
                        id: 1,
                        arcs: [[0, 1, 2, 3, 4, 5, 6]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 2, label: "VALLE D'AOSTA" },
                        id: 2,
                        arcs: [[-6, 7]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 3, label: "LOMBARDIA" },
                        id: 3,
                        arcs: [[8, 9, 10, -2, -1, 11]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 4, label: "TRENTINO-ALTO ADIGE" },
                        id: 4,
                        arcs: [[12, 13, 14, -9, 15]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 5, label: "VENETO" },
                        id: 5,
                        arcs: [[16, 17, 18, -10, -15, -14, -13, 19]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 6, label: "FRIULI VENEZIA GIULIA" },
                        id: 6,
                        arcs: [[-17, 20]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 7, label: "LIGURIA" },
                        id: 7,
                        arcs: [[-4, 21, 22, 23]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 8, label: "EMILIA-ROMAGNA" },
                        id: 8,
                        arcs: [[24, 25, 26, 27, -22, -3, -11, -19, 28], [29]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 9, label: "TOSCANA" },
                        id: 9,
                        arcs: [
                          [[-23, -28, 30, 31, 32, 33, 34]],
                          [[35]],
                          [[36]],
                          [[37]],
                          [[-30]],
                          [[38]],
                          [[39]],
                        ],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 10, label: "UMBRIA" },
                        id: 10,
                        arcs: [[40, 41, -32, 42]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 11, label: "MARCHE" },
                        id: 11,
                        arcs: [[43, 44, -41, -43, -31, -27, 45, -25, 46]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 12, label: "LAZIO" },
                        id: 12,
                        arcs: [[[-34, -33, -42, -45, 47, 48, 49, 50, 51, 52]]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 13, label: "ABRUZZO" },
                        id: 13,
                        arcs: [[53, -49, -48, -44, 54]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 14, label: "MOLISE" },
                        id: 14,
                        arcs: [[55, 56, -51, -50, -54, 57]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 15, label: "CAMPANIA" },
                        id: 15,
                        arcs: [[[-52, -57, 58, 59, 60]], [[61]], [[62]]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 16, label: "PUGLIA" },
                        id: 16,
                        arcs: [[63, -59, -56, 64]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 17, label: "BASILICATA" },
                        id: 17,
                        arcs: [[-60, -64, 65, 66, 67, 68]],
                      },
                      {
                        type: "Polygon",
                        properties: { adm1: 18, label: "CALABRIA" },
                        id: 18,
                        arcs: [[-68, -67, 69]],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 19, label: "SICILIA" },
                        id: 19,
                        arcs: [
                          [[70]],
                          [[71]],
                          [[72]],
                          [[73]],
                          [[74]],
                          [[75]],
                          [[76]],
                          [[77]],
                          [[78]],
                          [[79]],
                        ],
                      },
                      {
                        type: "MultiPolygon",
                        properties: { adm1: 20, label: "SARDEGNA" },
                        id: 20,
                        arcs: [[[80]], [[81]], [[82]], [[83]], [[84]], [[85]]],
                      },
                    ],
                  },
                },
                arcs: [
                  [
                    [1756, 9141],
                    [11, -66],
                    [-133, -104],
                    [21, -58],
                    [-33, -49],
                    [31, -39],
                    [44, -8],
                    [-5, -38],
                    [36, -5],
                    [5, -28],
                    [-24, -1],
                    [37, -32],
                    [-10, -19],
                    [27, -63],
                    [53, -17],
                    [46, -79],
                    [-40, -13],
                    [-64, 0],
                    [38, -24],
                    [-39, -41],
                    [-43, -10],
                    [-8, 29],
                    [-37, 24],
                    [-49, 7],
                    [-14, -36],
                    [-33, -24],
                    [32, -13],
                    [-11, -48],
                    [48, -16],
                    [-29, -18],
                    [75, -80],
                    [0, -41],
                    [19, -21],
                    [39, 18],
                    [57, -27],
                    [44, 35],
                    [62, 2],
                    [3, -37],
                    [21, -21],
                    [29, 5],
                    [8, -38],
                    [29, -35],
                    [54, -32],
                    [-16, -14],
                  ],
                  [
                    [2037, 8066],
                    [25, -32],
                    [64, -4],
                    [13, -32],
                    [36, -16],
                    [-11, -57],
                  ],
                  [
                    [2164, 7925],
                    [1, -63],
                  ],
                  [
                    [2165, 7862],
                    [-40, -33],
                    [-36, 6],
                    [-7, 23],
                    [-43, 10],
                    [-26, 36],
                    [-79, 11],
                    [-38, -33],
                    [23, -20],
                    [7, -46],
                    [-76, 2],
                    [-34, -64],
                    [-56, 80],
                    [-75, 0],
                    [-29, -21],
                    [-18, -40],
                    [-84, 0],
                    [-22, -11],
                    [-38, 11],
                    [-9, -28],
                    [-141, 33],
                    [-25, -44],
                    [22, -27],
                    [-15, -24],
                    [-53, -33],
                    [-33, -57],
                    [-36, 0],
                    [25, -24],
                    [-19, -43],
                    [26, -39],
                    [-25, -29],
                    [-48, 10],
                    [-27, -15],
                    [29, -17],
                    [-109, -13],
                    [-101, 32],
                    [-33, -17],
                    [11, -40],
                    [-20, -11],
                  ],
                  [
                    [913, 7387],
                    [4, 18],
                    [-43, 43],
                    [16, 35],
                    [-43, 3],
                    [-15, -23],
                    [-101, -8],
                    [-60, -24],
                    [-59, 2],
                    [-9, 25],
                    [-69, 2],
                    [-61, 44],
                    [-40, 2],
                    [-61, 29],
                    [-55, 2],
                    [-7, 38],
                    [-34, 15],
                    [-49, 64],
                    [-4, 42],
                    [47, 8],
                    [-61, 45],
                    [-18, 39],
                    [51, 27],
                    [45, 58],
                    [-18, 23],
                    [36, 33],
                    [72, -7],
                    [-9, 27],
                    [-34, 22],
                    [-20, 43],
                    [20, 29],
                    [-78, 34],
                    [-16, -15],
                    [-42, 5],
                    [-94, 48],
                    [13, 46],
                    [-18, 47],
                    [-58, 3],
                    [-11, 46],
                    [-30, 27],
                    [45, 33],
                    [50, -3],
                    [24, 19],
                    [67, -28],
                    [41, 13],
                    [-4, 23],
                    [46, 2],
                    [16, 32],
                    [72, 15],
                    [13, -14],
                    [58, 40],
                    [-22, 61],
                    [41, 28],
                    [22, 37],
                    [-61, 28],
                    [-6, 28],
                  ],
                  [
                    [402, 8598],
                    [27, 43],
                    [15, -27],
                    [56, -13],
                    [40, 38],
                    [90, 2],
                    [97, 58],
                    [62, 6],
                    [94, -33],
                    [47, -2],
                    [97, 45],
                    [44, -10],
                    [-4, 18],
                    [36, 28],
                    [-29, 33],
                    [27, 35],
                    [-63, 60],
                    [11, 60],
                    [-9, 47],
                  ],
                  [
                    [1040, 8986],
                    [12, 49],
                    [26, 20],
                    [58, 2],
                    [47, 38],
                    [0, 50],
                    [61, 9],
                    [40, 29],
                    [10, 32],
                    [-24, 38],
                    [-45, 29],
                    [48, 37],
                    [59, 5],
                    [42, 44],
                    [43, 14],
                    [-19, 28],
                    [56, 34],
                    [68, 14],
                    [23, -16],
                    [-1, -98],
                    [-30, -29],
                    [34, -56],
                    [53, -14],
                    [68, -82],
                    [87, -22],
                  ],
                  [
                    [402, 8598],
                    [-48, 5],
                    [5, 19],
                    [-45, 9],
                    [-20, 72],
                    [20, 45],
                    [-71, 10],
                    [-90, 63],
                    [-7, 43],
                    [14, 53],
                    [51, 10],
                    [54, -1],
                    [40, 18],
                    [25, 42],
                    [22, 5],
                    [59, -55],
                    [31, 18],
                    [29, -18],
                    [34, 29],
                    [27, -2],
                    [26, 26],
                    [76, -20],
                    [101, 55],
                    [30, -5],
                    [9, 26],
                    [33, -13],
                    [65, 4],
                    [58, -44],
                    [16, 14],
                    [40, -20],
                    [54, 0],
                  ],
                  [
                    [3217, 9515],
                    [4, -19],
                    [77, -14],
                    [59, -38],
                    [8, -42],
                    [-52, -18],
                    [-43, -30],
                    [42, -15],
                    [16, -71],
                    [-37, -48],
                    [19, -18],
                    [-19, -56],
                    [-54, -44],
                    [8, -19],
                    [-29, -44],
                    [29, -7],
                    [18, -40],
                    [-14, -37],
                    [14, -49],
                    [29, -5],
                    [15, -31],
                    [72, 19],
                    [7, 23],
                    [75, 9],
                    [81, -8],
                  ],
                  [
                    [3542, 8913],
                    [-108, -129],
                    [-67, -63],
                    [11, -142],
                    [59, -23],
                    [-25, -56],
                    [39, -34],
                    [5, -23],
                    [38, 24],
                    [54, -50],
                    [74, -22],
                    [10, -22],
                    [37, -8],
                    [3, -41],
                    [44, 4],
                    [-6, -36],
                    [48, -15],
                    [41, 27],
                    [35, -14],
                    [-10, -42],
                    [52, -15],
                    [22, 11],
                    [8, -33],
                    [128, -49],
                    [0, -9],
                  ],
                  [
                    [4034, 8153],
                    [-83, 9],
                    [-45, -20],
                    [-29, 6],
                    [-73, -10],
                    [-66, 24],
                    [-11, -10],
                    [-61, 1],
                    [-39, -25],
                    [-161, 22],
                    [-19, 38],
                    [-21, -23],
                    [-14, 18],
                    [-51, -51],
                    [-43, -15],
                    [-45, 2],
                    [-75, 31],
                    [-25, 32],
                    [-30, -16],
                    [-77, 28],
                    [-16, 17],
                    [-75, 23],
                    [-51, -19],
                    [-47, 16],
                    [-16, 45],
                    [-43, 34],
                    [-53, -29],
                    [-1, 34],
                    [-29, -10],
                    [18, -29],
                    [-72, -14],
                    [-50, 30],
                    [-7, -31],
                    [-30, -15],
                    [-68, 24],
                    [-5, 40],
                    [-20, -25],
                    [-29, 2],
                    [-29, -25],
                    [-24, 22],
                    [-55, -8],
                    [-58, -39],
                    [4, -24],
                    [-26, -23],
                    [-25, -50],
                    [-18, -3],
                    [-2, -43],
                    [44, -12],
                    [17, -39],
                    [-64, -56],
                    [38, -20],
                    [-7, -40],
                    [-103, -2],
                  ],
                  [
                    [1756, 9141],
                    [23, 22],
                    [53, -18],
                    [41, -34],
                    [-54, -49],
                    [86, -41],
                    [47, -99],
                    [69, -19],
                    [21, 47],
                    [28, 21],
                    [-58, 25],
                    [-27, 36],
                    [33, 20],
                    [-9, 48],
                    [52, 13],
                    [-7, 48],
                    [43, 12],
                    [61, 38],
                    [22, 44],
                    [62, 75],
                    [-12, 84],
                    [-27, 29],
                    [28, 43],
                    [71, 10],
                    [40, -36],
                    [40, 35],
                    [-5, -78],
                    [9, -38],
                    [24, -6],
                    [47, -55],
                    [77, -13],
                    [28, 14],
                    [33, -9],
                    [7, 41],
                    [40, -4],
                    [116, 39],
                    [37, -1],
                    [38, -26],
                    [-14, -24],
                    [15, -34],
                    [49, -18],
                    [11, -38],
                    [54, 7],
                    [36, 29],
                    [-50, 48],
                    [-7, 32],
                    [47, 34],
                    [-30, 35],
                    [-27, -10],
                    [-48, 22],
                    [12, 73],
                    [66, 65],
                    [91, 25],
                    [3, -49],
                    [47, -25],
                    [100, 2],
                    [29, -18],
                  ],
                  [
                    [4919, 9643],
                    [-37, -9],
                    [-38, -38],
                    [-41, 5],
                    [-45, -11],
                    [-21, 10],
                    [-58, -30],
                    [2, 21],
                    [-42, 13],
                    [-64, 36],
                    [-3, -45],
                    [-56, -79],
                    [-73, 0],
                    [-81, -28],
                    [-2, -18],
                    [52, -5],
                    [12, -26],
                    [-33, -7],
                    [-15, -47],
                    [-49, -18],
                    [57, -46],
                    [-4, -30],
                    [41, 6],
                    [20, -47],
                    [44, -20],
                    [-28, -21],
                    [-30, -47],
                    [-100, -13],
                  ],
                  [
                    [4327, 9149],
                    [-77, -14],
                    [21, -38],
                    [-32, -24],
                    [5, -47],
                    [-73, 5],
                    [-9, 32],
                    [-75, 1],
                    [-36, -24],
                    [-62, 2],
                    [8, -35],
                    [-30, -28],
                    [-27, 18],
                    [-47, -9],
                    [-14, -38],
                  ],
                  [
                    [3879, 8950],
                    [-1, -17],
                    [-55, -59],
                    [4, -42],
                    [-34, -36],
                    [-39, -2],
                    [-30, 20],
                    [-49, -8],
                    [-51, -31],
                    [-41, 37],
                    [-38, 2],
                    [33, 86],
                    [-36, 13],
                  ],
                  [
                    [3217, 9515],
                    [15, 10],
                    [13, 62],
                    [-35, 23],
                    [-37, -2],
                    [-15, 39],
                    [50, 59],
                    [-15, 32],
                    [22, 13],
                    [16, 44],
                    [70, -5],
                    [97, 23],
                    [80, -46],
                    [-28, -30],
                    [48, 6],
                    [85, -27],
                    [24, 10],
                    [87, -10],
                    [16, 36],
                    [37, 15],
                    [-9, 30],
                    [35, 63],
                    [123, 43],
                    [82, 9],
                    [40, -22],
                    [60, 38],
                    [50, -22],
                    [75, 25],
                    [35, -18],
                    [37, 1],
                    [30, -21],
                    [28, 20],
                    [47, 1],
                    [68, 35],
                    [131, 22],
                    [94, 28],
                    [46, -19],
                    [-29, -36],
                    [-71, -18],
                    [9, -38],
                    [31, -26],
                    [-20, -16],
                    [42, -9],
                    [17, -27],
                    [43, 13],
                    [34, -47],
                    [-19, -44],
                    [61, -6],
                    [18, -46],
                    [84, -37],
                  ],
                  [
                    [5132, 9604],
                    [10, -51],
                    [-22, -25],
                    [-72, -29],
                    [26, -37],
                    [-77, 6],
                    [-54, -30],
                    [-36, -62],
                    [-43, -32],
                    [-48, -11],
                    [-27, -56],
                    [69, -42],
                    [33, 0],
                    [11, -30],
                    [28, -13],
                    [-5, -44],
                    [-48, -24],
                    [-24, -31],
                    [25, -41],
                    [-3, -40],
                    [61, -19],
                    [76, -95],
                    [15, 19],
                    [57, -39],
                    [47, 39],
                    [44, 14],
                    [31, -25],
                    [47, 22],
                    [15, -26],
                    [50, 1],
                    [65, -73],
                    [12, -46],
                    [47, -34],
                  ],
                  [
                    [5442, 8750],
                    [-4, -8],
                    [-156, -16],
                    [-15, -13],
                    [-130, -59],
                    [-240, -80],
                    [-44, -8],
                    [-58, -67],
                    [-26, -80],
                    [0, -40],
                    [28, -44],
                    [-5, -33],
                    [25, -50],
                    [72, -46],
                    [88, -33],
                    [-31, -38],
                    [-36, -72],
                    [-61, -45],
                  ],
                  [
                    [4849, 8018],
                    [-35, 20],
                    [-8, 25],
                    [-48, 21],
                    [6, 50],
                    [-31, 11],
                    [-24, -16],
                    [-48, 16],
                    [-24, -12],
                    [-26, 29],
                    [-129, 21],
                    [-25, -10],
                    [-105, 3],
                    [-47, -16],
                    [-2, -21],
                    [-64, -17],
                    [-40, -23],
                    [-73, 41],
                    [-89, -6],
                    [-3, 19],
                  ],
                  [
                    [4919, 9643],
                    [69, -24],
                    [53, 9],
                    [58, -5],
                    [33, -19],
                  ],
                  [
                    [5132, 9604],
                    [21, 11],
                    [68, -16],
                    [13, -20],
                    [194, -2],
                    [69, -11],
                    [74, -25],
                    [56, -7],
                    [47, 23],
                    [43, -19],
                    [65, 8],
                    [176, -37],
                    [-25, -75],
                    [-77, 0],
                    [-47, -44],
                    [-74, -19],
                    [-1, -23],
                    [-38, -32],
                    [-22, -1],
                    [39, -58],
                    [118, -23],
                    [1, -15],
                    [83, -7],
                    [-15, -36],
                    [-60, -41],
                    [-64, -28],
                    [-19, -44],
                    [56, -37],
                    [44, 23],
                    [36, -2],
                    [1, -45],
                    [-54, -76],
                    [19, -34],
                    [52, -7],
                    [73, -39],
                    [44, -10],
                    [32, -49],
                    [70, -47],
                    [-64, -42],
                    [-51, 1],
                    [-53, 19],
                    [58, -5],
                    [-29, 68],
                    [-102, 76],
                    [-75, 22],
                    [-18, -24],
                    [28, -31],
                    [-109, -45],
                    [-30, -1],
                    [-72, 25],
                    [-53, 10],
                    [-77, -15],
                    [-41, -48],
                  ],
                  [
                    [2165, 7862],
                    [37, -13],
                    [45, 9],
                    [34, -27],
                    [35, -1],
                    [19, 21],
                    [29, -30],
                    [32, 0],
                    [23, -31],
                    [-8, -40],
                    [-22, -1],
                    [-21, -57],
                    [118, 10],
                    [59, -14],
                    [28, -39],
                  ],
                  [
                    [2573, 7649],
                    [100, -72],
                    [37, -10],
                    [21, -41],
                    [-16, -27],
                    [43, 15],
                    [18, -12],
                    [-31, -24],
                    [63, 1],
                    [23, -43],
                    [64, -23],
                    [-43, -41],
                  ],
                  [
                    [2852, 7372],
                    [-47, -7],
                    [-94, 62],
                    [-25, -15],
                    [10, -37],
                    [-79, 38],
                    [-61, 43],
                    [-26, -7],
                    [-25, 32],
                    [-33, 10],
                    [-61, 45],
                    [-77, 18],
                    [-32, 36],
                    [-115, 44],
                    [-8, -44],
                    [-56, 16],
                    [-11, 39],
                    [-153, 24],
                    [-60, 15],
                    [-120, 18],
                    [-99, -48],
                    [-97, -38],
                    [-53, -37],
                    [7, -21],
                    [-33, -33],
                    [5, -26],
                    [-128, -45],
                    [-36, -51],
                    [-1, -33],
                    [-46, -34],
                    [3, -42],
                    [-176, -89],
                    [-130, -25],
                    [-60, -24],
                    [-34, 4],
                    [-20, -18],
                    [-83, 13],
                    [-40, -8],
                    [-29, 61],
                    [7, 18],
                    [51, 21],
                    [2, 37],
                    [74, 27],
                    [7, 46],
                    [43, 30],
                  ],
                  [
                    [5148, 7306],
                    [-19, -38],
                    [-2, -55],
                    [-36, -6],
                    [-1, -22],
                    [-49, -6],
                    [-28, 56],
                    [-40, -20],
                    [1, 22],
                    [-41, 24],
                  ],
                  [
                    [4933, 7261],
                    [18, 22],
                    [-1, 43],
                    [-93, -33],
                    [12, -47],
                  ],
                  [
                    [4869, 7246],
                    [-60, -28],
                    [-9, -36],
                    [-44, -26],
                    [0, -25],
                  ],
                  [
                    [4756, 7131],
                    [-63, -8],
                    [-12, -22],
                    [-26, 27],
                    [-73, -19],
                    [-76, 19],
                    [-65, 43],
                    [-57, -4],
                    [-44, 32],
                    [-66, 28],
                    [6, 38],
                    [-61, 58],
                    [86, 99],
                    [-2, 19],
                    [-56, -1],
                    [-22, -19],
                    [-53, 20],
                    [17, 29],
                    [-89, 3],
                    [-47, 31],
                    [-22, 36],
                    [-33, -33],
                    [-34, 4],
                    [-51, -45],
                    [-75, -6],
                    [60, -38],
                    [-85, 8],
                    [-95, -19],
                    [-40, 17],
                    [4, 25],
                    [-75, -66],
                    [-32, 31],
                    [-26, -1],
                    [-77, 48],
                    [-97, 6],
                    [-14, -35],
                    [-29, -4],
                    [-55, 36],
                    [-28, 53],
                    [-44, 6],
                    [-57, 38],
                    [-63, 14],
                    [-36, -15],
                    [-27, 31],
                    [-67, 44],
                    [-43, -1],
                    [-86, 44],
                    [15, 22],
                    [-30, 30],
                    [-39, 6],
                    [-87, -5],
                    [-65, -75],
                    [-47, -11],
                  ],
                  [
                    [4849, 8018],
                    [-60, 2],
                    [14, 18],
                    [-44, 21],
                    [-33, -68],
                    [-7, -62],
                    [30, -61],
                    [10, -131],
                    [22, -54],
                    [35, -114],
                    [31, -52],
                    [104, -94],
                    [51, -24],
                    [41, -39],
                    [73, -48],
                    [32, -6],
                  ],
                  [
                    [4706, 7170],
                    [-47, -4],
                    [14, -28],
                    [44, 12],
                    [-11, 20],
                  ],
                  [
                    [4756, 7131],
                    [36, -13],
                    [35, -30],
                    [-32, -7],
                    [-122, -58],
                    [24, -25],
                  ],
                  [
                    [4697, 6998],
                    [-43, -44],
                    [-8, -27],
                    [-42, 1],
                    [-6, -28],
                    [39, -24],
                    [-98, -47],
                    [37, -10],
                    [3, -30],
                    [32, 1],
                    [20, -23],
                    [-3, -43],
                    [37, -10],
                    [15, 27],
                    [26, -16],
                    [-110, -50],
                    [-39, 15],
                    [-17, -55],
                    [-88, -36],
                    [-8, -17],
                    [19, -63],
                    [38, 1],
                    [-41, -128],
                    [22, -33],
                    [-27, -2],
                    [-26, -28],
                  ],
                  [
                    [4429, 6329],
                    [-69, -12],
                    [-2, -20],
                    [-36, 19],
                    [-18, -29],
                    [61, -35],
                    [-15, -33],
                  ],
                  [
                    [4350, 6219],
                    [-14, -31],
                    [21, -16],
                    [-49, -12],
                    [-14, -25],
                    [-99, -43],
                    [-24, 10],
                    [-23, -47],
                    [47, -25],
                    [1, -46],
                    [-109, 4],
                    [-31, -50],
                  ],
                  [
                    [4056, 5938],
                    [-171, 32],
                    [-29, -6],
                    [-21, -42],
                    [-26, -1],
                    [-51, 26],
                    [0, 42],
                    [55, -5],
                    [25, 67],
                    [-28, 42],
                    [-36, 4],
                    [-25, 52],
                    [-64, 29],
                    [-27, 49],
                    [-30, 22],
                    [-59, 19],
                    [-74, 10],
                    [-25, 27],
                    [27, 69],
                    [-36, 35],
                    [-55, 18],
                    [-72, 4],
                    [-38, -6],
                    [-4, -23],
                    [-36, 14],
                    [-14, 44],
                    [21, 3],
                    [22, 62],
                    [4, 91],
                    [-8, 51],
                    [-24, 54],
                    [-38, 33],
                    [-26, 60],
                    [-36, 42],
                    [-32, 15],
                    [-42, 76],
                    [6, 18],
                    [-24, 86],
                    [0, 73],
                    [-25, 91],
                    [-65, 83],
                    [-86, 59],
                    [-37, 15],
                  ],
                  [
                    [3187, 6357],
                    [22, -17],
                    [-8, -63],
                    [-42, -13],
                    [40, -22],
                    [-11, -23],
                    [-36, 10],
                    [-15, 34],
                    [-57, -4],
                    [-3, -17],
                    [-39, 13],
                    [-3, -20],
                    [-97, 14],
                    [-15, 38],
                    [69, 21],
                    [48, -20],
                    [23, 33],
                    [52, -8],
                    [22, -16],
                    [40, 62],
                    [10, -2],
                  ],
                  [
                    [3581, 5945],
                    [38, -45],
                    [-12, -16],
                    [-29, 29],
                    [3, 32],
                  ],
                  [
                    [2696, 6515],
                    [7, -22],
                    [-28, -20],
                    [-15, 18],
                    [29, 43],
                    [7, -19],
                  ],
                  [
                    [3101, 5912],
                    [14, -25],
                    [-29, -7],
                    [15, 32],
                  ],
                  [
                    [2913, 6120],
                    [-3, -22],
                    [-37, 12],
                    [40, 10],
                  ],
                  [
                    [5272, 6509],
                    [-1, -69],
                    [66, -31],
                    [0, -50],
                    [22, 33],
                    [44, 10],
                    [49, -26],
                    [41, -50],
                    [70, 23],
                    [17, -43],
                    [-25, -31],
                    [-33, -10],
                    [-5, -24],
                  ],
                  [
                    [5517, 6241],
                    [-14, -58],
                    [-36, -5],
                    [-57, -33],
                    [-32, 15],
                    [-16, -20],
                    [-44, 3],
                    [-61, -15],
                    [11, -34],
                    [-100, -43],
                    [-53, -10],
                    [26, -27],
                    [-65, -25],
                    [-42, 20],
                    [0, -44],
                    [-72, -43],
                    [-9, 31],
                    [-45, -3],
                    [0, 29],
                    [-40, -6],
                    [9, 56],
                    [-32, 10],
                    [-32, -22],
                    [-62, 29],
                    [-2, 46],
                    [-30, 9],
                    [3, 50],
                    [-69, 42],
                    [-30, -24],
                    [-80, 0],
                    [-75, 29],
                    [-9, 27],
                    [40, 43],
                    [-43, 14],
                    [-27, 47],
                  ],
                  [
                    [4697, 6998],
                    [9, -16],
                    [70, -2],
                    [52, 18],
                    [3, -23],
                    [-51, -36],
                    [45, -7],
                    [28, -22],
                    [18, 23],
                    [31, -17],
                    [36, 5],
                    [45, -46],
                    [60, -42],
                    [31, 15],
                    [39, -11],
                    [19, 33],
                    [31, -3],
                    [5, -49],
                    [-23, -10],
                    [47, -71],
                    [-11, -21],
                    [30, -15],
                    [10, -43],
                    [22, -5],
                    [0, -38],
                    [-28, -18],
                    [10, -20],
                    [34, -1],
                    [13, -67],
                  ],
                  [
                    [6128, 6379],
                    [-163, -33],
                    [-20, -29],
                    [-47, -15],
                    [-60, -4],
                    [-31, 14],
                    [-37, -71],
                    [-35, -1],
                    [-11, -28],
                    [-65, -5],
                  ],
                  [
                    [5659, 6207],
                    [-60, 41],
                    [-30, -16],
                    [-52, 9],
                  ],
                  [
                    [4869, 7246],
                    [58, -3],
                    [6, 18],
                  ],
                  [
                    [5148, 7306],
                    [40, -3],
                    [92, -37],
                    [67, -49],
                    [67, -37],
                    [56, -43],
                    [121, -76],
                    [135, -61],
                    [37, -6],
                    [40, 13],
                    [48, -50],
                    [33, -11],
                    [-3, -40],
                    [34, -58],
                    [41, -91],
                    [19, -18],
                    [95, -190],
                    [29, -110],
                    [29, -60],
                  ],
                  [
                    [5659, 6207],
                    [10, -38],
                    [32, -6],
                    [-22, -53],
                    [-112, -7],
                    [-48, 13],
                    [-13, -37],
                    [2, -57],
                    [-52, -30],
                    [61, -38],
                    [-31, -37],
                    [61, -33],
                    [14, -42],
                    [116, -77],
                    [-47, -18],
                  ],
                  [
                    [5630, 5747],
                    [-15, -19],
                    [-48, -10],
                    [-48, 28],
                    [-88, 16],
                    [0, -29],
                    [-42, -21],
                    [-16, -36],
                    [33, -53],
                    [40, 9],
                    [153, -66],
                    [20, 1],
                    [61, -43],
                    [-18, -24],
                    [4, -35],
                    [71, -8],
                    [45, -19],
                    [14, -25],
                    [44, -17],
                    [75, 51],
                    [44, -13],
                    [28, -31],
                    [143, -36],
                    [19, -28],
                  ],
                  [
                    [6149, 5339],
                    [40, -29],
                    [19, -39],
                    [-11, -24],
                    [22, -22],
                  ],
                  [
                    [6219, 5225],
                    [3, -28],
                    [-47, -25],
                    [5, -27],
                  ],
                  [
                    [6180, 5145],
                    [-56, -29],
                    [-41, -9],
                    [20, -29],
                    [-11, -42],
                    [8, -39],
                    [-47, -11],
                    [-8, -29],
                    [-39, -2],
                    [-8, -16],
                  ],
                  [
                    [5998, 4939],
                    [-42, 25],
                    [-23, -6],
                    [-54, 14],
                    [-37, -17],
                    [-22, -30],
                    [-147, 65],
                    [-88, 12],
                    [-97, -24],
                    [-51, -38],
                    [-45, 5],
                    [-25, 57],
                    [-41, 48],
                    [-93, 52],
                    [-76, -1],
                    [-77, 39],
                    [-39, -10],
                    [-59, 78],
                    [-97, 92],
                    [-72, 48],
                    [-107, 41],
                    [0, 31],
                    [-22, 51],
                    [-48, 66],
                    [-76, 34],
                    [-23, 24],
                    [-99, 49],
                    [-59, -10],
                    [-24, 45],
                    [-31, 23],
                    [-63, 110],
                    [-53, 52],
                    [-61, 35],
                    [-91, 39],
                  ],
                  [
                    [6854, 5669],
                    [3, -32],
                    [-47, -25],
                    [-52, -55],
                    [-1, -20],
                    [-43, -23],
                    [-14, -34],
                    [-92, -79],
                    [-18, 15],
                    [-20, 55],
                    [-55, 34],
                    [-15, -16],
                    [-30, 30],
                    [-38, 11],
                    [-51, -48],
                    [-51, -11],
                    [16, -65],
                    [-44, -15],
                    [-11, -33],
                    [-34, 24],
                    [-13, -30],
                    [-29, -18],
                    [-66, 5],
                  ],
                  [
                    [6128, 6379],
                    [24, -78],
                    [42, -81],
                    [92, -122],
                    [69, -63],
                    [63, -46],
                    [125, -71],
                    [27, -40],
                    [52, -36],
                    [8, -19],
                    [96, -44],
                    [76, -23],
                    [0, -57],
                    [52, -30],
                  ],
                  [
                    [7155, 5546],
                    [1, -41],
                    [-33, -36],
                    [13, -41],
                    [-16, -22],
                    [21, -39],
                    [34, -9],
                    [-95, -47],
                    [-20, -29],
                    [-58, 19],
                    [-18, -19],
                    [14, -24],
                    [-12, -57],
                    [60, -35],
                  ],
                  [
                    [7046, 5166],
                    [-53, -27],
                    [-83, -25],
                    [-52, 23],
                    [-16, -31],
                    [-45, -14],
                    [-34, 5],
                    [-57, -36],
                    [-95, 21],
                    [-7, 22],
                    [-130, 34],
                    [-73, 38],
                    [-63, -4],
                    [-34, 13],
                    [-36, -37],
                    [23, -69],
                    [-58, 7],
                    [-53, 59],
                  ],
                  [
                    [6854, 5669],
                    [103, -42],
                    [77, -14],
                    [73, -55],
                    [48, -12],
                  ],
                  [
                    [7046, 5166],
                    [21, -29],
                    [55, -17],
                    [0, -37],
                    [-33, -15],
                    [11, -34],
                    [49, -13],
                    [16, -33],
                    [43, 5],
                    [41, -12],
                    [26, -27],
                    [-29, -4],
                    [13, -33],
                    [-44, -25],
                    [49, -53],
                    [83, -19],
                    [26, 19],
                    [41, -26],
                    [82, -19],
                  ],
                  [
                    [7496, 4794],
                    [17, -20],
                    [3, -53],
                    [-34, -55],
                    [-48, -13],
                    [3, -16],
                    [-48, 8],
                    [-31, -13],
                    [-1, -26],
                    [-36, -2],
                    [45, -34],
                    [-6, -62],
                    [41, -27],
                    [60, -22],
                    [-43, -51],
                    [49, -18],
                    [31, -48],
                    [-6, -37],
                    [41, -39],
                    [103, -57],
                    [-4, -30],
                    [30, -33],
                    [43, -12],
                    [4, -58],
                    [-55, -19],
                    [-25, -34],
                    [4, -37],
                    [-51, -65],
                  ],
                  [
                    [7582, 3921],
                    [-14, 27],
                    [-96, -4],
                    [-46, -30],
                    [-33, -37],
                    [-66, 11],
                    [-48, 26],
                    [-7, 29],
                    [-56, 46],
                    [-27, 6],
                    [-42, 39],
                    [-52, -7],
                    [-34, 11],
                    [-30, 35],
                    [-46, 8],
                    [-24, 23],
                    [31, 19],
                    [3, 53],
                    [44, 19],
                    [0, 25],
                    [-82, 141],
                    [-47, 58],
                    [-74, 50],
                    [-34, -9],
                    [-33, -29],
                    [-45, 12],
                    [-80, -35],
                    [-29, 18],
                    [-64, -16],
                    [-80, -35],
                    [22, 57],
                    [47, 8],
                    [35, 38],
                    [29, 10],
                    [-29, 48],
                    [-41, 1],
                    [-78, 65],
                    [-35, 11],
                    [-36, -14],
                    [-30, -31],
                    [-21, 21],
                    [-69, 9],
                    [10, -42],
                    [-38, 9],
                    [-2, 71],
                    [-34, 67],
                    [-68, 66],
                    [-16, 43],
                    [-57, 76],
                    [-62, 51],
                  ],
                  [
                    [6091, 4541],
                    [70, -19],
                    [8, -23],
                    [-77, -14],
                    [-18, 13],
                    [17, 43],
                  ],
                  [
                    [6418, 4369],
                    [-53, -22],
                    [2, 22],
                    [51, 0],
                  ],
                  [
                    [8609, 4228],
                    [-48, 29],
                    [-4, 21],
                    [-72, 21],
                    [15, 19],
                    [-27, 41],
                    [18, 43],
                    [-14, 30],
                    [13, 67],
                    [-78, 36],
                    [-49, 7],
                    [-26, -33],
                    [-36, 32],
                    [-18, -22],
                    [-55, -30],
                    [-82, 71],
                    [-33, 15],
                    [-39, 47],
                    [-24, 53],
                    [-33, 11],
                    [-35, -27],
                    [-19, 16],
                    [-99, 32],
                    [43, 38],
                    [4, 35],
                    [-33, 13],
                    [-17, 34],
                    [-91, 41],
                    [-31, -9],
                    [-28, -33],
                    [-39, 5],
                    [-61, -10],
                    [-84, 10],
                    [-31, -37],
                  ],
                  [
                    [7155, 5546],
                    [167, -9],
                    [38, -13],
                    [98, 5],
                    [117, 18],
                    [58, -13],
                    [181, 17],
                    [79, 15],
                    [58, -8],
                    [57, -29],
                    [40, -70],
                    [-11, -46],
                    [-95, -53],
                    [-7, -13],
                    [-136, -67],
                    [-8, -37],
                    [26, -71],
                    [47, -42],
                    [190, -73],
                    [50, -28],
                    [78, -19],
                    [75, -37],
                    [59, -16],
                    [53, -31],
                    [164, -40],
                    [157, -55],
                    [77, -18],
                    [123, -63],
                    [65, -28],
                    [73, -62],
                    [15, -4],
                    [93, -62],
                    [86, -30],
                    [93, -25],
                    [89, -50],
                    [51, -14],
                    [58, -2],
                    [8, -30],
                    [53, -8],
                    [25, -36],
                    [-8, -19],
                    [38, -43],
                    [50, -33],
                    [53, -16],
                    [39, -27],
                    [115, -105],
                    [37, -24],
                    [28, -51],
                    [-5, -18],
                    [53, -86],
                    [-31, -26],
                    [-11, -32],
                    [-29, -14],
                    [-23, -39],
                    [-15, -60],
                    [-1, -81],
                    [-36, -20],
                    [-69, 39],
                    [-47, 0],
                    [-52, 23],
                    [-83, 56],
                    [-45, 58],
                    [21, 27],
                    [-25, 26],
                    [18, 24],
                    [-13, 41],
                    [-59, 44],
                    [-1, 28],
                    [-50, 57],
                    [-165, 19],
                    [-135, -9],
                    [-49, 28],
                    [-40, 5],
                    [-113, 51],
                    [-56, 18],
                    [46, 26],
                    [-30, 32],
                    [-32, 1],
                    [-49, 33],
                    [-71, -6],
                    [-63, -28],
                    [-82, -70],
                  ],
                  [
                    [8609, 4228],
                    [-68, -82],
                    [-42, -81],
                    [-40, -54],
                    [-38, -24],
                  ],
                  [
                    [8421, 3987],
                    [-47, 13],
                    [-52, -13],
                    [-46, 13],
                    [-52, -11],
                    [5, -32],
                    [-19, -37],
                    [5, -23],
                    [-51, -68],
                    [10, -32],
                    [-30, 28],
                    [-84, -4],
                    [1, -26],
                    [-47, 20],
                    [-93, -21],
                    [-23, 34],
                  ],
                  [
                    [7898, 3828],
                    [-12, 21],
                    [20, 29],
                    [-45, -5],
                    [-46, 12],
                    [-21, -17],
                    [-39, 22],
                    [-26, -4],
                    [-42, -37],
                    [-12, -30],
                  ],
                  [
                    [7675, 3819],
                    [-21, 34],
                    [-72, 68],
                  ],
                  [
                    [8421, 3987],
                    [-33, -35],
                    [-5, -33],
                    [23, -74],
                    [-80, -79],
                    [-29, -40],
                    [-7, -45],
                    [35, -34],
                    [-9, -49],
                    [87, -40],
                    [125, 0],
                    [79, -70],
                    [91, -42],
                    [43, -6],
                    [11, -24],
                    [66, -43],
                    [35, -4],
                    [-38, -71],
                    [-6, -53],
                    [37, -44],
                    [-32, -69],
                    [20, -59],
                    [52, -27],
                    [-28, -30],
                    [6, -31],
                    [-62, -49],
                    [-119, 34],
                    [-143, -34],
                    [-144, -70],
                    [-40, -46],
                    [-26, -54],
                    [20, -19],
                    [20, -195],
                    [-22, -37],
                    [-81, -64],
                    [-118, -41],
                    [-100, -106],
                    [-30, -26],
                    [-19, -94],
                    [-39, -62],
                    [-30, -26],
                    [-55, -8],
                    [-53, 10],
                    [-142, -10],
                    [-72, 33],
                    [-35, 46],
                    [15, 20],
                    [-19, 62],
                    [18, 47],
                    [-17, 24],
                    [2, 38],
                    [86, 20],
                    [48, 23],
                    [30, 39],
                    [5, 33],
                    [22, 19],
                    [38, 71],
                    [18, 71],
                    [-86, 65],
                    [18, 29],
                    [84, 28],
                    [27, 25],
                    [33, 5],
                    [72, -12],
                    [36, 11],
                    [37, 32],
                    [25, 73],
                    [-1, 57],
                    [-57, 36],
                    [-47, 68],
                    [-25, 86],
                    [-13, 143],
                    [-48, 127],
                    [-58, 70],
                    [-36, 14],
                    [-62, 162],
                    [-32, 94],
                    [18, 21],
                    [-30, 51],
                  ],
                  [
                    [4889, 1978],
                    [37, 73],
                    [-23, 31],
                    [27, 37],
                    [23, 59],
                    [45, 43],
                    [57, 4],
                    [30, 34],
                    [28, -5],
                    [24, 28],
                    [-7, 42],
                    [33, -8],
                    [19, -62],
                    [30, -37],
                    [56, -35],
                    [79, 15],
                    [77, 39],
                    [-22, 45],
                    [47, 44],
                    [62, -19],
                    [75, 25],
                    [39, 22],
                    [35, -28],
                    [5, -57],
                    [65, -27],
                    [77, 12],
                    [3, -41],
                    [25, -20],
                    [118, -51],
                    [38, -6],
                    [84, 14],
                    [78, 35],
                    [65, 12],
                    [33, -19],
                    [68, 4],
                    [69, -12],
                    [115, 4],
                    [55, 23],
                    [37, -8],
                    [71, 24],
                    [63, 9],
                    [46, 31],
                    [51, 50],
                    [35, -11],
                    [85, 18],
                    [22, 17],
                    [43, -34],
                    [65, 0],
                    [49, -26],
                    [67, 31],
                    [50, 51],
                    [49, -9],
                    [46, 9],
                    [79, 29],
                    [60, 39],
                    [110, -28],
                    [-55, -15],
                    [-30, -67],
                    [-47, -81],
                    [-159, -171],
                    [1, -22],
                    [-79, -85],
                    [6, -34],
                    [-21, -58],
                    [-16, -11],
                    [2, -50],
                    [-73, -64],
                    [-4, -32],
                    [9, -119],
                    [83, -37],
                    [7, 9],
                    [45, -46],
                    [-56, -6],
                    [-3, -37],
                    [28, -50],
                    [64, -22],
                    [-17, -58],
                    [33, -2],
                    [18, -30],
                    [-28, 11],
                    [-30, -11],
                    [-7, -25],
                    [-42, -8],
                    [-43, -38],
                    [-17, -45],
                    [-27, -30],
                    [-9, -49],
                    [37, -79],
                    [-47, -30],
                    [-47, 43],
                    [-60, -5],
                    [-32, 24],
                    [-40, 9],
                    [-73, -24],
                    [-33, 15],
                    [-36, -4],
                    [-52, 38],
                    [-70, 18],
                    [-54, 5],
                    [-25, 25],
                    [-22, 57],
                    [-43, 63],
                    [-71, 68],
                    [-34, 20],
                    [-87, 33],
                    [-84, 13],
                    [-67, -1],
                    [-38, -13],
                    [-38, 4],
                    [-54, 39],
                    [-59, 4],
                    [-73, 39],
                    [-10, 19],
                    [-81, 58],
                    [-63, 4],
                    [-47, 15],
                    [-17, 22],
                    [-113, 52],
                    [-46, 58],
                    [-51, 33],
                    [-65, 8],
                    [-49, -9],
                    [-55, 62],
                    [-78, 12],
                    [-82, -2],
                    [-77, -18],
                    [-43, 46],
                    [-6, 20],
                    [-46, 23],
                    [-36, -1],
                    [-39, 38],
                    [1, 33],
                    [-25, 39],
                  ],
                  [
                    [4493, 1156],
                    [36, -8],
                    [33, -28],
                    [1, -28],
                    [-23, -21],
                    [-30, 1],
                    [-55, 56],
                    [7, 26],
                    [31, 2],
                  ],
                  [
                    [7006, 2611],
                    [2, -62],
                    [-18, -6],
                    [-37, 37],
                    [6, 21],
                    [47, 10],
                  ],
                  [
                    [6926, 2662],
                    [5, -39],
                    [-57, 15],
                    [3, 24],
                    [49, 0],
                  ],
                  [
                    [7008, 2523],
                    [29, -22],
                    [-4, -24],
                    [-32, 13],
                    [7, 33],
                  ],
                  [
                    [4963, 31],
                    [82, -8],
                    [4, -23],
                    [-97, 23],
                    [11, 8],
                  ],
                  [
                    [4750, 2103],
                    [25, 18],
                    [14, -22],
                    [39, -6],
                    [-70, -5],
                    [-8, 15],
                  ],
                  [
                    [7220, 2826],
                    [-23, 16],
                    [24, 19],
                    [23, -9],
                    [-24, -26],
                  ],
                  [
                    [4571, 2152],
                    [16, -40],
                    [-22, 7],
                    [-23, 35],
                    [29, -2],
                  ],
                  [
                    [4894, 2070],
                    [-2, -44],
                    [-13, 44],
                    [15, 0],
                  ],
                  [
                    [1326, 4385],
                    [-10, 33],
                    [-26, -49],
                    [-13, 56],
                    [35, 11],
                    [15, 39],
                    [-61, 41],
                    [72, 117],
                    [0, 27],
                    [-36, 28],
                    [24, 34],
                    [29, -15],
                    [-3, -41],
                    [65, -53],
                    [84, -5],
                    [71, -16],
                    [69, 15],
                    [44, 38],
                    [68, 31],
                    [65, 3],
                    [70, 63],
                    [6, 30],
                    [30, 6],
                    [82, 77],
                    [81, 8],
                    [52, 36],
                    [-14, 15],
                    [22, 46],
                    [46, 9],
                    [30, -19],
                    [26, -39],
                    [51, 15],
                    [6, -21],
                    [46, -8],
                    [14, -61],
                    [27, 27],
                    [45, 19],
                    [15, -38],
                    [22, -10],
                    [-35, -23],
                    [-21, -56],
                    [49, 24],
                    [-10, -25],
                    [38, 13],
                    [13, -17],
                    [-24, -24],
                    [-6, -42],
                    [-57, 0],
                    [-1, -14],
                    [48, 6],
                    [22, -16],
                    [46, 15],
                    [-25, -24],
                    [62, -44],
                    [-15, -45],
                    [40, -32],
                    [-4, -33],
                    [25, -17],
                    [7, -77],
                    [62, -61],
                    [0, -16],
                    [-55, -109],
                    [-36, -17],
                    [-43, -39],
                    [-36, -66],
                    [8, -56],
                    [43, -58],
                    [42, -22],
                    [-39, -88],
                    [-2, -29],
                    [25, -15],
                    [-22, -15],
                    [7, -54],
                    [-19, -35],
                    [1, -88],
                    [-25, -51],
                    [10, -45],
                    [-22, -85],
                    [11, -34],
                    [-37, -79],
                    [1, -40],
                    [22, -14],
                    [-47, -53],
                    [-8, -44],
                    [14, -11],
                    [-18, -41],
                    [-45, -20],
                    [-17, 22],
                    [-38, -13],
                    [-59, 47],
                    [-60, 33],
                    [-88, 6],
                    [-39, -33],
                    [-44, 27],
                    [-62, -56],
                    [-3, -54],
                    [25, -24],
                    [-18, -47],
                    [-100, -84],
                    [-43, -24],
                    [-51, 14],
                    [-62, 37],
                    [-58, -36],
                    [-38, -4],
                    [14, 40],
                    [-48, 54],
                    [-3, 39],
                    [-29, 12],
                    [-51, -3],
                    [-19, -74],
                    [-25, -13],
                    [-46, 71],
                    [0, 63],
                    [54, -1],
                    [34, -46],
                    [20, 24],
                    [-39, 27],
                    [-4, 33],
                    [-60, 64],
                    [60, 54],
                    [-14, 37],
                    [-37, 30],
                    [29, 43],
                    [-24, 33],
                    [52, 67],
                    [22, 53],
                    [-17, 24],
                    [-5, 116],
                    [12, 10],
                    [36, -48],
                    [8, 34],
                    [29, 35],
                    [7, 37],
                    [-26, 57],
                    [-47, 0],
                    [-21, -19],
                    [-36, 19],
                    [-5, 66],
                    [11, 43],
                    [-25, 5],
                    [70, 17],
                    [28, 27],
                    [-29, 55],
                    [3, 54],
                    [18, 63],
                    [-17, 26],
                    [-69, 19],
                    [17, 62],
                    [-28, 75],
                    [-25, 10],
                    [-43, 75],
                    [-37, -22],
                    [-33, 9],
                  ],
                  [
                    [1342, 4778],
                    [51, 34],
                    [-11, 20],
                    [42, 18],
                    [25, -27],
                    [-14, -32],
                    [-43, 11],
                    [-29, -32],
                    [5, -36],
                    [-37, 2],
                    [11, 42],
                  ],
                  [
                    [1414, 3178],
                    [-1, -65],
                    [-51, 5],
                    [-24, 32],
                    [10, 15],
                    [66, 13],
                  ],
                  [
                    [2335, 4929],
                    [-22, 20],
                    [44, 23],
                    [6, -42],
                    [-28, -1],
                  ],
                  [
                    [2389, 4957],
                    [16, -20],
                    [-19, -27],
                    [-15, 20],
                    [18, 27],
                  ],
                  [
                    [2612, 4679],
                    [8, -9],
                    [-58, -16],
                    [50, 25],
                  ],
                ],
                transform: {
                  scale: [0.0011894605993974438, 0.0011598935795490968],
                  translate: [6.62773062275904, 35.49486425540846],
                },
              }
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdmetriclist", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: { componentId: "@", title: "@" },
          link: function (t, e, i) {
            var a;
            return (
              (t.visibleId = void 0),
              (a = t.query),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (a = e), (t.selected = n.status(a));
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e);
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = e);
                })
                .on("status.change", function (e, i, o) {
                  if (a) return (t.selected = n.status(a));
                }),
              (t.select = function (t) {
                if (a) return n.status(a, t.id);
              }),
              (t.setVisibleId = function (e) {
                return console.log(e), (t.visibleId = e);
              })
            );
          },
          template: JST["tadaboard/templates/td-metrics"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdpie", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u, c, p;
            return (
              function () {
                return $(e).parent().data();
              },
              (l = null),
              function (t) {
                if (t.ngTooltipVisible)
                  return (l =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$angle}}"));
              },
              (r = {
                scales: {
                  angle: { field: "d.value" },
                  r: { field: "d.radius" },
                  color: { field: "d.category" },
                },
                tooltip: { visible: !1 },
                legends: { color: { visible: !1 } },
              }),
              (u = { padding: { top: 3, right: 15, bottom: 27, left: 15 } }),
              (d = { padding: { top: 3, right: 15, bottom: 47, left: 15 } }),
              (s = t.query),
              (c = da.pie($(e[0]).find(".td-block-content")[0]).options(r)),
              a
                .subscribe(t.componentId, "query", function (t) {
                  return (s = t);
                })
                .subscribe(t.componentId, "data", function (t) {
                  return c.data(t), o();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  return (
                    (i = c.options()),
                    (i =
                      !0 === _.get(e, "legends.color.visible")
                        ? _.merge(i, d)
                        : _.merge(i, u)),
                    (n = _.merge(i, e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    c.options(n),
                    (t.config = n),
                    o()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    c.options({ scales: { color: { range: t.range } } }), o()
                  );
                })
                .on("status.change", function (e, n, i, r) {
                  if (
                    null != s &&
                    (p(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(s)))
                  )
                    return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-pie",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return c.resize();
              }),
              c
                .on("click", function (e) {
                  var n;
                  return (
                    (n =
                      null == e
                        ? null
                        : null != e.id
                        ? e.id.toString()
                        : null != e.$color
                        ? e.$color.toString()
                        : void 0),
                    s
                      ? t.$apply(function () {
                          return a.status(s, n, t.componentId);
                        })
                      : c.select(null)
                  );
                })
                .on("over", function (e) {
                  if (null !== l)
                    return t.$apply(function () {
                      return (t.tooltipText = null === e ? null : l(e));
                    });
                }),
              (p = function () {
                if (s) return (t.selected = a.status(s));
              }),
              (o = function () {
                if (null != s) return c.select(a.status(s));
              }),
              (t.resetSelection = function () {
                if (s) return a.status(s, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdprogress", [
      "$rootScope",
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var a, o, r, l, s, d;
            return (
              (d = $(e)[0].parentNode),
              (a = {
                selectable: !0,
                format: "0.[0]%",
                padding: { top: 3, right: 10, bottom: 22, left: 10 },
                legends: { color: { visible: !1 } },
                tooltip: { visible: !1 },
                custom: { innerRadius: 0.85 },
              }),
              (t.config = a),
              (r = t.query),
              (s = function () {
                var e;
                return (
                  (e = $(d)).toggleClass(
                    "td-selectable",
                    a.selectable && null != r && "" !== r
                  ),
                  e.toggleClass(
                    "td-selected",
                    a.selectable &&
                      null != t.data &&
                      null != t.selected &&
                      o() === t.selected
                  )
                );
              }),
              (l = da.pie($(e[0]).find(".td-block-content")[0]).options(a)),
              i
                .subscribe(t.componentId, "query", function (e) {
                  return (r = e), (t.selected = i.status(r)), s();
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (
                    (t.data = e),
                    l.data(
                      _.map([e.value, 1 - e.value], function (t, e) {
                        return { angle: t, color: e };
                      })
                    ),
                    s()
                  );
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = e), l.options(_.merge({}, e, a)), s();
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return l.options({ scales: { color: { range: t.range } } });
                })
                .on("status.change", function (e, n, a) {
                  return r && (t.selected = i.status(r)), s();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-progress",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return l.resize();
              }),
              (o = function () {
                return null != t.data.id ? t.data.id : t.componentId;
              }),
              (t.select = function () {
                var e;
                r &&
                  ((e = i.status(r) === o() ? null : o()),
                  i.status(r, e, t.componentId)),
                  s();
              }),
              (t.resetSelection = function () {
                if ((event.stopPropagation(), r))
                  return i.status(r, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-progress"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdscatter", [
      "$rootScope",
      "$log",
      "$filter",
      "$interpolate",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, n) {
            var o, r, l, s, d, u, c;
            return (
              function () {
                return $(e).parent().data();
              },
              (l = null),
              function (t) {
                if (t.ngTooltipVisible)
                  return (l =
                    null != t.ngTooltipTextFormat
                      ? i(t.ngTooltipTextFormat)
                      : i("{{$color}}"));
              },
              (r = {
                scales: {
                  x: { nice: !1 },
                  y: { nice: !1 },
                  r: { field: "d.radius", range: [3, 3] },
                  color: { field: "d.category" },
                },
                axes: { y: { tickPadding: 50 } },
                legends: { color: { visible: !1 } },
                tooltip: { visible: !1 },
                custom: { selectable: !1 },
              }),
              "basic-time" === t.componentSubtype &&
                _.merge(r, {
                  scales: { x: { type: "time", domain: ["min", "max"] } },
                  axes: { x: { tickFormat: "{M(x)}" } },
                }),
              (d = { padding: { top: 15, right: 15, bottom: 30, left: 40 } }),
              { padding: { bottom: 48 } },
              (s = t.query),
              (u = da.scatter($(e[0]).find(".td-block-content")[0])).options(
                _.merge(r, d)
              ),
              a
                .subscribe(t.componentId, "query", function (t) {
                  return (s = t);
                })
                .subscribe(t.componentId, "data", function (t) {
                  return u.data(t), o();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n, i;
                  return (
                    (i = u.options()),
                    (n = _.merge(i, e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    u.options(n),
                    (t.config = n),
                    o()
                  );
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return (
                    u.options({ scales: { color: { range: t.range } } }), o()
                  );
                })
                .on("status.change", function (e, n, i, r) {
                  if (
                    null != s &&
                    (c(),
                    r !== t.componentId ||
                      (r === t.componentId && null === a.status(s)))
                  )
                    return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-scatter",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return u.resize();
              }),
              u.on("click", function (e) {
                var n;
                return (
                  (n =
                    null == e
                      ? null
                      : null != e.id
                      ? e.id.toString()
                      : null != e.$color
                      ? e.$color.toString()
                      : void 0),
                  s
                    ? t.$apply(function () {
                        return a.status(s, n, t.componentId);
                      })
                    : u.select(null)
                );
              }),
              u.on("over", function (e) {
                if (l)
                  return t.$apply(function () {
                    return (t.tooltipText = null === e ? null : l(e));
                  });
              }),
              (c = function () {
                if (s) return (t.selected = a.status(s));
              }),
              (o = function () {
                if (null != s) return u.select(a.status(s));
              }),
              (t.resetSelection = function () {
                if (s) return a.status(s, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdselectmenu", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o;
            return (
              (o = function () {
                return t.data && t.query
                  ? (t.selected = _.find(t.data, { id: n.status(t.query) }))
                  : (t.selected = null);
              }),
              (a = function () {
                if (null != t.data && null != t.query)
                  return (
                    null == t.selected && (t.selected = t.data[0]), t.changed()
                  );
              }),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (t.query = e), o();
                })
                .subscribe(t.componentId, "data", function (e) {
                  if (null != e) return (t.data = e), o(), a();
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = e);
                })
                .on("status.change", function (t, e, n) {
                  return o();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-select-menu",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (t.changed = function () {
                if (t.query)
                  return n.status(t.query, t.selected.id, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-select-menu"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdseparator", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            return n
              .subscribe(t.componentId, "config", function (e) {
                return (t.config = e);
              })
              .subscribe(t.componentId, "data", function (e) {
                return (t.data = e);
              })
              .notify("new-widget", {
                id: t.componentId,
                type: "td-separator",
                subtype: t.componentSubtype,
                layout: { width: t.width, height: t.height },
              });
          },
          template: JST["tadaboard/templates/td-separator"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdSlider", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, a, o, r, l, s, d, u, c, p, m, g, f;
              return (
                (f = null),
                null,
                (l = null),
                (r =
                  _.isString(n.componentSubtype) &&
                  n.componentSubtype.indexOf("time") >= 0),
                (a = {
                  format: "0,0.[00]a",
                  precision: 0,
                  domain: r ? [new Date("2010"), new Date("2015")] : [0, 1e3],
                }),
                (n.config = a),
                (d = r ? d3.time.scale() : d3.scale.linear()).clamp(!0),
                $(".td-slider-handle", i).each(function () {
                  var e, i, a;
                  return (
                    (a = this),
                    (e = new Hammer.Manager(a)).add(new Hammer.Pan()),
                    (i = 0),
                    e
                      .on("panstart", function () {
                        return (i = parseInt($(a).css("left")));
                      })
                      .on("panmove", function (e) {
                        var o, l;
                        return (
                          (o = e.deltaX),
                          (l = i + o),
                          r || (l = d(s(d.invert(l), n.config.precision))),
                          (l = t(l, d.range()[0], d.range()[1])),
                          $(a).css("left", l),
                          n.$apply(function () {
                            return p(l);
                          })
                        );
                      })
                      .on("panend", function () {
                        return n.$apply(function () {
                          return u();
                        });
                      })
                  );
                }),
                (function () {
                  var t;
                  return (
                    (t = i.find(".td-slider-container").width()),
                    d.range([0, t])
                  );
                })(),
                (c = function (t) {
                  if (t)
                    return (
                      d.domain(n.config.domain),
                      (null == (f = r ? new Date(t.value) : t.value) ||
                        f < d.domain()[0]) &&
                        (f = d.domain()[0]),
                      null == f || f > d.domain()[1]
                        ? (f = d.domain()[1])
                        : void 0
                    );
                }),
                (m = function () {
                  var t;
                  return (
                    (t = d(f)),
                    (n.handle = { offset: t }),
                    (n.progress = { offset: 0, length: t }),
                    (n.label = f)
                  );
                }),
                (p = function (t) {
                  (f = d.invert(t)), m();
                }),
                (g = function (t) {
                  return (
                    null != t.precision &&
                      _.isString(t.precision) &&
                      Number(t.precision),
                    t
                  );
                }),
                (l = n.query),
                e
                  .subscribe(n.componentId, "query", function (t) {
                    return (l = t), o(), m();
                  })
                  .subscribe(n.componentId, "config", function (t) {
                    return (n.config = _.merge({}, a, g(t)));
                  })
                  .subscribe(n.componentId, "data", function (t) {
                    return c(t), m();
                  })
                  .on("status.change", function (t, e, n) {
                    return o(), m();
                  })
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-slider",
                    subtype: n.componentSubtype,
                    layout: { width: n.width, height: n.height },
                  }),
                (u = function () {
                  if (l) return e.status(l, f, n.componentId);
                }),
                (o = function () {
                  return (f = e.status(l));
                }),
                (t = function (t, e, n) {
                  return Math.min(Math.max(t, e), n);
                }),
                (s = function (t, e) {
                  var n;
                  return e < 0
                    ? ((n = Math.pow(10, Math.abs(e))), Math.round(t / n) * n)
                    : +t.toFixed(e);
                })
              );
            });
          },
          template: JST["tadaboard/templates/td-slider"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdSwitch", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, a, o, r;
              return (
                (r = $(i)[0].parentNode),
                !1,
                (a = null),
                (t = { selectable: !0 }),
                (n.config = t),
                (a = n.query),
                (n.selected = !1),
                (o = function () {
                  return $(r).toggleClass(
                    "td-selected",
                    t.selectable && null != n.data && !0 === n.selected
                  );
                }),
                e
                  .subscribe(n.componentId, "query", function (t) {
                    return (a = t), (n.selected = Boolean(e.status(a))), o();
                  })
                  .subscribe(n.componentId, "data", function (t) {
                    return (n.data = t), o();
                  })
                  .subscribe(n.componentId, "config", function (e) {
                    return (n.config = _.merge({}, t, e)), o();
                  })
                  .on("status.change", function (t, i, r) {
                    return a && (n.selected = Boolean(e.status(a))), o();
                  })
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-switch",
                    subtype: n.componentSubtype,
                    query: n.query,
                    layout: { width: n.width, height: n.height },
                  }),
                (n.select = function () {
                  var t;
                  a &&
                    ((t = !Boolean(e.status(a))),
                    e.status(a, t, n.componentId)),
                    o();
                }),
                function () {
                  return null != n.data.id ? n.data.id : n.componentId;
                }
              );
            });
          },
          template: JST["tadaboard/templates/td-switch"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtab", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o, r;
            return (
              (a = t.query),
              (t.selected = null),
              (o = function (t) {
                return _.isString(t)
                  ? t
                      .split(",")
                      .map(function (t) {
                        return "null" === (t = t.trim()) ? null : t;
                      })
                      .filter(function (t) {
                        return null === t || t.length > 0;
                      })
                  : [];
              }),
              (r = function (t) {
                var e, n, i;
                return (
                  (n = t.labels),
                  (e = t.ids),
                  (n = o(n)),
                  (e = o(e)),
                  (i = Math.max(n.length, e.length)) > 0
                    ? {
                        tabs: _.range(i).map(function (t) {
                          return {
                            label: void 0 === n[t] ? t : n[t],
                            id: void 0 === e[t] ? t : e[t],
                          };
                        }),
                      }
                    : null
                );
              }),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (a = e), (t.selected = n.status(a));
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = r(e));
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e);
                })
                .on("status.change", function (e, i, o) {
                  if (a) return (t.selected = n.status(a));
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-tab",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (t.select = function (e) {
                if (t.query) return n.status(a, e.id, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-tab"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtable", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            return (
              (t.data = []),
              (t.focusActive = !0),
              n
                .subscribe(t.componentId, "query", function (e) {
                  var i;
                  return (i = e), (t.selected = n.status(i));
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = e);
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = e);
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-table",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                })
            );
          },
          template: JST["tadaboard/templates/td-table"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdTags", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, a, o;
              return (
                (n.data = []),
                (n.selected = []),
                (n.focusActive = !0),
                (n.labelAsc = !0),
                (n.valueAsc = !1),
                (t = {
                  selectionEnabled: !0,
                  selectionMultiple: !0,
                  showValues: !1,
                }),
                (n.config = t),
                (o = $(i[0])),
                (a = function (t) {
                  var e;
                  if (t)
                    return (
                      (e = d3.max(t, function (t) {
                        return t.value;
                      })),
                      _.isArray(n.selected)
                        ? (o.toggleClass("td-selected", !_.isEmpty(n.selected)),
                          _.forEach(t, function (t) {
                            return (
                              (t.selected = _.contains(n.selected, t.id)),
                              (t._normalized =
                                90 *
                                (0 !== e && t.value > 0 ? t.value / e : 0)),
                              !0
                            );
                          }))
                        : (o.toggleClass("td-selected", null != n.selected),
                          _.forEach(t, function (t) {
                            return (
                              (t.selected = n.selected === t.id),
                              (t._normalized =
                                90 *
                                (0 !== e && t.value > 0 ? t.value / e : 0)),
                              !0
                            );
                          }))
                    );
                }),
                e
                  .subscribe(n.componentId, "query", function (t) {
                    return (n.query = t), (n.selected = e.status(n.query));
                  })
                  .subscribe(n.componentId, "config", function (e) {
                    var i, a;
                    if (
                      ((n.config = _.merge({}, t, e)),
                      ("label" !== (i = n.config.sorting) && "-label" !== i) ||
                        (n.labelAsc = "label" === n.config.sorting),
                      "value" === (a = n.config.sorting) || "-value" === a)
                    )
                      return (n.valueAsc = "value" === n.config.sorting);
                  })
                  .subscribe(n.componentId, "data", function (t) {
                    return a(t), (n.data = t);
                  })
                  .on("status.change", function (t, i, o) {
                    return (
                      n.query && (n.selected = e.status(n.query)), a(n.data)
                    );
                  })
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-tags",
                    subtype: n.componentSubtype,
                    layout: { width: n.width, height: n.height },
                  }),
                (n.select = function (t) {
                  var i, a;
                  if (n.query && n.config.selectionEnabled)
                    return n.config.selectionMultiple
                      ? ((i = e.status(n.query) || []),
                        (a = !t.selected)
                          ? _.unique(i.push(t.id))
                          : _.pull(i, t.id),
                        e.status(n.query, i, n.componentId))
                      : ((a = !t.selected),
                        n.query
                          ? e.status(n.query, a ? t.id : null, n.componentId)
                          : void 0);
                }),
                (n.selectAll = function () {
                  if (n.query)
                    return e.status(
                      n.query,
                      _.pluck(n.data, "id"),
                      n.componentId
                    );
                }),
                (n.resetSelection = function () {
                  if (n.query) return e.status(n.query, null, n.componentId);
                })
              );
            });
          },
          template: JST["tadaboard/templates/td-tags"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtextdynamic", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (t, e, i) {
            var a, o;
            return (
              (o = null),
              (a = function (t) {
                if (null !== o)
                  return (
                    (_.templateSettings = { interpolate: /\{(.+?)\}/g }),
                    _.template(o, t)
                  );
              }),
              t.query,
              n
                .subscribe(t.componentId, "query", function (t) {
                  return t;
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.dataText = a(e));
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (o = e.format), (t.config = e);
                })
            );
          },
          template: JST["tadaboard/templates/td-text"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdTextSelect", [
      "$timeout",
      "Dashboard",
      function (t, e) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (n, i, a) {
            return t(function () {
              var t, i, a, o;
              return (
                (t = { selectable: !0 }),
                (n.config = t),
                (n.keys = {}),
                (n.options = {}),
                (n.selected = {}),
                (n.texts = {}),
                (i = function (t) {
                  var e, n, i, a, o, r, l, s, d, u;
                  return (
                    (d = t.template),
                    (o = t.selectors),
                    (i = /\{(.+?)\}/g),
                    (e = /[-[\]{}()*+?.,\\^$|#\s]/g),
                    (u = /^{\s*|\s*}$/g),
                    (a = (r = d.match(i)).map(function (t) {
                      return t.replace(e, "\\$&");
                    })),
                    (l = new RegExp(a.join("|"), "g")),
                    (s = d.split(l)),
                    (r = r.map(function (t) {
                      var e;
                      return (e = t.replace(u, "")), _.find(o, { key: e });
                    })),
                    (n = s.reduce(function (t, e, n) {
                      return t.concat(e, r[n]);
                    }, [])),
                    _.compact(n)
                  );
                }),
                (o = function (t, e) {
                  var i;
                  if (null != n.options[t])
                    return (
                      (i = _.find(n.options[t], { id: e })),
                      (n.texts[t] = null != i ? i.label : null)
                    );
                }),
                (a = function (t) {
                  var i, a, r, l, s, d;
                  if ((null == t && (t = n.data), _.isArray(t.items))) {
                    for (
                      d = [],
                        i = 0,
                        r = (s = t.items.filter(angular.isObject)).length;
                      i < r;
                      i++
                    )
                      (a = (l = s[i]).key),
                        (n.keys[a] = a),
                        (n.options[a] = l.options),
                        (n.selected[a] = n.selected[a] || e.status(a) || null),
                        (n.texts[a] = null),
                        d.push(o(a, n.selected[a]));
                    return d;
                  }
                }),
                e
                  .subscribe(n.componentId, "data", function (t) {
                    return (n.data = t), (n.data.items = i(t)), a();
                  })
                  .subscribe(n.componentId, "config", function (e) {
                    return (n.config = _.merge({}, t, e)), update();
                  })
                  .on("status.change", function (t, i, a) {
                    var r, l;
                    for (r in ((l = []), n.keys))
                      r && (n.selected[r] = e.status(r)),
                        l.push(o(r, n.selected[r]));
                    return l;
                  })
                  .notify("new-widget", {
                    id: n.componentId,
                    type: "td-text-select",
                    subtype: n.componentSubtype,
                    layout: { width: n.width, height: n.height },
                  }),
                (n.change = function (t, i) {
                  if ((o(t, i), null != n.keys[t]))
                    return e.status(t, i, n.componentId);
                }),
                (n.isString = angular.isString),
                (n.isObject = angular.isObject)
              );
            });
          },
          template: JST["tadaboard/templates/td-text-select"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtext", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            return n
              .subscribe(t.componentId, "data", function (e) {
                return (t.data = e);
              })
              .subscribe(t.componentId, "config", function (e) {
                return (t.config = e);
              })
              .notify("new-widget", {
                id: t.componentId,
                type: "td-text",
                subtype: t.componentSubtype,
                layout: { width: t.width, height: t.height },
              });
          },
          template: JST["tadaboard/templates/td-text"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtimerangeselect", [
      "$timeout",
      "timeutils",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o, r, l, s, d, u, c, p;
            return (
              (t.current = []),
              (t.showPicker = !1),
              (a = {
                defaultRange: null,
                customRange: null,
                labels: { from: "From", to: "To", days: "selected days" },
                picker: {
                  showDropdowns: !0,
                  timePickerIncrement: 60,
                  timePicker12Hour: !1,
                  timePicker: !1,
                },
              }),
              (t.config = a),
              (l = $(".input-date", e)
                .daterangepicker({ parentEl: ".picker-container" })
                .on("cancel.daterangepicker", function () {
                  return t.$apply(function () {
                    return (t.showPicker = !1);
                  });
                })
                .on("apply.daterangepicker", function (e, n) {
                  return t.$apply(function () {
                    return u(n.startDate, n.endDate), (t.showPicker = !1);
                  });
                })),
              (c = function () {
                var e, n;
                if (null != t.config.customRange) {
                  try {
                    n = JSON.parse("[" + t.config.customRange + "]");
                  } catch (e) {
                    return void e;
                  }
                  return n.map(function (t) {
                    return new Date(1e3 * t);
                  });
                }
              }),
              (p = function () {
                var e;
                if (
                  null != t.config.defaultRange &&
                  "unset" !== t.config.defaultRange
                )
                  return "custom" === t.config.defaultRange
                    ? c()
                    : ((e = new Date()),
                      (function () {
                        switch (t.config.defaultRange) {
                          case "year-to-date":
                            return [d3.time.year(e), e];
                          case "month-to-date":
                            return [d3.time.month(e), e];
                          case "week-to-date":
                            return [d3.time.week(e), e];
                          case "last-year":
                            return [
                              d3.time.year.offset(d3.time.year(e), -1),
                              d3.time.year(e),
                            ];
                          case "last-month":
                            return [
                              d3.time.month.offset(d3.time.month(e), -1),
                              d3.time.month(e),
                            ];
                          case "last-week":
                            return [
                              d3.time.week.offset(d3.time.week(e), -1),
                              d3.time.week(e),
                            ];
                        }
                      })());
              }),
              (s = function () {
                var e;
                return (
                  (e = l.data("daterangepicker")).setStartDate(t.current[0]),
                  e.setEndDate(t.current[1])
                );
              }),
              (d = function () {
                return l.data("daterangepicker").setOptions(t.config.picker);
              }),
              (r = t.query),
              n
                .subscribe(t.componentId, "query", function (t) {
                  return (r = t), o(), s();
                })
                .subscribe(t.componentId, "config", function (e) {
                  var n;
                  if (
                    ((t.config = _.merge({}, t.config, e, function (t, e) {
                      if (_.isArray(t)) return e;
                    })),
                    d(),
                    (n = p()),
                    _.isArray(n))
                  )
                    return u(n[0], n[1]);
                })
                .on("status.change", function (t, e, n) {
                  if (r) return o(), s();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-time-range-select",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              (u = function (e, i) {
                var a;
                if (
                  ((a = n.status(r)),
                  _.isEmpty(a) && (a = []),
                  null != e && (a[0] = moment(e).unix()),
                  null != i && (a[1] = moment(i).unix()),
                  r)
                )
                  return n.status(r, a.sort(), t.componentId);
              }),
              (o = function () {
                var e;
                if (((e = n.status(r)), !_.isEmpty(e)))
                  return (
                    (t.current = [
                      moment.unix(e[0]).toDate(),
                      moment.unix(e[1]).toDate(),
                    ]),
                    (t.days = Math.round((e[1] - e[0]) / 86400))
                  );
              }),
              (t.selectInterval = function (t) {
                if (r && t.value) return n.status(r, t.value);
              }),
              (t.isSelected = function (e) {
                return (
                  e[0] === moment(t.current[0]).unix() &&
                  e[1] === moment(t.current[1]).unix()
                );
              })
            );
          },
          template: JST["tadaboard/templates/td-time-range-select"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtimeselecthour", [
      "$rootScope",
      "$log",
      "$timeout",
      "timeutils",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (e, i, o) {
            var r, l, s, d;
            return (
              (e.current = []),
              (l = $(".td-input-hour-from", i)
                .pickatime({ formatLabel: "HH:i", interval: 60 })
                .pickatime("picker")).on("close", function (t) {
                var i;
                return (
                  (i = this.get("select")),
                  n(function () {
                    return e.$apply(function () {
                      return e.selectTime(i.hour);
                    });
                  })
                );
              }),
              (s = $(".td-input-hour-to", i)
                .pickatime({ formatLabel: "HH:i", interval: 60 })
                .pickatime("picker")).on("close", function (t) {
                var i;
                return (
                  (i = this.get("select")),
                  n(function () {
                    return e.$apply(function () {
                      return e.selectTime(null, i.hour);
                    });
                  })
                );
              }),
              (d = function () {
                return (
                  l.set("select", moment(e.current[0]).hour()),
                  s.set("select", moment(e.current[1]).hour())
                );
              }),
              e.provider || t.dataProvider,
              e.status || t.status,
              (r = e.query),
              a
                .subscribe(e.componentId, "query", function (t) {
                  var n;
                  return (
                    (r = t),
                    (n = a.status(r)),
                    (e.current = [
                      moment.unix(n[0]).toDate(),
                      moment.unix(n[1]).toDate(),
                    ]),
                    d()
                  );
                })
                .on("status.change", function (t, n, i) {
                  var o;
                  if (r)
                    return (
                      (o = a.status(r)),
                      (e.current = [
                        moment.unix(o[0]).toDate(),
                        moment.unix(o[1]).toDate(),
                      ]),
                      d()
                    );
                }),
              (e.clickOpenPicker = function (t, e, n) {
                if (
                  (e && !n && (l.open(), s.close()),
                  e || n || (s.open(), l.close()),
                  t)
                )
                  return t.stopPropagation();
              }),
              (e.selectTime = function (t, e) {
                var n;
                return (
                  (n = a.status(r)),
                  null != t && (n[0] = moment.unix(n[0]).hours(t).unix()),
                  null != e && (n[1] = moment.unix(n[1]).hours(e).unix()),
                  a.status(r, n.sort())
                );
              })
            );
          },
          template: JST["tadaboard/templates/td-time-select-hour"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtimeselect", [
      "$rootScope",
      "$log",
      "$timeout",
      "timeutils",
      "Dashboard",
      function (t, e, n, i, a) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (e, i, o) {
            var r, l, s, d, u;
            return (
              (e.current = []),
              (l = $(".td-input-date-from", i)
                .pickadate()
                .pickadate("picker")).on("close", function (t) {
                var i;
                return (
                  (i = this.get("select")),
                  n(function () {
                    return e.$apply(function () {
                      return e.selectDate(i.obj);
                    });
                  })
                );
              }),
              (s = $(".td-input-date-to", i)
                .pickadate()
                .pickadate("picker")).on("close", function (t) {
                var i;
                return (
                  (i = this.get("select")),
                  n(function () {
                    return e.$apply(function () {
                      return e.selectDate(null, i.obj);
                    });
                  })
                );
              }),
              (u = function () {
                return (
                  l.set("select", e.current[0]), s.set("select", e.current[1])
                );
              }),
              e.provider || t.dataProvider,
              e.status || t.status,
              (r = e.query),
              (d = [moment().unix(), moment().unix()]),
              a
                .subscribe(e.componentId, "query", function (t) {
                  if (null != (r = t))
                    return (
                      void 0 === a.status(r) && a.status(r, d.sort()),
                      (d = a.status(r)),
                      (e.current = [
                        moment.unix(d[0]).toDate(),
                        moment.unix(d[1]).toDate(),
                      ]),
                      u()
                    );
                })
                .on("status.change", function (t, n, i) {
                  if (r)
                    return (
                      (d = a.status(r)),
                      (e.current = [
                        moment.unix(d[0]).toDate(),
                        moment.unix(d[1]).toDate(),
                      ]),
                      u()
                    );
                }),
              (e.clickOpenPicker = function (t, e, n) {
                if (
                  (e && !n && (l.open(), s.close()),
                  e || n || (s.open(), l.close()),
                  t)
                )
                  return t.stopPropagation();
              }),
              (e.selectDate = function (t, e) {
                if (r)
                  return (
                    (d = a.status(r)),
                    null != t && (d[0] = moment(t).unix()),
                    null != e && (d[1] = moment(e).unix()),
                    a.status(r, d.sort())
                  );
              })
            );
          },
          template: JST["tadaboard/templates/td-time-select"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdtimelines", [
      "$rootScope",
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n, i) {
        return {
          scope: { componentId: "@", title: "@", tipText: "@", query: "@" },
          link: function (t, e, n) {
            var a, o, r, l, s, d, u, c;
            return (
              (t.focusActive = !0),
              (o = function () {
                return $(e).parent().data();
              }),
              (a = { axes: { y: { tickPadding: 50 } } }),
              (r = { padding: { top: 0, right: 0, bottom: 20, left: 20 } }),
              (l = { padding: { bottom: 0 } }),
              (s = { padding: { left: 0 } }),
              (d = { padding: { top: 20, right: 20, bottom: 60, left: 50 } }),
              (u = { padding: { left: 20 } }),
              (c = da.timelines($(e[0]).find(".td-block-content")[0])),
              o().width > 1 && o().height > 1
                ? c.options(_.merge(a, d))
                : c.options(_.merge(a, r)),
              i
                .subscribe(t.componentId, "data", function (t) {
                  return c.data(t);
                })
                .subscribe(t.componentId, "config", function (t) {
                  var e;
                  if (o().width > 1 && o().height > 1) {
                    e = _.merge(t, d);
                    try {
                      t.axes.y.visible || (e = _.merge(t, u));
                    } catch (t) {}
                  } else {
                    e = _.merge(t, r);
                    try {
                      t.axes.x.visible || (e = _.merge(t, l));
                    } catch (t) {}
                    try {
                      t.axes.y.visible || (e = _.merge(t, s));
                    } catch (t) {}
                  }
                  return c.options(e);
                })
                .subscribe(t.componentId, "theme", function (t) {
                  return c.options({ scales: { color: { range: t.range } } });
                })
            );
          },
          template: JST["tadaboard/templates/td-block"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdTrigger", [
      "$timeout",
      "$http",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (i, a, o) {
            return t(function () {
              var t, a;
              return (
                (t = { selectable: !0, method: "GET", timeout: 2e3 }),
                (i.config = t),
                (a = null),
                (i.status = null),
                n
                  .subscribe(i.componentId, "data", function (t) {
                    return (i.data = t);
                  })
                  .subscribe(i.componentId, "config", function (e) {
                    return (i.config = _.merge({}, t, e));
                  })
                  .notify("new-widget", {
                    id: i.componentId,
                    type: "td-trigger",
                    subtype: i.componentSubtype,
                    layout: { width: i.width, height: i.height },
                  }),
                (i.trig = function () {
                  var t;
                  null != (t = _.get(i, "data.url")) &&
                    ((i.status = "pending"),
                    e({ method: i.config.method, url: t })
                      .then(
                        function () {
                          return (i.status = "success");
                        },
                        function () {
                          return (i.status = "error");
                        }
                      )
                      .finally(function () {
                        return (
                          clearTimeout(a),
                          (a = setTimeout(function () {
                            return i.$apply(function () {
                              return (i.status = null);
                            });
                          }, i.config.timeout))
                        );
                      }));
                })
              );
            });
          },
          template: JST["tadaboard/templates/td-trigger"],
        };
      },
    ]);
  }.call(this),
  function () {
    angular.module("tadapp").directive("tdvaluebox", [
      "$log",
      "$filter",
      "Dashboard",
      function (t, e, n) {
        return {
          scope: {
            componentId: "@",
            componentSubtype: "@",
            title: "@",
            tipText: "@",
            query: "@",
            width: "@",
            height: "@",
          },
          link: function (t, e, i) {
            var a, o, r, l, s;
            return (
              (s = $(e)[0].parentNode),
              (a = {
                selectable: !0,
                defaultIndex: 0,
                placeholder: "Choose…",
                multipleData: !1,
                ratioBreakpoint: [1.5],
                format: "0,0.[00]a",
              }),
              (t.config = a),
              (l = t.query),
              (t.update = function () {
                var e, n, i, r, d, u, c, p;
                for (
                  p = $(s),
                    d = Math.round((p.width() / p.height()) * 10) / 10,
                    p.toggleClass(
                      "td-selectable",
                      a.selectable && null != l && "" !== l
                    ),
                    p.toggleClass(
                      "td-selected-multi",
                      a.selectable &&
                        null != t.data &&
                        null != t.selected &&
                        _.contains(_.pluck(t.data, "id"), t.selected)
                    ),
                    p.toggleClass(
                      "td-selected",
                      a.selectable &&
                        null != t.data &&
                        null != t.data[t.i] &&
                        null != t.selected &&
                        o() === t.selected
                    ),
                    n = i = 0,
                    r = (c = u = t.config.ratioBreakpoint).length;
                  i < r;
                  n = ++i
                )
                  (e = c[n]),
                    p.toggleClass(
                      "ratio-" + (n + 1),
                      e < d && d <= (u[n + 1] || 1 / 0)
                    );
              }),
              (r = function () {
                return (t.i = a.defaultIndex.toString());
              })(),
              n
                .subscribe(t.componentId, "query", function (e) {
                  return (l = e), (t.selected = n.status(l)), t.update();
                })
                .subscribe(t.componentId, "data", function (e) {
                  return (t.data = _.isArray(e) ? e : [e]), t.update();
                })
                .subscribe(t.componentId, "config", function (e) {
                  return (t.config = _.merge({}, a, e)), t.update(), r();
                })
                .on("status.change", function (e, i, a) {
                  return l && (t.selected = n.status(l)), t.update();
                })
                .notify("new-widget", {
                  id: t.componentId,
                  type: "td-valuebox",
                  subtype: t.componentSubtype,
                  layout: { width: t.width, height: t.height },
                }),
              t.$on("window.resize", function () {
                return t.update();
              }),
              (o = function () {
                return null != t.data[t.i].id ? t.data[t.i].id : t.componentId;
              }),
              (t.select = function () {
                var e;
                l &&
                  ((e = n.status(l) === o() ? null : o()),
                  n.status(l, e, t.componentId)),
                  t.update();
              }),
              (t.resetSelection = function () {
                if ((event.stopPropagation(), l))
                  return n.status(l, null, t.componentId);
              })
            );
          },
          template: JST["tadaboard/templates/td-valuebox"],
        };
      },
    ]);
  }.call(this),
  function () {}.call(this));
